// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-pluginrpc-go. DO NOT EDIT.
//
// Source: buf/plugin/check/v1beta1/breaking_service.proto

package v1beta1pluginrpc

import (
	v1beta1 "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/check/v1beta1"
	context "context"
	fmt "fmt"
	pluginrpc_go "github.com/bufbuild/pluginrpc-go"
)

// This is a compile-time assertion to ensure that this generated file and the pluginrpc package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of pluginrpc newer than the one compiled into your binary. You can fix
// the problem by either regenerating this code with an older version of pluginrpc or updating the
// pluginrpc version compiled into your binary.
const _ = pluginrpc_go.IsAtLeastVersion0_1_0

const (
	// BreakingServiceBreakingPath is the path of the BreakingService's Breaking RPC.
	BreakingServiceBreakingPath = "/buf.plugin.check.v1beta1.BreakingService/Breaking"
	// BreakingServiceListBreakingRulesPath is the path of the BreakingService's ListBreakingRules RPC.
	BreakingServiceListBreakingRulesPath = "/buf.plugin.check.v1beta1.BreakingService/ListBreakingRules"
)

// BreakingServiceSpecBuilder builds a spec buf.plugin.check.v1beta1.BreakingService service.
type BreakingServiceSpecBuilder struct {
	Breaking          pluginrpc_go.ProcedureBuilder
	ListBreakingRules pluginrpc_go.ProcedureBuilder
}

func (s BreakingServiceSpecBuilder) Build() pluginrpc_go.Spec {
	return pluginrpc_go.Spec{
		Procedures: []pluginrpc_go.Procedure{
			{
				Path: BreakingServiceBreakingPath,
				Args: s.Breaking.Args,
			},
			{
				Path: BreakingServiceListBreakingRulesPath,
				Args: s.ListBreakingRules.Args,
			},
		},
	}
}

// BreakingServiceClient is a client for the buf.plugin.check.v1beta1.BreakingService service.
type BreakingServiceClient interface {
	Breaking(context.Context, *v1beta1.BreakingRequest) (*v1beta1.BreakingResponse, error)
	ListBreakingRules(context.Context, *v1beta1.ListBreakingRulesRequest) (*v1beta1.ListBreakingRulesResponse, error)
}

// NewBreakingServiceClient constructs a client for the buf.plugin.check.v1beta1.BreakingService
// service.
func NewBreakingServiceClient(client pluginrpc_go.Client) (BreakingServiceClient, error) {
	return &breakingServiceClient{
		client: client,
	}, nil
}

// BreakingServiceHandler is an implementation of the buf.plugin.check.v1beta1.BreakingService
// service.
type BreakingServiceHandler interface {
	Breaking(context.Context, *v1beta1.BreakingRequest) (*v1beta1.BreakingResponse, error)
	ListBreakingRules(context.Context, *v1beta1.ListBreakingRulesRequest) (*v1beta1.ListBreakingRulesResponse, error)
}

// BreakingServiceServer serves the buf.plugin.check.v1beta1.BreakingService service.
type BreakingServiceServer interface {
	Breaking(context.Context, pluginrpc_go.Env) error
	ListBreakingRules(context.Context, pluginrpc_go.Env) error
}

// NewBreakingServiceServer constructs a server for the buf.plugin.check.v1beta1.BreakingService
// service.
func NewBreakingServiceServer(handler pluginrpc_go.Handler, breakingServiceHandler BreakingServiceHandler) BreakingServiceServer {
	return &breakingServiceServer{
		handler:                handler,
		breakingServiceHandler: breakingServiceHandler,
	}
}

// RegisterBreakingServiceServer registers the server for the
// buf.plugin.check.v1beta1.BreakingService service.
func RegisterBreakingServiceServer(server pluginrpc_go.Server, breakingServiceServer BreakingServiceServer) {
	server.RegisterServeFunc(BreakingServiceBreakingPath, breakingServiceServer.Breaking)
	server.RegisterServeFunc(BreakingServiceListBreakingRulesPath, breakingServiceServer.ListBreakingRules)
}

// *** PRIVATE ***

// breakingServiceClient implements BreakingServiceClient.
type breakingServiceClient struct {
	client pluginrpc_go.Client
}

// Breaking calls buf.plugin.check.v1beta1.BreakingService.Breaking.
func (c *breakingServiceClient) Breaking(ctx context.Context, req *v1beta1.BreakingRequest) (*v1beta1.BreakingResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(BreakingServiceBreakingPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.BreakingResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// ListBreakingRules calls buf.plugin.check.v1beta1.BreakingService.ListBreakingRules.
func (c *breakingServiceClient) ListBreakingRules(ctx context.Context, req *v1beta1.ListBreakingRulesRequest) (*v1beta1.ListBreakingRulesResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(BreakingServiceListBreakingRulesPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.ListBreakingRulesResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// breakingServiceServer implements BreakingServiceServer.
type breakingServiceServer struct {
	handler                pluginrpc_go.Handler
	breakingServiceHandler BreakingServiceHandler
}

// Breaking calls buf.plugin.check.v1beta1.BreakingService.Breaking.
func (c *breakingServiceServer) Breaking(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.BreakingRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.BreakingRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.BreakingRequest", anyReq)
			}
			return c.breakingServiceHandler.Breaking(ctx, req)
		},
	)
}

// ListBreakingRules calls buf.plugin.check.v1beta1.BreakingService.ListBreakingRules.
func (c *breakingServiceServer) ListBreakingRules(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.ListBreakingRulesRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.ListBreakingRulesRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.ListBreakingRulesRequest", anyReq)
			}
			return c.breakingServiceHandler.ListBreakingRules(ctx, req)
		},
	)
}
