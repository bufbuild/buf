// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-pluginrpc-go. DO NOT EDIT.
//
// Source: buf/plugin/check/v1beta1/check_service.proto

package v1beta1pluginrpc

import (
	v1beta1 "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/check/v1beta1"
	context "context"
	fmt "fmt"
	pluginrpc_go "github.com/bufbuild/pluginrpc-go"
)

// This is a compile-time assertion to ensure that this generated file and the pluginrpc package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of pluginrpc newer than the one compiled into your binary. You can fix
// the problem by either regenerating this code with an older version of pluginrpc or updating the
// pluginrpc version compiled into your binary.
const _ = pluginrpc_go.IsAtLeastVersion0_1_0

const (
	// CheckServiceCheckPath is the path of the CheckService's Check RPC.
	CheckServiceCheckPath = "/buf.plugin.check.v1beta1.CheckService/Check"
	// CheckServiceListRulesPath is the path of the CheckService's ListRules RPC.
	CheckServiceListRulesPath = "/buf.plugin.check.v1beta1.CheckService/ListRules"
)

// CheckServiceSpecBuilder builds a spec buf.plugin.check.v1beta1.CheckService service.
type CheckServiceSpecBuilder struct {
	Check     pluginrpc_go.ProcedureBuilder
	ListRules pluginrpc_go.ProcedureBuilder
}

func (s CheckServiceSpecBuilder) Build() pluginrpc_go.Spec {
	return pluginrpc_go.Spec{
		Procedures: []pluginrpc_go.Procedure{
			{
				Path: CheckServiceCheckPath,
				Args: s.Check.Args,
			},
			{
				Path: CheckServiceListRulesPath,
				Args: s.ListRules.Args,
			},
		},
	}
}

// CheckServiceClient is a client for the buf.plugin.check.v1beta1.CheckService service.
type CheckServiceClient interface {
	Check(context.Context, *v1beta1.CheckRequest) (*v1beta1.CheckResponse, error)
	ListRules(context.Context, *v1beta1.ListRulesRequest) (*v1beta1.ListRulesResponse, error)
}

// NewCheckServiceClient constructs a client for the buf.plugin.check.v1beta1.CheckService service.
func NewCheckServiceClient(client pluginrpc_go.Client) (CheckServiceClient, error) {
	return &checkServiceClient{
		client: client,
	}, nil
}

// CheckServiceHandler is an implementation of the buf.plugin.check.v1beta1.CheckService service.
type CheckServiceHandler interface {
	Check(context.Context, *v1beta1.CheckRequest) (*v1beta1.CheckResponse, error)
	ListRules(context.Context, *v1beta1.ListRulesRequest) (*v1beta1.ListRulesResponse, error)
}

// CheckServiceServer serves the buf.plugin.check.v1beta1.CheckService service.
type CheckServiceServer interface {
	Check(context.Context, pluginrpc_go.Env) error
	ListRules(context.Context, pluginrpc_go.Env) error
}

// NewCheckServiceServer constructs a server for the buf.plugin.check.v1beta1.CheckService service.
func NewCheckServiceServer(handler pluginrpc_go.Handler, checkServiceHandler CheckServiceHandler) CheckServiceServer {
	return &checkServiceServer{
		handler:             handler,
		checkServiceHandler: checkServiceHandler,
	}
}

// RegisterCheckServiceServer registers the server for the buf.plugin.check.v1beta1.CheckService
// service.
func RegisterCheckServiceServer(server pluginrpc_go.Server, checkServiceServer CheckServiceServer) {
	server.RegisterServeFunc(CheckServiceCheckPath, checkServiceServer.Check)
	server.RegisterServeFunc(CheckServiceListRulesPath, checkServiceServer.ListRules)
}

// *** PRIVATE ***

// checkServiceClient implements CheckServiceClient.
type checkServiceClient struct {
	client pluginrpc_go.Client
}

// Check calls buf.plugin.check.v1beta1.CheckService.Check.
func (c *checkServiceClient) Check(ctx context.Context, req *v1beta1.CheckRequest) (*v1beta1.CheckResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(CheckServiceCheckPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.CheckResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// ListRules calls buf.plugin.check.v1beta1.CheckService.ListRules.
func (c *checkServiceClient) ListRules(ctx context.Context, req *v1beta1.ListRulesRequest) (*v1beta1.ListRulesResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(CheckServiceListRulesPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.ListRulesResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// checkServiceServer implements CheckServiceServer.
type checkServiceServer struct {
	handler             pluginrpc_go.Handler
	checkServiceHandler CheckServiceHandler
}

// Check calls buf.plugin.check.v1beta1.CheckService.Check.
func (c *checkServiceServer) Check(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.CheckRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.CheckRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.CheckRequest", anyReq)
			}
			return c.checkServiceHandler.Check(ctx, req)
		},
	)
}

// ListRules calls buf.plugin.check.v1beta1.CheckService.ListRules.
func (c *checkServiceServer) ListRules(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.ListRulesRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.ListRulesRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.ListRulesRequest", anyReq)
			}
			return c.checkServiceHandler.ListRules(ctx, req)
		},
	)
}
