// Copyright 2020-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-pluginrpc-go. DO NOT EDIT.
//
// Source: buf/plugin/check/v1beta1/lint_service.proto

package v1beta1pluginrpc

import (
	v1beta1 "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/check/v1beta1"
	context "context"
	fmt "fmt"
	pluginrpc_go "github.com/bufbuild/pluginrpc-go"
)

// This is a compile-time assertion to ensure that this generated file and the pluginrpc package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of pluginrpc newer than the one compiled into your binary. You can fix
// the problem by either regenerating this code with an older version of pluginrpc or updating the
// pluginrpc version compiled into your binary.
const _ = pluginrpc_go.IsAtLeastVersion0_1_0

const (
	// LintServiceLintPath is the path of the LintService's Lint RPC.
	LintServiceLintPath = "/buf.plugin.check.v1beta1.LintService/Lint"
	// LintServiceListLintRulesPath is the path of the LintService's ListLintRules RPC.
	LintServiceListLintRulesPath = "/buf.plugin.check.v1beta1.LintService/ListLintRules"
)

// LintServiceSpecBuilder builds a spec buf.plugin.check.v1beta1.LintService service.
type LintServiceSpecBuilder struct {
	Lint          pluginrpc_go.ProcedureBuilder
	ListLintRules pluginrpc_go.ProcedureBuilder
}

func (s LintServiceSpecBuilder) Build() pluginrpc_go.Spec {
	return pluginrpc_go.Spec{
		Procedures: []pluginrpc_go.Procedure{
			{
				Path: LintServiceLintPath,
				Args: s.Lint.Args,
			},
			{
				Path: LintServiceListLintRulesPath,
				Args: s.ListLintRules.Args,
			},
		},
	}
}

// LintServiceClient is a client for the buf.plugin.check.v1beta1.LintService service.
type LintServiceClient interface {
	Lint(context.Context, *v1beta1.LintRequest) (*v1beta1.LintResponse, error)
	ListLintRules(context.Context, *v1beta1.ListLintRulesRequest) (*v1beta1.ListLintRulesResponse, error)
}

// NewLintServiceClient constructs a client for the buf.plugin.check.v1beta1.LintService service.
func NewLintServiceClient(client pluginrpc_go.Client) (LintServiceClient, error) {
	return &lintServiceClient{
		client: client,
	}, nil
}

// LintServiceHandler is an implementation of the buf.plugin.check.v1beta1.LintService service.
type LintServiceHandler interface {
	Lint(context.Context, *v1beta1.LintRequest) (*v1beta1.LintResponse, error)
	ListLintRules(context.Context, *v1beta1.ListLintRulesRequest) (*v1beta1.ListLintRulesResponse, error)
}

// LintServiceServer serves the buf.plugin.check.v1beta1.LintService service.
type LintServiceServer interface {
	Lint(context.Context, pluginrpc_go.Env) error
	ListLintRules(context.Context, pluginrpc_go.Env) error
}

// NewLintServiceServer constructs a server for the buf.plugin.check.v1beta1.LintService service.
func NewLintServiceServer(handler pluginrpc_go.Handler, lintServiceHandler LintServiceHandler) LintServiceServer {
	return &lintServiceServer{
		handler:            handler,
		lintServiceHandler: lintServiceHandler,
	}
}

// RegisterLintServiceServer registers the server for the buf.plugin.check.v1beta1.LintService
// service.
func RegisterLintServiceServer(server pluginrpc_go.Server, lintServiceServer LintServiceServer) {
	server.RegisterServeFunc(LintServiceLintPath, lintServiceServer.Lint)
	server.RegisterServeFunc(LintServiceListLintRulesPath, lintServiceServer.ListLintRules)
}

// *** PRIVATE ***

// lintServiceClient implements LintServiceClient.
type lintServiceClient struct {
	client pluginrpc_go.Client
}

// Lint calls buf.plugin.check.v1beta1.LintService.Lint.
func (c *lintServiceClient) Lint(ctx context.Context, req *v1beta1.LintRequest) (*v1beta1.LintResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(LintServiceLintPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.LintResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// ListLintRules calls buf.plugin.check.v1beta1.LintService.ListLintRules.
func (c *lintServiceClient) ListLintRules(ctx context.Context, req *v1beta1.ListLintRulesRequest) (*v1beta1.ListLintRulesResponse, error) {
	spec, err := c.client.Spec(ctx)
	if err != nil {
		return nil, err
	}
	procedure, err := spec.Procedure(LintServiceListLintRulesPath)
	if err != nil {
		return nil, err
	}
	res := &v1beta1.ListLintRulesResponse{}
	if err := c.client.Call(ctx, procedure, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// lintServiceServer implements LintServiceServer.
type lintServiceServer struct {
	handler            pluginrpc_go.Handler
	lintServiceHandler LintServiceHandler
}

// Lint calls buf.plugin.check.v1beta1.LintService.Lint.
func (c *lintServiceServer) Lint(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.LintRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.LintRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.LintRequest", anyReq)
			}
			return c.lintServiceHandler.Lint(ctx, req)
		},
	)
}

// ListLintRules calls buf.plugin.check.v1beta1.LintService.ListLintRules.
func (c *lintServiceServer) ListLintRules(ctx context.Context, env pluginrpc_go.Env) error {
	return c.handler.Handle(
		ctx,
		env,
		&v1beta1.ListLintRulesRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1beta1.ListLintRulesRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1beta1.ListLintRulesRequest", anyReq)
			}
			return c.lintServiceHandler.ListLintRules(ctx, req)
		},
	)
}
