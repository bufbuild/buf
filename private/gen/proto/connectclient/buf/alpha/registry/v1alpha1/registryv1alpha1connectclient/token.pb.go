// Code generated by protoc-gen-go-connectclient. DO NOT EDIT.

package registryv1alpha1connectclient

import (
	context "context"
	registryv1alpha1connect "github.com/bufbuild/buf/private/gen/proto/connect/buf/alpha/registry/v1alpha1/registryv1alpha1connect"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type tokenServiceClient struct {
	client registryv1alpha1connect.TokenServiceClient
}

func newTokenServiceClient(
	httpClient connect_go.HTTPClient,
	address string,
	options ...connect_go.ClientOption,
) *tokenServiceClient {
	return &tokenServiceClient{
		client: registryv1alpha1connect.NewTokenServiceClient(
			httpClient,
			address,
			options...,
		),
	}
}

// CreateToken creates a new token suitable for machine-to-machine authentication.
func (s *tokenServiceClient) CreateToken(
	ctx context.Context,
	note string,
	expireTime *timestamppb.Timestamp,
) (token string, _ error) {
	response, err := s.client.CreateToken(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.CreateTokenRequest{
				Note:       note,
				ExpireTime: expireTime,
			}),
	)
	if err != nil {
		return "", err
	}
	return response.Msg.Token, nil
}

// GetToken gets the specific token for the user
//
// This method requires authentication.
func (s *tokenServiceClient) GetToken(ctx context.Context, tokenId string) (token *v1alpha1.Token, _ error) {
	response, err := s.client.GetToken(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.GetTokenRequest{
				TokenId: tokenId,
			}),
	)
	if err != nil {
		return nil, err
	}
	return response.Msg.Token, nil
}

// ListTokens lists the users active tokens
//
// This method requires authentication.
func (s *tokenServiceClient) ListTokens(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (tokens []*v1alpha1.Token, nextPageToken string, _ error) {
	response, err := s.client.ListTokens(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.ListTokensRequest{
				PageSize:  pageSize,
				PageToken: pageToken,
				Reverse:   reverse,
			}),
	)
	if err != nil {
		return nil, "", err
	}
	return response.Msg.Tokens, response.Msg.NextPageToken, nil
}

// DeleteToken deletes an existing token.
//
// This method requires authentication.
func (s *tokenServiceClient) DeleteToken(ctx context.Context, tokenId string) (_ error) {
	_, err := s.client.DeleteToken(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.DeleteTokenRequest{
				TokenId: tokenId,
			}),
	)
	if err != nil {
		return err
	}
	return nil
}
