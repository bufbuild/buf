// Code generated by protoc-gen-go-connectclient. DO NOT EDIT.

package registryv1alpha1connectclient

import (
	context "context"
	registryv1alpha1connect "github.com/bufbuild/buf/private/gen/proto/connect/buf/alpha/registry/v1alpha1/registryv1alpha1connect"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
)

type referenceServiceClient struct {
	client registryv1alpha1connect.ReferenceServiceClient
}

func newReferenceServiceClient(
	httpClient connect_go.HTTPClient,
	address string,
	options ...connect_go.ClientOption,
) *referenceServiceClient {
	return &referenceServiceClient{
		client: registryv1alpha1connect.NewReferenceServiceClient(
			httpClient,
			address,
			options...,
		),
	}
}

// GetReferenceByName takes a reference name and returns the
// reference either as a tag, branch, track or commit.
func (s *referenceServiceClient) GetReferenceByName(
	ctx context.Context,
	name string,
	owner string,
	repositoryName string,
) (reference *v1alpha1.Reference, _ error) {
	response, err := s.client.GetReferenceByName(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.GetReferenceByNameRequest{
				Name:           name,
				Owner:          owner,
				RepositoryName: repositoryName,
			}),
	)
	if err != nil {
		return nil, err
	}
	return response.Msg.Reference, nil
}
