// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/registry/module/v1beta1/branch_service.proto

package modulev1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/bufbuild/buf/private/gen/proto/go/buf/registry/module/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// BranchServiceName is the fully-qualified name of the BranchService service.
	BranchServiceName = "buf.registry.module.v1beta1.BranchService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BranchServiceGetBranchesProcedure is the fully-qualified name of the BranchService's GetBranches
	// RPC.
	BranchServiceGetBranchesProcedure = "/buf.registry.module.v1beta1.BranchService/GetBranches"
	// BranchServiceGetReleaseBranchesProcedure is the fully-qualified name of the BranchService's
	// GetReleaseBranches RPC.
	BranchServiceGetReleaseBranchesProcedure = "/buf.registry.module.v1beta1.BranchService/GetReleaseBranches"
	// BranchServiceListBranchesProcedure is the fully-qualified name of the BranchService's
	// ListBranches RPC.
	BranchServiceListBranchesProcedure = "/buf.registry.module.v1beta1.BranchService/ListBranches"
)

// BranchServiceClient is a client for the buf.registry.module.v1beta1.BranchService service.
type BranchServiceClient interface {
	// Get Branches by ID or name.
	GetBranches(context.Context, *connect.Request[v1beta1.GetBranchesRequest]) (*connect.Response[v1beta1.GetBranchesResponse], error)
	// Get release Branches for specific Modules.
	GetReleaseBranches(context.Context, *connect.Request[v1beta1.GetReleaseBranchesRequest]) (*connect.Response[v1beta1.GetReleaseBranchesResponse], error)
	// List Branches for a given Module, Commit, Tag, or VCSCommit.
	ListBranches(context.Context, *connect.Request[v1beta1.ListBranchesRequest]) (*connect.Response[v1beta1.ListBranchesResponse], error)
}

// NewBranchServiceClient constructs a client for the buf.registry.module.v1beta1.BranchService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBranchServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BranchServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &branchServiceClient{
		getBranches: connect.NewClient[v1beta1.GetBranchesRequest, v1beta1.GetBranchesResponse](
			httpClient,
			baseURL+BranchServiceGetBranchesProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getReleaseBranches: connect.NewClient[v1beta1.GetReleaseBranchesRequest, v1beta1.GetReleaseBranchesResponse](
			httpClient,
			baseURL+BranchServiceGetReleaseBranchesProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listBranches: connect.NewClient[v1beta1.ListBranchesRequest, v1beta1.ListBranchesResponse](
			httpClient,
			baseURL+BranchServiceListBranchesProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// branchServiceClient implements BranchServiceClient.
type branchServiceClient struct {
	getBranches        *connect.Client[v1beta1.GetBranchesRequest, v1beta1.GetBranchesResponse]
	getReleaseBranches *connect.Client[v1beta1.GetReleaseBranchesRequest, v1beta1.GetReleaseBranchesResponse]
	listBranches       *connect.Client[v1beta1.ListBranchesRequest, v1beta1.ListBranchesResponse]
}

// GetBranches calls buf.registry.module.v1beta1.BranchService.GetBranches.
func (c *branchServiceClient) GetBranches(ctx context.Context, req *connect.Request[v1beta1.GetBranchesRequest]) (*connect.Response[v1beta1.GetBranchesResponse], error) {
	return c.getBranches.CallUnary(ctx, req)
}

// GetReleaseBranches calls buf.registry.module.v1beta1.BranchService.GetReleaseBranches.
func (c *branchServiceClient) GetReleaseBranches(ctx context.Context, req *connect.Request[v1beta1.GetReleaseBranchesRequest]) (*connect.Response[v1beta1.GetReleaseBranchesResponse], error) {
	return c.getReleaseBranches.CallUnary(ctx, req)
}

// ListBranches calls buf.registry.module.v1beta1.BranchService.ListBranches.
func (c *branchServiceClient) ListBranches(ctx context.Context, req *connect.Request[v1beta1.ListBranchesRequest]) (*connect.Response[v1beta1.ListBranchesResponse], error) {
	return c.listBranches.CallUnary(ctx, req)
}

// BranchServiceHandler is an implementation of the buf.registry.module.v1beta1.BranchService
// service.
type BranchServiceHandler interface {
	// Get Branches by ID or name.
	GetBranches(context.Context, *connect.Request[v1beta1.GetBranchesRequest]) (*connect.Response[v1beta1.GetBranchesResponse], error)
	// Get release Branches for specific Modules.
	GetReleaseBranches(context.Context, *connect.Request[v1beta1.GetReleaseBranchesRequest]) (*connect.Response[v1beta1.GetReleaseBranchesResponse], error)
	// List Branches for a given Module, Commit, Tag, or VCSCommit.
	ListBranches(context.Context, *connect.Request[v1beta1.ListBranchesRequest]) (*connect.Response[v1beta1.ListBranchesResponse], error)
}

// NewBranchServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBranchServiceHandler(svc BranchServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	branchServiceGetBranchesHandler := connect.NewUnaryHandler(
		BranchServiceGetBranchesProcedure,
		svc.GetBranches,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	branchServiceGetReleaseBranchesHandler := connect.NewUnaryHandler(
		BranchServiceGetReleaseBranchesProcedure,
		svc.GetReleaseBranches,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	branchServiceListBranchesHandler := connect.NewUnaryHandler(
		BranchServiceListBranchesProcedure,
		svc.ListBranches,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/buf.registry.module.v1beta1.BranchService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BranchServiceGetBranchesProcedure:
			branchServiceGetBranchesHandler.ServeHTTP(w, r)
		case BranchServiceGetReleaseBranchesProcedure:
			branchServiceGetReleaseBranchesHandler.ServeHTTP(w, r)
		case BranchServiceListBranchesProcedure:
			branchServiceListBranchesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBranchServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBranchServiceHandler struct{}

func (UnimplementedBranchServiceHandler) GetBranches(context.Context, *connect.Request[v1beta1.GetBranchesRequest]) (*connect.Response[v1beta1.GetBranchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.BranchService.GetBranches is not implemented"))
}

func (UnimplementedBranchServiceHandler) GetReleaseBranches(context.Context, *connect.Request[v1beta1.GetReleaseBranchesRequest]) (*connect.Response[v1beta1.GetReleaseBranchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.BranchService.GetReleaseBranches is not implemented"))
}

func (UnimplementedBranchServiceHandler) ListBranches(context.Context, *connect.Request[v1beta1.ListBranchesRequest]) (*connect.Response[v1beta1.ListBranchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.BranchService.ListBranches is not implemented"))
}
