// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/registry/module/v1beta1/commit_service.proto

package modulev1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/bufbuild/buf/private/gen/proto/go/buf/registry/module/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// CommitServiceName is the fully-qualified name of the CommitService service.
	CommitServiceName = "buf.registry.module.v1beta1.CommitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommitServiceResolveCommitsProcedure is the fully-qualified name of the CommitService's
	// ResolveCommits RPC.
	CommitServiceResolveCommitsProcedure = "/buf.registry.module.v1beta1.CommitService/ResolveCommits"
	// CommitServiceListCommitHistoryProcedure is the fully-qualified name of the CommitService's
	// ListCommitHistory RPC.
	CommitServiceListCommitHistoryProcedure = "/buf.registry.module.v1beta1.CommitService/ListCommitHistory"
	// CommitServiceCreateCommitsProcedure is the fully-qualified name of the CommitService's
	// CreateCommits RPC.
	CommitServiceCreateCommitsProcedure = "/buf.registry.module.v1beta1.CommitService/CreateCommits"
	// CommitServiceGetFileNodesProcedure is the fully-qualified name of the CommitService's
	// GetFileNodes RPC.
	CommitServiceGetFileNodesProcedure = "/buf.registry.module.v1beta1.CommitService/GetFileNodes"
	// CommitServiceGetBlobsProcedure is the fully-qualified name of the CommitService's GetBlobs RPC.
	CommitServiceGetBlobsProcedure = "/buf.registry.module.v1beta1.CommitService/GetBlobs"
	// CommitServiceGetMissingBlobDigestsProcedure is the fully-qualified name of the CommitService's
	// GetMissingBlobDigests RPC.
	CommitServiceGetMissingBlobDigestsProcedure = "/buf.registry.module.v1beta1.CommitService/GetMissingBlobDigests"
)

// CommitServiceClient is a client for the buf.registry.module.v1beta1.CommitService service.
type CommitServiceClient interface {
	// Resolve commits by Commit ID, Module, Branch, Tag, or VCSCommit.
	ResolveCommits(context.Context, *connect.Request[v1beta1.ResolveCommitsRequest]) (*connect.Response[v1beta1.ResolveCommitsResponse], error)
	// List linear Commit history starting at a given Commit, Module, Branch, Tag, or VCSCommit.
	ListCommitHistory(context.Context, *connect.Request[v1beta1.ListCommitHistoryRequest]) (*connect.Response[v1beta1.ListCommitHistoryResponse], error)
	// Create commits on a Module with associated Content.
	//
	// This is used by push and sync.
	//
	// TODO: PushCommits? Something else? This is creating potentially a bunch of resources.
	CreateCommits(context.Context, *connect.Request[v1beta1.CreateCommitsRequest]) (*connect.Response[v1beta1.CreateCommitsResponse], error)
	// Get the FileNodes on a Commit for a given set of Commits, Modules, Branches, Tags, or VCSCommits.
	//
	// Retrieving content is a two-step process:
	//   - Get the FileNode messages. FileNodes are a map from path to digest.
	//   - Get the Blob messages. Blobs are a map from digest to content.
	GetFileNodes(context.Context, *connect.Request[v1beta1.GetFileNodesRequest]) (*connect.Response[v1beta1.GetFileNodesResponse], error)
	// Get the Blobs for files within Commits for a given set of Digests.
	GetBlobs(context.Context, *connect.Request[v1beta1.GetBlobsRequest]) (*connect.Response[v1beta1.GetBlobsResponse], error)
	// Get the digests for Blobs that are not currently stored on the server.
	GetMissingBlobDigests(context.Context, *connect.Request[v1beta1.GetMissingBlobDigestsRequest]) (*connect.Response[v1beta1.GetMissingBlobDigestsResponse], error)
}

// NewCommitServiceClient constructs a client for the buf.registry.module.v1beta1.CommitService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commitServiceClient{
		resolveCommits: connect.NewClient[v1beta1.ResolveCommitsRequest, v1beta1.ResolveCommitsResponse](
			httpClient,
			baseURL+CommitServiceResolveCommitsProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listCommitHistory: connect.NewClient[v1beta1.ListCommitHistoryRequest, v1beta1.ListCommitHistoryResponse](
			httpClient,
			baseURL+CommitServiceListCommitHistoryProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createCommits: connect.NewClient[v1beta1.CreateCommitsRequest, v1beta1.CreateCommitsResponse](
			httpClient,
			baseURL+CommitServiceCreateCommitsProcedure,
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getFileNodes: connect.NewClient[v1beta1.GetFileNodesRequest, v1beta1.GetFileNodesResponse](
			httpClient,
			baseURL+CommitServiceGetFileNodesProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getBlobs: connect.NewClient[v1beta1.GetBlobsRequest, v1beta1.GetBlobsResponse](
			httpClient,
			baseURL+CommitServiceGetBlobsProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getMissingBlobDigests: connect.NewClient[v1beta1.GetMissingBlobDigestsRequest, v1beta1.GetMissingBlobDigestsResponse](
			httpClient,
			baseURL+CommitServiceGetMissingBlobDigestsProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// commitServiceClient implements CommitServiceClient.
type commitServiceClient struct {
	resolveCommits        *connect.Client[v1beta1.ResolveCommitsRequest, v1beta1.ResolveCommitsResponse]
	listCommitHistory     *connect.Client[v1beta1.ListCommitHistoryRequest, v1beta1.ListCommitHistoryResponse]
	createCommits         *connect.Client[v1beta1.CreateCommitsRequest, v1beta1.CreateCommitsResponse]
	getFileNodes          *connect.Client[v1beta1.GetFileNodesRequest, v1beta1.GetFileNodesResponse]
	getBlobs              *connect.Client[v1beta1.GetBlobsRequest, v1beta1.GetBlobsResponse]
	getMissingBlobDigests *connect.Client[v1beta1.GetMissingBlobDigestsRequest, v1beta1.GetMissingBlobDigestsResponse]
}

// ResolveCommits calls buf.registry.module.v1beta1.CommitService.ResolveCommits.
func (c *commitServiceClient) ResolveCommits(ctx context.Context, req *connect.Request[v1beta1.ResolveCommitsRequest]) (*connect.Response[v1beta1.ResolveCommitsResponse], error) {
	return c.resolveCommits.CallUnary(ctx, req)
}

// ListCommitHistory calls buf.registry.module.v1beta1.CommitService.ListCommitHistory.
func (c *commitServiceClient) ListCommitHistory(ctx context.Context, req *connect.Request[v1beta1.ListCommitHistoryRequest]) (*connect.Response[v1beta1.ListCommitHistoryResponse], error) {
	return c.listCommitHistory.CallUnary(ctx, req)
}

// CreateCommits calls buf.registry.module.v1beta1.CommitService.CreateCommits.
func (c *commitServiceClient) CreateCommits(ctx context.Context, req *connect.Request[v1beta1.CreateCommitsRequest]) (*connect.Response[v1beta1.CreateCommitsResponse], error) {
	return c.createCommits.CallUnary(ctx, req)
}

// GetFileNodes calls buf.registry.module.v1beta1.CommitService.GetFileNodes.
func (c *commitServiceClient) GetFileNodes(ctx context.Context, req *connect.Request[v1beta1.GetFileNodesRequest]) (*connect.Response[v1beta1.GetFileNodesResponse], error) {
	return c.getFileNodes.CallUnary(ctx, req)
}

// GetBlobs calls buf.registry.module.v1beta1.CommitService.GetBlobs.
func (c *commitServiceClient) GetBlobs(ctx context.Context, req *connect.Request[v1beta1.GetBlobsRequest]) (*connect.Response[v1beta1.GetBlobsResponse], error) {
	return c.getBlobs.CallUnary(ctx, req)
}

// GetMissingBlobDigests calls buf.registry.module.v1beta1.CommitService.GetMissingBlobDigests.
func (c *commitServiceClient) GetMissingBlobDigests(ctx context.Context, req *connect.Request[v1beta1.GetMissingBlobDigestsRequest]) (*connect.Response[v1beta1.GetMissingBlobDigestsResponse], error) {
	return c.getMissingBlobDigests.CallUnary(ctx, req)
}

// CommitServiceHandler is an implementation of the buf.registry.module.v1beta1.CommitService
// service.
type CommitServiceHandler interface {
	// Resolve commits by Commit ID, Module, Branch, Tag, or VCSCommit.
	ResolveCommits(context.Context, *connect.Request[v1beta1.ResolveCommitsRequest]) (*connect.Response[v1beta1.ResolveCommitsResponse], error)
	// List linear Commit history starting at a given Commit, Module, Branch, Tag, or VCSCommit.
	ListCommitHistory(context.Context, *connect.Request[v1beta1.ListCommitHistoryRequest]) (*connect.Response[v1beta1.ListCommitHistoryResponse], error)
	// Create commits on a Module with associated Content.
	//
	// This is used by push and sync.
	//
	// TODO: PushCommits? Something else? This is creating potentially a bunch of resources.
	CreateCommits(context.Context, *connect.Request[v1beta1.CreateCommitsRequest]) (*connect.Response[v1beta1.CreateCommitsResponse], error)
	// Get the FileNodes on a Commit for a given set of Commits, Modules, Branches, Tags, or VCSCommits.
	//
	// Retrieving content is a two-step process:
	//   - Get the FileNode messages. FileNodes are a map from path to digest.
	//   - Get the Blob messages. Blobs are a map from digest to content.
	GetFileNodes(context.Context, *connect.Request[v1beta1.GetFileNodesRequest]) (*connect.Response[v1beta1.GetFileNodesResponse], error)
	// Get the Blobs for files within Commits for a given set of Digests.
	GetBlobs(context.Context, *connect.Request[v1beta1.GetBlobsRequest]) (*connect.Response[v1beta1.GetBlobsResponse], error)
	// Get the digests for Blobs that are not currently stored on the server.
	GetMissingBlobDigests(context.Context, *connect.Request[v1beta1.GetMissingBlobDigestsRequest]) (*connect.Response[v1beta1.GetMissingBlobDigestsResponse], error)
}

// NewCommitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommitServiceHandler(svc CommitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commitServiceResolveCommitsHandler := connect.NewUnaryHandler(
		CommitServiceResolveCommitsProcedure,
		svc.ResolveCommits,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	commitServiceListCommitHistoryHandler := connect.NewUnaryHandler(
		CommitServiceListCommitHistoryProcedure,
		svc.ListCommitHistory,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	commitServiceCreateCommitsHandler := connect.NewUnaryHandler(
		CommitServiceCreateCommitsProcedure,
		svc.CreateCommits,
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	commitServiceGetFileNodesHandler := connect.NewUnaryHandler(
		CommitServiceGetFileNodesProcedure,
		svc.GetFileNodes,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	commitServiceGetBlobsHandler := connect.NewUnaryHandler(
		CommitServiceGetBlobsProcedure,
		svc.GetBlobs,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	commitServiceGetMissingBlobDigestsHandler := connect.NewUnaryHandler(
		CommitServiceGetMissingBlobDigestsProcedure,
		svc.GetMissingBlobDigests,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/buf.registry.module.v1beta1.CommitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommitServiceResolveCommitsProcedure:
			commitServiceResolveCommitsHandler.ServeHTTP(w, r)
		case CommitServiceListCommitHistoryProcedure:
			commitServiceListCommitHistoryHandler.ServeHTTP(w, r)
		case CommitServiceCreateCommitsProcedure:
			commitServiceCreateCommitsHandler.ServeHTTP(w, r)
		case CommitServiceGetFileNodesProcedure:
			commitServiceGetFileNodesHandler.ServeHTTP(w, r)
		case CommitServiceGetBlobsProcedure:
			commitServiceGetBlobsHandler.ServeHTTP(w, r)
		case CommitServiceGetMissingBlobDigestsProcedure:
			commitServiceGetMissingBlobDigestsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommitServiceHandler struct{}

func (UnimplementedCommitServiceHandler) ResolveCommits(context.Context, *connect.Request[v1beta1.ResolveCommitsRequest]) (*connect.Response[v1beta1.ResolveCommitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.ResolveCommits is not implemented"))
}

func (UnimplementedCommitServiceHandler) ListCommitHistory(context.Context, *connect.Request[v1beta1.ListCommitHistoryRequest]) (*connect.Response[v1beta1.ListCommitHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.ListCommitHistory is not implemented"))
}

func (UnimplementedCommitServiceHandler) CreateCommits(context.Context, *connect.Request[v1beta1.CreateCommitsRequest]) (*connect.Response[v1beta1.CreateCommitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.CreateCommits is not implemented"))
}

func (UnimplementedCommitServiceHandler) GetFileNodes(context.Context, *connect.Request[v1beta1.GetFileNodesRequest]) (*connect.Response[v1beta1.GetFileNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.GetFileNodes is not implemented"))
}

func (UnimplementedCommitServiceHandler) GetBlobs(context.Context, *connect.Request[v1beta1.GetBlobsRequest]) (*connect.Response[v1beta1.GetBlobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.GetBlobs is not implemented"))
}

func (UnimplementedCommitServiceHandler) GetMissingBlobDigests(context.Context, *connect.Request[v1beta1.GetMissingBlobDigestsRequest]) (*connect.Response[v1beta1.GetMissingBlobDigestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.registry.module.v1beta1.CommitService.GetMissingBlobDigests is not implemented"))
}
