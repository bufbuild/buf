// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/alpha/registry/v1alpha1/repository_track_commit.proto

package registryv1alpha1connect

import (
	context "context"
	errors "errors"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_0_1

const (
	// RepositoryTrackCommitServiceName is the fully-qualified name of the RepositoryTrackCommitService
	// service.
	RepositoryTrackCommitServiceName = "buf.alpha.registry.v1alpha1.RepositoryTrackCommitService"
)

// RepositoryTrackCommitServiceClient is a client for the
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService service.
type RepositoryTrackCommitServiceClient interface {
	// GetRepositoryTrackCommitByRepositoryCommit returns the RepositoryTrackCommit associated given repository_commit on
	// the given repository_track. Returns NOT_FOUND if the RepositoryTrackCommit does not exist.
	GetRepositoryTrackCommitByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse], error)
	// ListRepositoryTrackCommitsByRepositoryTrack lists the RepositoryTrackCommitS associated with a repository track,
	// ordered by their sequence id.
	ListRepositoryTrackCommitsByRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse], error)
	// GetRepositoryTrackCommitByReference returns the RepositoryTrackCommit associated with the given reference.
	GetRepositoryTrackCommitByReference(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByReferenceRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByReferenceResponse], error)
}

// NewRepositoryTrackCommitServiceClient constructs a client for the
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryTrackCommitServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RepositoryTrackCommitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repositoryTrackCommitServiceClient{
		getRepositoryTrackCommitByRepositoryCommit: connect_go.NewClient[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest, v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByRepositoryCommit",
			opts...,
		),
		listRepositoryTrackCommitsByRepositoryTrack: connect_go.NewClient[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest, v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/ListRepositoryTrackCommitsByRepositoryTrack",
			opts...,
		),
		getRepositoryTrackCommitByReference: connect_go.NewClient[v1alpha1.GetRepositoryTrackCommitByReferenceRequest, v1alpha1.GetRepositoryTrackCommitByReferenceResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByReference",
			opts...,
		),
	}
}

// repositoryTrackCommitServiceClient implements RepositoryTrackCommitServiceClient.
type repositoryTrackCommitServiceClient struct {
	getRepositoryTrackCommitByRepositoryCommit  *connect_go.Client[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest, v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse]
	listRepositoryTrackCommitsByRepositoryTrack *connect_go.Client[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest, v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse]
	getRepositoryTrackCommitByReference         *connect_go.Client[v1alpha1.GetRepositoryTrackCommitByReferenceRequest, v1alpha1.GetRepositoryTrackCommitByReferenceResponse]
}

// GetRepositoryTrackCommitByRepositoryCommit calls
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.GetRepositoryTrackCommitByRepositoryCommit.
func (c *repositoryTrackCommitServiceClient) GetRepositoryTrackCommitByRepositoryCommit(ctx context.Context, req *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse], error) {
	return c.getRepositoryTrackCommitByRepositoryCommit.CallUnary(ctx, req)
}

// ListRepositoryTrackCommitsByRepositoryTrack calls
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.ListRepositoryTrackCommitsByRepositoryTrack.
func (c *repositoryTrackCommitServiceClient) ListRepositoryTrackCommitsByRepositoryTrack(ctx context.Context, req *connect_go.Request[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse], error) {
	return c.listRepositoryTrackCommitsByRepositoryTrack.CallUnary(ctx, req)
}

// GetRepositoryTrackCommitByReference calls
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.GetRepositoryTrackCommitByReference.
func (c *repositoryTrackCommitServiceClient) GetRepositoryTrackCommitByReference(ctx context.Context, req *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByReferenceRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByReferenceResponse], error) {
	return c.getRepositoryTrackCommitByReference.CallUnary(ctx, req)
}

// RepositoryTrackCommitServiceHandler is an implementation of the
// buf.alpha.registry.v1alpha1.RepositoryTrackCommitService service.
type RepositoryTrackCommitServiceHandler interface {
	// GetRepositoryTrackCommitByRepositoryCommit returns the RepositoryTrackCommit associated given repository_commit on
	// the given repository_track. Returns NOT_FOUND if the RepositoryTrackCommit does not exist.
	GetRepositoryTrackCommitByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse], error)
	// ListRepositoryTrackCommitsByRepositoryTrack lists the RepositoryTrackCommitS associated with a repository track,
	// ordered by their sequence id.
	ListRepositoryTrackCommitsByRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse], error)
	// GetRepositoryTrackCommitByReference returns the RepositoryTrackCommit associated with the given reference.
	GetRepositoryTrackCommitByReference(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByReferenceRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByReferenceResponse], error)
}

// NewRepositoryTrackCommitServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryTrackCommitServiceHandler(svc RepositoryTrackCommitServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByRepositoryCommit", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByRepositoryCommit",
		svc.GetRepositoryTrackCommitByRepositoryCommit,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/ListRepositoryTrackCommitsByRepositoryTrack", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/ListRepositoryTrackCommitsByRepositoryTrack",
		svc.ListRepositoryTrackCommitsByRepositoryTrack,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByReference", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/GetRepositoryTrackCommitByReference",
		svc.GetRepositoryTrackCommitByReference,
		opts...,
	))
	return "/buf.alpha.registry.v1alpha1.RepositoryTrackCommitService/", mux
}

// UnimplementedRepositoryTrackCommitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryTrackCommitServiceHandler struct{}

func (UnimplementedRepositoryTrackCommitServiceHandler) GetRepositoryTrackCommitByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByRepositoryCommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.GetRepositoryTrackCommitByRepositoryCommit is not implemented"))
}

func (UnimplementedRepositoryTrackCommitServiceHandler) ListRepositoryTrackCommitsByRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTrackCommitsByRepositoryTrackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.ListRepositoryTrackCommitsByRepositoryTrack is not implemented"))
}

func (UnimplementedRepositoryTrackCommitServiceHandler) GetRepositoryTrackCommitByReference(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackCommitByReferenceRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackCommitByReferenceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackCommitService.GetRepositoryTrackCommitByReference is not implemented"))
}
