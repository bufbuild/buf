// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/alpha/registry/v1alpha1/reference.proto

package registryv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// ReferenceServiceName is the fully-qualified name of the ReferenceService service.
	ReferenceServiceName = "buf.alpha.registry.v1alpha1.ReferenceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReferenceServiceGetReferenceByNameProcedure is the fully-qualified name of the ReferenceService's
	// GetReferenceByName RPC.
	ReferenceServiceGetReferenceByNameProcedure = "/buf.alpha.registry.v1alpha1.ReferenceService/GetReferenceByName"
	// ReferenceServiceListGitCommitsForReferenceProcedure is the fully-qualified name of the
	// ReferenceService's ListGitCommitsForReference RPC.
	ReferenceServiceListGitCommitsForReferenceProcedure = "/buf.alpha.registry.v1alpha1.ReferenceService/ListGitCommitsForReference"
)

// ReferenceServiceClient is a client for the buf.alpha.registry.v1alpha1.ReferenceService service.
type ReferenceServiceClient interface {
	// GetReferenceByName takes a reference name and returns the
	// reference either as 'main', a tag, or commit.
	GetReferenceByName(context.Context, *connect.Request[v1alpha1.GetReferenceByNameRequest]) (*connect.Response[v1alpha1.GetReferenceByNameResponse], error)
	// ListGitCommitsForReference takes a string reference and returns a paginated list of
	// git commit information associated with the resolved reference commit.
	ListGitCommitsForReference(context.Context, *connect.Request[v1alpha1.ListGitCommitsForReferenceRequest]) (*connect.Response[v1alpha1.ListGitCommitsForReferenceResponse], error)
}

// NewReferenceServiceClient constructs a client for the
// buf.alpha.registry.v1alpha1.ReferenceService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReferenceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReferenceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &referenceServiceClient{
		getReferenceByName: connect.NewClient[v1alpha1.GetReferenceByNameRequest, v1alpha1.GetReferenceByNameResponse](
			httpClient,
			baseURL+ReferenceServiceGetReferenceByNameProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listGitCommitsForReference: connect.NewClient[v1alpha1.ListGitCommitsForReferenceRequest, v1alpha1.ListGitCommitsForReferenceResponse](
			httpClient,
			baseURL+ReferenceServiceListGitCommitsForReferenceProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// referenceServiceClient implements ReferenceServiceClient.
type referenceServiceClient struct {
	getReferenceByName         *connect.Client[v1alpha1.GetReferenceByNameRequest, v1alpha1.GetReferenceByNameResponse]
	listGitCommitsForReference *connect.Client[v1alpha1.ListGitCommitsForReferenceRequest, v1alpha1.ListGitCommitsForReferenceResponse]
}

// GetReferenceByName calls buf.alpha.registry.v1alpha1.ReferenceService.GetReferenceByName.
func (c *referenceServiceClient) GetReferenceByName(ctx context.Context, req *connect.Request[v1alpha1.GetReferenceByNameRequest]) (*connect.Response[v1alpha1.GetReferenceByNameResponse], error) {
	return c.getReferenceByName.CallUnary(ctx, req)
}

// ListGitCommitsForReference calls
// buf.alpha.registry.v1alpha1.ReferenceService.ListGitCommitsForReference.
func (c *referenceServiceClient) ListGitCommitsForReference(ctx context.Context, req *connect.Request[v1alpha1.ListGitCommitsForReferenceRequest]) (*connect.Response[v1alpha1.ListGitCommitsForReferenceResponse], error) {
	return c.listGitCommitsForReference.CallUnary(ctx, req)
}

// ReferenceServiceHandler is an implementation of the buf.alpha.registry.v1alpha1.ReferenceService
// service.
type ReferenceServiceHandler interface {
	// GetReferenceByName takes a reference name and returns the
	// reference either as 'main', a tag, or commit.
	GetReferenceByName(context.Context, *connect.Request[v1alpha1.GetReferenceByNameRequest]) (*connect.Response[v1alpha1.GetReferenceByNameResponse], error)
	// ListGitCommitsForReference takes a string reference and returns a paginated list of
	// git commit information associated with the resolved reference commit.
	ListGitCommitsForReference(context.Context, *connect.Request[v1alpha1.ListGitCommitsForReferenceRequest]) (*connect.Response[v1alpha1.ListGitCommitsForReferenceResponse], error)
}

// NewReferenceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReferenceServiceHandler(svc ReferenceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	referenceServiceGetReferenceByNameHandler := connect.NewUnaryHandler(
		ReferenceServiceGetReferenceByNameProcedure,
		svc.GetReferenceByName,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	referenceServiceListGitCommitsForReferenceHandler := connect.NewUnaryHandler(
		ReferenceServiceListGitCommitsForReferenceProcedure,
		svc.ListGitCommitsForReference,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/buf.alpha.registry.v1alpha1.ReferenceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReferenceServiceGetReferenceByNameProcedure:
			referenceServiceGetReferenceByNameHandler.ServeHTTP(w, r)
		case ReferenceServiceListGitCommitsForReferenceProcedure:
			referenceServiceListGitCommitsForReferenceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReferenceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReferenceServiceHandler struct{}

func (UnimplementedReferenceServiceHandler) GetReferenceByName(context.Context, *connect.Request[v1alpha1.GetReferenceByNameRequest]) (*connect.Response[v1alpha1.GetReferenceByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.ReferenceService.GetReferenceByName is not implemented"))
}

func (UnimplementedReferenceServiceHandler) ListGitCommitsForReference(context.Context, *connect.Request[v1alpha1.ListGitCommitsForReferenceRequest]) (*connect.Response[v1alpha1.ListGitCommitsForReferenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.ReferenceService.ListGitCommitsForReference is not implemented"))
}
