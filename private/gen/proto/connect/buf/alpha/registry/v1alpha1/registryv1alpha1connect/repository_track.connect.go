// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/alpha/registry/v1alpha1/repository_track.proto

package registryv1alpha1connect

import (
	context "context"
	errors "errors"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RepositoryTrackServiceName is the fully-qualified name of the RepositoryTrackService service.
	RepositoryTrackServiceName = "buf.alpha.registry.v1alpha1.RepositoryTrackService"
)

// RepositoryTrackServiceClient is a client for the
// buf.alpha.registry.v1alpha1.RepositoryTrackService service.
type RepositoryTrackServiceClient interface {
	// CreateRepositoryTrack creates a new repository track.
	CreateRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.CreateRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.CreateRepositoryTrackResponse], error)
	// ListRepositoryTracks lists the repository tracks associated with a repository.
	ListRepositoryTracks(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksResponse], error)
	// DeleteRepositoryTrackByName deletes a repository track by name.
	DeleteRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.DeleteRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.DeleteRepositoryTrackByNameResponse], error)
	// GetRepositoryTrackByName gets a repository track by name.
	GetRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackByNameResponse], error)
	// ListRepositoryTracksByRepositoryCommit lists the repository tracks associated with a repository commit.
	ListRepositoryTracksByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksByRepositoryCommitResponse], error)
}

// NewRepositoryTrackServiceClient constructs a client for the
// buf.alpha.registry.v1alpha1.RepositoryTrackService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryTrackServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RepositoryTrackServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repositoryTrackServiceClient{
		createRepositoryTrack: connect_go.NewClient[v1alpha1.CreateRepositoryTrackRequest, v1alpha1.CreateRepositoryTrackResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackService/CreateRepositoryTrack",
			opts...,
		),
		listRepositoryTracks: connect_go.NewClient[v1alpha1.ListRepositoryTracksRequest, v1alpha1.ListRepositoryTracksResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracks",
			opts...,
		),
		deleteRepositoryTrackByName: connect_go.NewClient[v1alpha1.DeleteRepositoryTrackByNameRequest, v1alpha1.DeleteRepositoryTrackByNameResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackService/DeleteRepositoryTrackByName",
			opts...,
		),
		getRepositoryTrackByName: connect_go.NewClient[v1alpha1.GetRepositoryTrackByNameRequest, v1alpha1.GetRepositoryTrackByNameResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackService/GetRepositoryTrackByName",
			opts...,
		),
		listRepositoryTracksByRepositoryCommit: connect_go.NewClient[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest, v1alpha1.ListRepositoryTracksByRepositoryCommitResponse](
			httpClient,
			baseURL+"/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracksByRepositoryCommit",
			opts...,
		),
	}
}

// repositoryTrackServiceClient implements RepositoryTrackServiceClient.
type repositoryTrackServiceClient struct {
	createRepositoryTrack                  *connect_go.Client[v1alpha1.CreateRepositoryTrackRequest, v1alpha1.CreateRepositoryTrackResponse]
	listRepositoryTracks                   *connect_go.Client[v1alpha1.ListRepositoryTracksRequest, v1alpha1.ListRepositoryTracksResponse]
	deleteRepositoryTrackByName            *connect_go.Client[v1alpha1.DeleteRepositoryTrackByNameRequest, v1alpha1.DeleteRepositoryTrackByNameResponse]
	getRepositoryTrackByName               *connect_go.Client[v1alpha1.GetRepositoryTrackByNameRequest, v1alpha1.GetRepositoryTrackByNameResponse]
	listRepositoryTracksByRepositoryCommit *connect_go.Client[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest, v1alpha1.ListRepositoryTracksByRepositoryCommitResponse]
}

// CreateRepositoryTrack calls
// buf.alpha.registry.v1alpha1.RepositoryTrackService.CreateRepositoryTrack.
func (c *repositoryTrackServiceClient) CreateRepositoryTrack(ctx context.Context, req *connect_go.Request[v1alpha1.CreateRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.CreateRepositoryTrackResponse], error) {
	return c.createRepositoryTrack.CallUnary(ctx, req)
}

// ListRepositoryTracks calls
// buf.alpha.registry.v1alpha1.RepositoryTrackService.ListRepositoryTracks.
func (c *repositoryTrackServiceClient) ListRepositoryTracks(ctx context.Context, req *connect_go.Request[v1alpha1.ListRepositoryTracksRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksResponse], error) {
	return c.listRepositoryTracks.CallUnary(ctx, req)
}

// DeleteRepositoryTrackByName calls
// buf.alpha.registry.v1alpha1.RepositoryTrackService.DeleteRepositoryTrackByName.
func (c *repositoryTrackServiceClient) DeleteRepositoryTrackByName(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.DeleteRepositoryTrackByNameResponse], error) {
	return c.deleteRepositoryTrackByName.CallUnary(ctx, req)
}

// GetRepositoryTrackByName calls
// buf.alpha.registry.v1alpha1.RepositoryTrackService.GetRepositoryTrackByName.
func (c *repositoryTrackServiceClient) GetRepositoryTrackByName(ctx context.Context, req *connect_go.Request[v1alpha1.GetRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackByNameResponse], error) {
	return c.getRepositoryTrackByName.CallUnary(ctx, req)
}

// ListRepositoryTracksByRepositoryCommit calls
// buf.alpha.registry.v1alpha1.RepositoryTrackService.ListRepositoryTracksByRepositoryCommit.
func (c *repositoryTrackServiceClient) ListRepositoryTracksByRepositoryCommit(ctx context.Context, req *connect_go.Request[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksByRepositoryCommitResponse], error) {
	return c.listRepositoryTracksByRepositoryCommit.CallUnary(ctx, req)
}

// RepositoryTrackServiceHandler is an implementation of the
// buf.alpha.registry.v1alpha1.RepositoryTrackService service.
type RepositoryTrackServiceHandler interface {
	// CreateRepositoryTrack creates a new repository track.
	CreateRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.CreateRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.CreateRepositoryTrackResponse], error)
	// ListRepositoryTracks lists the repository tracks associated with a repository.
	ListRepositoryTracks(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksResponse], error)
	// DeleteRepositoryTrackByName deletes a repository track by name.
	DeleteRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.DeleteRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.DeleteRepositoryTrackByNameResponse], error)
	// GetRepositoryTrackByName gets a repository track by name.
	GetRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackByNameResponse], error)
	// ListRepositoryTracksByRepositoryCommit lists the repository tracks associated with a repository commit.
	ListRepositoryTracksByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksByRepositoryCommitResponse], error)
}

// NewRepositoryTrackServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryTrackServiceHandler(svc RepositoryTrackServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackService/CreateRepositoryTrack", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackService/CreateRepositoryTrack",
		svc.CreateRepositoryTrack,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracks", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracks",
		svc.ListRepositoryTracks,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackService/DeleteRepositoryTrackByName", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackService/DeleteRepositoryTrackByName",
		svc.DeleteRepositoryTrackByName,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackService/GetRepositoryTrackByName", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackService/GetRepositoryTrackByName",
		svc.GetRepositoryTrackByName,
		opts...,
	))
	mux.Handle("/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracksByRepositoryCommit", connect_go.NewUnaryHandler(
		"/buf.alpha.registry.v1alpha1.RepositoryTrackService/ListRepositoryTracksByRepositoryCommit",
		svc.ListRepositoryTracksByRepositoryCommit,
		opts...,
	))
	return "/buf.alpha.registry.v1alpha1.RepositoryTrackService/", mux
}

// UnimplementedRepositoryTrackServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryTrackServiceHandler struct{}

func (UnimplementedRepositoryTrackServiceHandler) CreateRepositoryTrack(context.Context, *connect_go.Request[v1alpha1.CreateRepositoryTrackRequest]) (*connect_go.Response[v1alpha1.CreateRepositoryTrackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackService.CreateRepositoryTrack is not implemented"))
}

func (UnimplementedRepositoryTrackServiceHandler) ListRepositoryTracks(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackService.ListRepositoryTracks is not implemented"))
}

func (UnimplementedRepositoryTrackServiceHandler) DeleteRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.DeleteRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.DeleteRepositoryTrackByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackService.DeleteRepositoryTrackByName is not implemented"))
}

func (UnimplementedRepositoryTrackServiceHandler) GetRepositoryTrackByName(context.Context, *connect_go.Request[v1alpha1.GetRepositoryTrackByNameRequest]) (*connect_go.Response[v1alpha1.GetRepositoryTrackByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackService.GetRepositoryTrackByName is not implemented"))
}

func (UnimplementedRepositoryTrackServiceHandler) ListRepositoryTracksByRepositoryCommit(context.Context, *connect_go.Request[v1alpha1.ListRepositoryTracksByRepositoryCommitRequest]) (*connect_go.Response[v1alpha1.ListRepositoryTracksByRepositoryCommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buf.alpha.registry.v1alpha1.RepositoryTrackService.ListRepositoryTracksByRepositoryCommit is not implemented"))
}
