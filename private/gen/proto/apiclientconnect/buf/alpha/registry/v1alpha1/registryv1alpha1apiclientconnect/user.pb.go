// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientconnect. DO NOT EDIT.

package registryv1alpha1apiclientconnect

import (
	context "context"
	registryv1alpha1connect "github.com/bufbuild/buf/private/gen/proto/connect/buf/alpha/registry/v1alpha1/registryv1alpha1connect"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	connect_go "github.com/bufbuild/connect-go"
	zap "go.uber.org/zap"
)

type userServiceClient struct {
	logger *zap.Logger
	client registryv1alpha1connect.UserServiceClient
}

// CreateUser creates a new user with the given username.
func (s *userServiceClient) CreateUser(ctx context.Context, username string) (user *v1alpha1.User, _ error) {
	response, err := s.client.CreateUser(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.CreateUserRequest{
				Username: username,
			}),
	)
	if err != nil {
		return nil, err
	}
	return response.Msg.User, nil
}

// GetUser gets a user by ID.
func (s *userServiceClient) GetUser(ctx context.Context, id string) (user *v1alpha1.User, _ error) {
	response, err := s.client.GetUser(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.GetUserRequest{
				Id: id,
			}),
	)
	if err != nil {
		return nil, err
	}
	return response.Msg.User, nil
}

// GetUserByUsername gets a user by username.
func (s *userServiceClient) GetUserByUsername(ctx context.Context, username string) (user *v1alpha1.User, _ error) {
	response, err := s.client.GetUserByUsername(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.GetUserByUsernameRequest{
				Username: username,
			}),
	)
	if err != nil {
		return nil, err
	}
	return response.Msg.User, nil
}

// ListUsers lists all users.
func (s *userServiceClient) ListUsers(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
	userStateFilter v1alpha1.UserState,
) (users []*v1alpha1.User, nextPageToken string, _ error) {
	response, err := s.client.ListUsers(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.ListUsersRequest{
				PageSize:        pageSize,
				PageToken:       pageToken,
				Reverse:         reverse,
				UserStateFilter: userStateFilter,
			}),
	)
	if err != nil {
		return nil, "", err
	}
	return response.Msg.Users, response.Msg.NextPageToken, nil
}

// ListOrganizationUsers lists all users for an organization.
// TODO: #663 move this to organization service
func (s *userServiceClient) ListOrganizationUsers(
	ctx context.Context,
	organizationId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (users []*v1alpha1.OrganizationUser, nextPageToken string, _ error) {
	response, err := s.client.ListOrganizationUsers(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.ListOrganizationUsersRequest{
				OrganizationId: organizationId,
				PageSize:       pageSize,
				PageToken:      pageToken,
				Reverse:        reverse,
			}),
	)
	if err != nil {
		return nil, "", err
	}
	return response.Msg.Users, response.Msg.NextPageToken, nil
}

// DeleteUser deletes a user.
func (s *userServiceClient) DeleteUser(ctx context.Context) (_ error) {
	_, err := s.client.DeleteUser(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.DeleteUserRequest{}),
	)
	if err != nil {
		return err
	}
	return nil
}

// Deactivate user deactivates a user.
func (s *userServiceClient) DeactivateUser(ctx context.Context, id string) (_ error) {
	_, err := s.client.DeactivateUser(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.DeactivateUserRequest{
				Id: id,
			}),
	)
	if err != nil {
		return err
	}
	return nil
}

// UpdateUserServerRole update the role of an user in the server.
func (s *userServiceClient) UpdateUserServerRole(
	ctx context.Context,
	userId string,
	serverRole v1alpha1.ServerRole,
) (_ error) {
	_, err := s.client.UpdateUserServerRole(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.UpdateUserServerRoleRequest{
				UserId:     userId,
				ServerRole: serverRole,
			}),
	)
	if err != nil {
		return err
	}
	return nil
}

// CountUsers returns the number of users in the server by the user state provided.
func (s *userServiceClient) CountUsers(ctx context.Context, userStateFilter v1alpha1.UserState) (totalCount uint32, _ error) {
	response, err := s.client.CountUsers(
		ctx,
		connect_go.NewRequest(
			&v1alpha1.CountUsersRequest{
				UserStateFilter: userStateFilter,
			}),
	)
	if err != nil {
		return 0, err
	}
	return response.Msg.TotalCount, nil
}
