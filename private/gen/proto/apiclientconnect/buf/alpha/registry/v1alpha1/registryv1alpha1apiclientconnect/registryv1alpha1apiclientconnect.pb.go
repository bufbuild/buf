// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientconnect. DO NOT EDIT.

package registryv1alpha1apiclientconnect

import (
	context "context"
	registryv1alpha1api "github.com/bufbuild/buf/private/gen/proto/api/buf/alpha/registry/v1alpha1/registryv1alpha1api"
	registryv1alpha1apiclient "github.com/bufbuild/buf/private/gen/proto/apiclient/buf/alpha/registry/v1alpha1/registryv1alpha1apiclient"
	registryv1alpha1connectclient "github.com/bufbuild/buf/private/gen/proto/connectclient/buf/alpha/registry/v1alpha1/registryv1alpha1connectclient"
	http2client "github.com/bufbuild/buf/private/pkg/transport/http2client"
	connect_go "github.com/bufbuild/connect-go"
	zap "go.uber.org/zap"
)

// NewProvider returns a new Provider.
func NewProvider(
	logger *zap.Logger,
	httpClient connect_go.HTTPClient,
	options ...ProviderOption,
) registryv1alpha1apiclient.Provider {
	provider := &provider{
		logger:     logger,
		httpClient: httpClient,
	}
	for _, option := range options {
		option(provider)
	}
	return provider
}

type provider struct {
	logger                  *zap.Logger
	httpClient              connect_go.HTTPClient
	addressMapper           func(string) string
	contextModifierProvider func(string) (func(context.Context) context.Context, error)
}

// ProviderOption is an option for a new Provider.
type ProviderOption func(*provider)

// WithAddressMapper maps the address with the given function.
func WithAddressMapper(addressMapper func(string) string) ProviderOption {
	return func(provider *provider) {
		provider.addressMapper = addressMapper
	}
}

// WithContextModifierProvider provides a function that  modifies the context before every RPC invocation.
// Applied before the address mapper.
func WithContextModifierProvider(contextModifierProvider func(address string) (func(context.Context) context.Context, error)) ProviderOption {
	return func(provider *provider) {
		provider.contextModifierProvider = contextModifierProvider
	}
}

func (p *provider) NewAdminService(ctx context.Context, address string) (registryv1alpha1api.AdminService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewAdminServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewAuthnService(ctx context.Context, address string) (registryv1alpha1api.AuthnService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewAuthnServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewAuthzService(ctx context.Context, address string) (registryv1alpha1api.AuthzService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewAuthzServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewConvertService(ctx context.Context, address string) (registryv1alpha1api.ConvertService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewConvertServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewDisplayService(ctx context.Context, address string) (registryv1alpha1api.DisplayService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewDisplayServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewDocService(ctx context.Context, address string) (registryv1alpha1api.DocService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewDocServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewDownloadService(ctx context.Context, address string) (registryv1alpha1api.DownloadService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewDownloadServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewGenerateService(ctx context.Context, address string) (registryv1alpha1api.GenerateService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewGenerateServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewGithubService(ctx context.Context, address string) (registryv1alpha1api.GithubService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewGithubServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewImageService(ctx context.Context, address string) (registryv1alpha1api.ImageService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewImageServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewJSONSchemaService(ctx context.Context, address string) (registryv1alpha1api.JSONSchemaService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewJSONSchemaServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewLocalResolveService(ctx context.Context, address string) (registryv1alpha1api.LocalResolveService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewLocalResolveServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewOrganizationService(ctx context.Context, address string) (registryv1alpha1api.OrganizationService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewOrganizationServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewOwnerService(ctx context.Context, address string) (registryv1alpha1api.OwnerService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewOwnerServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewPluginService(ctx context.Context, address string) (registryv1alpha1api.PluginService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewPluginServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewPushService(ctx context.Context, address string) (registryv1alpha1api.PushService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewPushServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRecommendationService(ctx context.Context, address string) (registryv1alpha1api.RecommendationService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRecommendationServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewReferenceService(ctx context.Context, address string) (registryv1alpha1api.ReferenceService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewReferenceServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryBranchService(ctx context.Context, address string) (registryv1alpha1api.RepositoryBranchService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryBranchServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryCommitService(ctx context.Context, address string) (registryv1alpha1api.RepositoryCommitService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryCommitServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryService(ctx context.Context, address string) (registryv1alpha1api.RepositoryService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryTagService(ctx context.Context, address string) (registryv1alpha1api.RepositoryTagService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryTagServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryTrackCommitService(ctx context.Context, address string) (registryv1alpha1api.RepositoryTrackCommitService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryTrackCommitServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewRepositoryTrackService(ctx context.Context, address string) (registryv1alpha1api.RepositoryTrackService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewRepositoryTrackServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewResolveService(ctx context.Context, address string) (registryv1alpha1api.ResolveService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewResolveServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewSearchService(ctx context.Context, address string) (registryv1alpha1api.SearchService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewSearchServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewTokenService(ctx context.Context, address string) (registryv1alpha1api.TokenService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewTokenServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}

func (p *provider) NewUserService(ctx context.Context, address string) (registryv1alpha1api.UserService, error) {
	if p.addressMapper != nil {
		address = p.addressMapper(address)
	}
	http2client := http2client.NewClient()
	return registryv1alpha1connectclient.NewUserServiceClient(
		http2client,
		address,
		connect_go.WithGRPC(),
	), nil
}
