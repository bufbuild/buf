// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-api. DO NOT EDIT.

package registryv1alpha1api

import (
	context "context"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
)

// ModuleService is the Module service.
type ModuleService interface {
	// GetModule gets a module by ID.
	GetModule(
		ctx context.Context,
		id string,
	) (module *v1alpha1.Module, counts *v1alpha1.ModuleCounts, err error)
	// GetModuleByFullName gets a module by full name.
	GetModuleByFullName(
		ctx context.Context,
		fullName string,
	) (module *v1alpha1.Module, counts *v1alpha1.ModuleCounts, err error)
	// ListModules lists all modules.
	ListModules(
		ctx context.Context,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (modules []*v1alpha1.Module, nextPageToken string, err error)
	// ListUserModules lists all modules belonging to a user.
	ListUserModules(
		ctx context.Context,
		userId string,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (modules []*v1alpha1.Module, nextPageToken string, err error)
	// ListModulesUserCanAccess lists all modules a user can access.
	ListModulesUserCanAccess(
		ctx context.Context,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (modules []*v1alpha1.Module, nextPageToken string, err error)
	// ListOrganizationModules lists all modules for an organization.
	ListOrganizationModules(
		ctx context.Context,
		organizationId string,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (modules []*v1alpha1.Module, nextPageToken string, err error)
	// CreateModuleByFullName creates a new module by full name.
	CreateModuleByFullName(
		ctx context.Context,
		fullName string,
		visibility v1alpha1.Visibility,
	) (module *v1alpha1.Module, err error)
	// DeleteModule deletes a module.
	DeleteModule(ctx context.Context, id string) (err error)
	// DeleteModuleByFullName deletes a module by full name.
	DeleteModuleByFullName(ctx context.Context, fullName string) (err error)
	// DeprecateModuleByName deprecates the module.
	DeprecateModuleByName(
		ctx context.Context,
		ownerName string,
		moduleName string,
		deprecationMessage string,
	) (module *v1alpha1.Module, err error)
	// UndeprecateModuleByName makes the module not deprecated and removes any deprecation_message.
	UndeprecateModuleByName(
		ctx context.Context,
		ownerName string,
		moduleName string,
	) (module *v1alpha1.Module, err error)
	// GetModulesByFullName gets modules by full name. Response order is unspecified.
	// Errors if any of the modules don't exist or the caller does not have access to any of the modules.
	GetModulesByFullName(ctx context.Context, fullNames []string) (modules []*v1alpha1.Module, err error)
	// SetModuleContributor sets the role of a user in the module.
	SetModuleContributor(
		ctx context.Context,
		moduleId string,
		userId string,
		moduleRole v1alpha1.ModuleRole,
	) (err error)
	// ListModuleContributors returns the list of contributors that has an explicit role against the module.
	// This does not include users who have implicit roles against the module, unless they have also been
	// assigned a role explicitly.
	ListModuleContributors(
		ctx context.Context,
		moduleId string,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (users []*v1alpha1.ModuleContributor, nextPageToken string, err error)
	// GetModuleContributor returns the contributor information of a user in a module.
	GetModuleContributor(
		ctx context.Context,
		moduleId string,
		userId string,
	) (user *v1alpha1.ModuleContributor, err error)
	// GetModuleSettings gets the settings of a module.
	GetModuleSettings(ctx context.Context, moduleId string) (contributorsCount uint32, err error)
	// UpdateModuleSettingsByName updates the settings of a module.
	UpdateModuleSettingsByName(
		ctx context.Context,
		ownerName string,
		moduleName string,
		visibility v1alpha1.Visibility,
	) (err error)
}
