// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-api. DO NOT EDIT.

package registryv1alpha1api

import (
	context "context"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
)

// TeamService is the Team service.
// All methods on the Team service require authentication.
type TeamService interface {
	// GetTeam gets a team by ID.
	GetTeam(ctx context.Context, id string) (team *v1alpha1.Team, err error)
	// GetTeamByName gets a team by the combination of its name and organization.
	GetTeamByName(
		ctx context.Context,
		name string,
		organizationName string,
	) (team *v1alpha1.Team, err error)
	// ListOrganizationTeams lists all teams belonging to an organization.
	ListOrganizationTeams(
		ctx context.Context,
		organizationId string,
		pageSize uint32,
		pageToken string,
		reverse bool,
	) (teams []*v1alpha1.Team, nextPageToken string, err error)
	// CreateTeam creates a new team within an organization.
	CreateTeam(
		ctx context.Context,
		name string,
		organizationId string,
	) (team *v1alpha1.Team, err error)
	// CreateTeamByName creates a new team within an organization, looking up the organization by name.
	CreateTeamByName(
		ctx context.Context,
		name string,
		organizationName string,
	) (team *v1alpha1.Team, err error)
	// UpdateTeamName updates a team's name.
	UpdateTeamName(
		ctx context.Context,
		id string,
		newName string,
	) (team *v1alpha1.Team, err error)
	// AddUserToTeam adds a user to a team by their respective IDs.
	AddUserToTeam(
		ctx context.Context,
		id string,
		userId string,
	) (err error)
	// AddUserToTeamByName adds a user to a team, looking up the entities by user, team, and organization names.
	AddUserToTeamByName(
		ctx context.Context,
		name string,
		userName string,
		organizationName string,
	) (err error)
	// RemoveUserFromTeam removes a user from a team by their respective IDs.
	RemoveUserFromTeam(
		ctx context.Context,
		id string,
		userId string,
	) (err error)
	// RemoveUserFromTeamByName removes a user from a team, looking up the entities by user, team, and organization names.
	RemoveUserFromTeamByName(
		ctx context.Context,
		name string,
		userName string,
		organizationName string,
	) (err error)
	// DeleteTeam deletes a team by ID.
	DeleteTeam(ctx context.Context, id string) (err error)
	// DeleteTeamByName deletes a team by the combination of its name and organization.
	DeleteTeamByName(
		ctx context.Context,
		name string,
		organizationName string,
	) (err error)
	// AddTeamOrganizationScope adds an organization scope to a team by ID.
	AddTeamOrganizationScope(
		ctx context.Context,
		id string,
		organizationScope v1alpha1.OrganizationScope,
	) (err error)
	// AddTeamOrganizationScopeByName adds an organization scope to a team by name.
	AddTeamOrganizationScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		organizationScope v1alpha1.OrganizationScope,
	) (err error)
	// RemoveTeamOrganizationScope removes an organization scope from a team by ID.
	RemoveTeamOrganizationScope(
		ctx context.Context,
		id string,
		organizationScope v1alpha1.OrganizationScope,
	) (err error)
	// RemoveTeamOrganizationScopeByName removes an organization scope from a team by name.
	RemoveTeamOrganizationScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		organizationScope v1alpha1.OrganizationScope,
	) (err error)
	// AddTeamBaseRepositoryScope adds a base repository scope to a team by ID.
	AddTeamBaseRepositoryScope(
		ctx context.Context,
		id string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// AddTeamBaseRepositoryScopeByName adds a base repository scope to a team by name.
	AddTeamBaseRepositoryScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// RemoveTeamBaseRepositoryScope removes a base repository scope from a team by ID.
	RemoveTeamBaseRepositoryScope(
		ctx context.Context,
		id string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// RemoveTeamBaseRepositoryScopeByName removes a base repository scope from a team by name.
	RemoveTeamBaseRepositoryScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// AddTeamRepositoryScope adds a repository scope for a specific repository to a team by ID.
	AddTeamRepositoryScope(
		ctx context.Context,
		id string,
		repositoryId string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// AddTeamRepositoryScopeByName adds a repository scope for a specific repository to a team by name.
	AddTeamRepositoryScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		repositoryName string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// RemoveTeamRepositoryScope removes a repository scope for a specific repository from a team by ID.
	RemoveTeamRepositoryScope(
		ctx context.Context,
		id string,
		repositoryId string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
	// RemoveTeamRepositoryScopeByName removes a repository scope for a specific repository from a team by name.
	RemoveTeamRepositoryScopeByName(
		ctx context.Context,
		name string,
		organizationName string,
		repositoryName string,
		repositoryScope v1alpha1.RepositoryScope,
	) (err error)
}
