// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha2apiclientgrpc

import (
	context "context"
	v1alpha2 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha2"
	zap "go.uber.org/zap"
)

type moduleService struct {
	logger          *zap.Logger
	client          v1alpha2.ModuleServiceClient
	contextModifier func(context.Context) context.Context
}

// GetModule gets a module by ID.
func (s *moduleService) GetModule(
	ctx context.Context,
	id string,
) (module *v1alpha2.Module, counts *v1alpha2.ModuleCounts, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetModule(
		ctx,
		&v1alpha2.GetModuleRequest{
			Id: id,
		},
	)
	if err != nil {
		return nil, nil, err
	}
	return response.Module, response.Counts, nil
}

// GetModuleByFullName gets a module by full name.
func (s *moduleService) GetModuleByFullName(
	ctx context.Context,
	fullName string,
) (module *v1alpha2.Module, counts *v1alpha2.ModuleCounts, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetModuleByFullName(
		ctx,
		&v1alpha2.GetModuleByFullNameRequest{
			FullName: fullName,
		},
	)
	if err != nil {
		return nil, nil, err
	}
	return response.Module, response.Counts, nil
}

// ListModules lists all modules.
func (s *moduleService) ListModules(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (modules []*v1alpha2.Module, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListModules(
		ctx,
		&v1alpha2.ListModulesRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Modules, response.NextPageToken, nil
}

// ListUserModules lists all modules belonging to a user.
func (s *moduleService) ListUserModules(
	ctx context.Context,
	userId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (modules []*v1alpha2.Module, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListUserModules(
		ctx,
		&v1alpha2.ListUserModulesRequest{
			UserId:    userId,
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Modules, response.NextPageToken, nil
}

// ListModulesUserCanAccess lists all modules a user can access.
func (s *moduleService) ListModulesUserCanAccess(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (modules []*v1alpha2.Module, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListModulesUserCanAccess(
		ctx,
		&v1alpha2.ListModulesUserCanAccessRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Modules, response.NextPageToken, nil
}

// ListOrganizationModules lists all modules for an organization.
func (s *moduleService) ListOrganizationModules(
	ctx context.Context,
	organizationId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (modules []*v1alpha2.Module, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListOrganizationModules(
		ctx,
		&v1alpha2.ListOrganizationModulesRequest{
			OrganizationId: organizationId,
			PageSize:       pageSize,
			PageToken:      pageToken,
			Reverse:        reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Modules, response.NextPageToken, nil
}

// CreateModuleByFullName creates a new module by full name.
func (s *moduleService) CreateModuleByFullName(
	ctx context.Context,
	fullName string,
	visibility v1alpha2.Visibility,
) (module *v1alpha2.Module, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.CreateModuleByFullName(
		ctx,
		&v1alpha2.CreateModuleByFullNameRequest{
			FullName:   fullName,
			Visibility: visibility,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Module, nil
}

// DeleteModule deletes a module.
func (s *moduleService) DeleteModule(ctx context.Context, id string) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.DeleteModule(
		ctx,
		&v1alpha2.DeleteModuleRequest{
			Id: id,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// DeleteModuleByFullName deletes a module by full name.
func (s *moduleService) DeleteModuleByFullName(ctx context.Context, fullName string) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.DeleteModuleByFullName(
		ctx,
		&v1alpha2.DeleteModuleByFullNameRequest{
			FullName: fullName,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// DeprecateModuleByName deprecates the module.
func (s *moduleService) DeprecateModuleByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
	deprecationMessage string,
) (module *v1alpha2.Module, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.DeprecateModuleByName(
		ctx,
		&v1alpha2.DeprecateModuleByNameRequest{
			OwnerName:          ownerName,
			ModuleName:         moduleName,
			DeprecationMessage: deprecationMessage,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Module, nil
}

// UndeprecateModuleByName makes the module not deprecated and removes any deprecation_message.
func (s *moduleService) UndeprecateModuleByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
) (module *v1alpha2.Module, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.UndeprecateModuleByName(
		ctx,
		&v1alpha2.UndeprecateModuleByNameRequest{
			OwnerName:  ownerName,
			ModuleName: moduleName,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Module, nil
}

// GetModulesByFullName gets modules by full name. Response order is unspecified.
// Errors if any of the modules don't exist or the caller does not have access to any of the modules.
func (s *moduleService) GetModulesByFullName(ctx context.Context, fullNames []string) (modules []*v1alpha2.Module, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetModulesByFullName(
		ctx,
		&v1alpha2.GetModulesByFullNameRequest{
			FullNames: fullNames,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Modules, nil
}

// SetModuleContributor sets the role of a user in the module.
func (s *moduleService) SetModuleContributor(
	ctx context.Context,
	moduleId string,
	userId string,
	moduleRole v1alpha2.ModuleRole,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.SetModuleContributor(
		ctx,
		&v1alpha2.SetModuleContributorRequest{
			ModuleId:   moduleId,
			UserId:     userId,
			ModuleRole: moduleRole,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// ListModuleContributors returns the list of contributors that has an explicit role against the module.
// This does not include users who have implicit roles against the module, unless they have also been
// assigned a role explicitly.
func (s *moduleService) ListModuleContributors(
	ctx context.Context,
	moduleId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (users []*v1alpha2.ModuleContributor, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListModuleContributors(
		ctx,
		&v1alpha2.ListModuleContributorsRequest{
			ModuleId:  moduleId,
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Users, response.NextPageToken, nil
}

// GetModuleContributor returns the contributor information of a user in a module.
func (s *moduleService) GetModuleContributor(
	ctx context.Context,
	moduleId string,
	userId string,
) (user *v1alpha2.ModuleContributor, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetModuleContributor(
		ctx,
		&v1alpha2.GetModuleContributorRequest{
			ModuleId: moduleId,
			UserId:   userId,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.User, nil
}

// GetModuleSettings gets the settings of a module.
func (s *moduleService) GetModuleSettings(ctx context.Context, moduleId string) (contributorsCount uint32, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetModuleSettings(
		ctx,
		&v1alpha2.GetModuleSettingsRequest{
			ModuleId: moduleId,
		},
	)
	if err != nil {
		return 0, err
	}
	return response.ContributorsCount, nil
}

// UpdateModuleSettingsByName updates the settings of a module.
func (s *moduleService) UpdateModuleSettingsByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
	visibility v1alpha2.Visibility,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateModuleSettingsByName(
		ctx,
		&v1alpha2.UpdateModuleSettingsByNameRequest{
			OwnerName:  ownerName,
			ModuleName: moduleName,
			Visibility: visibility,
		},
	)
	if err != nil {
		return err
	}
	return nil
}
