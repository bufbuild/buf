// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha2apiclientgrpc

import (
	context "context"
	v1alpha2 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha2"
	zap "go.uber.org/zap"
)

type remoteModuleService struct {
	logger          *zap.Logger
	client          v1alpha2.RemoteModuleServiceClient
	contextModifier func(context.Context) context.Context
}

// GetRemoteModule gets a remote_module by ID.
func (s *remoteModuleService) GetRemoteModule(
	ctx context.Context,
	id string,
) (remoteModule *v1alpha2.RemoteModule, counts *v1alpha2.RemoteModuleCounts, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetRemoteModule(
		ctx,
		&v1alpha2.GetRemoteModuleRequest{
			Id: id,
		},
	)
	if err != nil {
		return nil, nil, err
	}
	return response.RemoteModule, response.Counts, nil
}

// GetRemoteModuleByFullName gets a remote_module by full name.
func (s *remoteModuleService) GetRemoteModuleByFullName(
	ctx context.Context,
	fullName string,
) (remoteModule *v1alpha2.RemoteModule, counts *v1alpha2.RemoteModuleCounts, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetRemoteModuleByFullName(
		ctx,
		&v1alpha2.GetRemoteModuleByFullNameRequest{
			FullName: fullName,
		},
	)
	if err != nil {
		return nil, nil, err
	}
	return response.RemoteModule, response.Counts, nil
}

// ListRemoteModules lists all remote_modules.
func (s *remoteModuleService) ListRemoteModules(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (remoteModules []*v1alpha2.RemoteModule, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRemoteModules(
		ctx,
		&v1alpha2.ListRemoteModulesRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.RemoteModules, response.NextPageToken, nil
}

// ListUserRemoteModules lists all remote_modules belonging to a user.
func (s *remoteModuleService) ListUserRemoteModules(
	ctx context.Context,
	userId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (remoteModules []*v1alpha2.RemoteModule, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListUserRemoteModules(
		ctx,
		&v1alpha2.ListUserRemoteModulesRequest{
			UserId:    userId,
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.RemoteModules, response.NextPageToken, nil
}

// ListRemoteModulesUserCanAccess lists all remote_modules a user can access.
func (s *remoteModuleService) ListRemoteModulesUserCanAccess(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (remoteModules []*v1alpha2.RemoteModule, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRemoteModulesUserCanAccess(
		ctx,
		&v1alpha2.ListRemoteModulesUserCanAccessRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.RemoteModules, response.NextPageToken, nil
}

// ListOrganizationRemoteModules lists all remote_modules for an organization.
func (s *remoteModuleService) ListOrganizationRemoteModules(
	ctx context.Context,
	organizationId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (remoteModules []*v1alpha2.RemoteModule, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListOrganizationRemoteModules(
		ctx,
		&v1alpha2.ListOrganizationRemoteModulesRequest{
			OrganizationId: organizationId,
			PageSize:       pageSize,
			PageToken:      pageToken,
			Reverse:        reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.RemoteModules, response.NextPageToken, nil
}

// CreateRemoteModuleByFullName creates a new remote_module by full name.
func (s *remoteModuleService) CreateRemoteModuleByFullName(
	ctx context.Context,
	fullName string,
	visibility v1alpha2.Visibility,
) (remoteModule *v1alpha2.RemoteModule, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.CreateRemoteModuleByFullName(
		ctx,
		&v1alpha2.CreateRemoteModuleByFullNameRequest{
			FullName:   fullName,
			Visibility: visibility,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.RemoteModule, nil
}

// DeleteRemoteModule deletes a remote_module.
func (s *remoteModuleService) DeleteRemoteModule(ctx context.Context, id string) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.DeleteRemoteModule(
		ctx,
		&v1alpha2.DeleteRemoteModuleRequest{
			Id: id,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRemoteModuleByFullName deletes a remote_module by full name.
func (s *remoteModuleService) DeleteRemoteModuleByFullName(ctx context.Context, fullName string) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.DeleteRemoteModuleByFullName(
		ctx,
		&v1alpha2.DeleteRemoteModuleByFullNameRequest{
			FullName: fullName,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// DeprecateRemoteModuleByName deprecates the remote_module.
func (s *remoteModuleService) DeprecateRemoteModuleByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
	deprecationMessage string,
) (remoteModule *v1alpha2.RemoteModule, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.DeprecateRemoteModuleByName(
		ctx,
		&v1alpha2.DeprecateRemoteModuleByNameRequest{
			OwnerName:          ownerName,
			ModuleName:         moduleName,
			DeprecationMessage: deprecationMessage,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.RemoteModule, nil
}

// UndeprecateRemoteModuleByName makes the remote_module not deprecated and removes any deprecation_message.
func (s *remoteModuleService) UndeprecateRemoteModuleByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
) (remoteModule *v1alpha2.RemoteModule, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.UndeprecateRemoteModuleByName(
		ctx,
		&v1alpha2.UndeprecateRemoteModuleByNameRequest{
			OwnerName:  ownerName,
			ModuleName: moduleName,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.RemoteModule, nil
}

// GetRemoteModulesByFullName gets remote_modules by full name. Response order is unspecified.
// Errors if any of the remote_modules don't exist or the caller does not have access to any of the remote_modules.
func (s *remoteModuleService) GetRemoteModulesByFullName(ctx context.Context, fullNames []string) (remoteModules []*v1alpha2.RemoteModule, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetRemoteModulesByFullName(
		ctx,
		&v1alpha2.GetRemoteModulesByFullNameRequest{
			FullNames: fullNames,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.RemoteModules, nil
}

// SetRemoteModuleContributor sets the role of a user in the remote_module.
func (s *remoteModuleService) SetRemoteModuleContributor(
	ctx context.Context,
	moduleId string,
	userId string,
	remoteModuleRole v1alpha2.RemoteModuleRole,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.SetRemoteModuleContributor(
		ctx,
		&v1alpha2.SetRemoteModuleContributorRequest{
			ModuleId:         moduleId,
			UserId:           userId,
			RemoteModuleRole: remoteModuleRole,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// ListRemoteModuleContributors returns the list of contributors that has an explicit role against the remote_module.
// This does not include users who have implicit roles against the remote_module, unless they have also been
// assigned a role explicitly.
func (s *remoteModuleService) ListRemoteModuleContributors(
	ctx context.Context,
	moduleId string,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (users []*v1alpha2.RemoteModuleContributor, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRemoteModuleContributors(
		ctx,
		&v1alpha2.ListRemoteModuleContributorsRequest{
			ModuleId:  moduleId,
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Users, response.NextPageToken, nil
}

// GetRemoteModuleContributor returns the contributor information of a user in a remote_module.
func (s *remoteModuleService) GetRemoteModuleContributor(
	ctx context.Context,
	moduleId string,
	userId string,
) (user *v1alpha2.RemoteModuleContributor, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetRemoteModuleContributor(
		ctx,
		&v1alpha2.GetRemoteModuleContributorRequest{
			ModuleId: moduleId,
			UserId:   userId,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.User, nil
}

// GetRemoteModuleSettings gets the settings of a remote_module.
func (s *remoteModuleService) GetRemoteModuleSettings(ctx context.Context, moduleId string) (contributorsCount uint32, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetRemoteModuleSettings(
		ctx,
		&v1alpha2.GetRemoteModuleSettingsRequest{
			ModuleId: moduleId,
		},
	)
	if err != nil {
		return 0, err
	}
	return response.ContributorsCount, nil
}

// UpdateRemoteModuleSettingsByName updates the settings of a remote_module.
func (s *remoteModuleService) UpdateRemoteModuleSettingsByName(
	ctx context.Context,
	ownerName string,
	moduleName string,
	visibility v1alpha2.Visibility,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateRemoteModuleSettingsByName(
		ctx,
		&v1alpha2.UpdateRemoteModuleSettingsByNameRequest{
			OwnerName:  ownerName,
			ModuleName: moduleName,
			Visibility: visibility,
		},
	)
	if err != nil {
		return err
	}
	return nil
}
