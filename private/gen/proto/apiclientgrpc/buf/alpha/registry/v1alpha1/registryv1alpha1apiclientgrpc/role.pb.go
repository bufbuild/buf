// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha1apiclientgrpc

import (
	context "context"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	zap "go.uber.org/zap"
)

type roleService struct {
	logger          *zap.Logger
	client          v1alpha1.RoleServiceClient
	contextModifier func(context.Context) context.Context
}

// UpdateUserServerRole update the role of an user in the server.
func (s *roleService) UpdateUserServerRole(
	ctx context.Context,
	userId string,
	serverRole v1alpha1.ServerRole,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateUserServerRole(
		ctx,
		&v1alpha1.UpdateUserServerRoleRequest{
			UserId:     userId,
			ServerRole: serverRole,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// AddUserOrganizationRole add a role to an user in the organization.
func (s *roleService) AddUserOrganizationRole(
	ctx context.Context,
	userId string,
	organizationId string,
	organizationRole v1alpha1.GroupRole,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.AddUserOrganizationRole(
		ctx,
		&v1alpha1.AddUserOrganizationRoleRequest{
			UserId:           userId,
			OrganizationId:   organizationId,
			OrganizationRole: organizationRole,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// UpdateUserOrganizationRole update the role of an user in the organization.
func (s *roleService) UpdateUserOrganizationRole(
	ctx context.Context,
	userId string,
	organizationId string,
	organizationRole v1alpha1.GroupRole,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateUserOrganizationRole(
		ctx,
		&v1alpha1.UpdateUserOrganizationRoleRequest{
			UserId:           userId,
			OrganizationId:   organizationId,
			OrganizationRole: organizationRole,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// RemoveUserOrganizationRole remove the role of an user in the organization.
func (s *roleService) RemoveUserOrganizationRole(
	ctx context.Context,
	userId string,
	organizationId string,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.RemoveUserOrganizationRole(
		ctx,
		&v1alpha1.RemoveUserOrganizationRoleRequest{
			UserId:         userId,
			OrganizationId: organizationId,
		},
	)
	if err != nil {
		return err
	}
	return nil
}
