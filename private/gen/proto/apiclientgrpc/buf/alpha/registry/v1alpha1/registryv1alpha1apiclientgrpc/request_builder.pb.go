// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha1apiclientgrpc

import (
	context "context"
	v1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/image/v1"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	zap "go.uber.org/zap"
)

type requestBuilderService struct {
	logger          *zap.Logger
	client          v1alpha1.RequestBuilderServiceClient
	contextModifier func(context.Context) context.Context
}

// GetServices returns an overview of all services declared in a module
// and their methods.
func (s *requestBuilderService) GetServices(
	ctx context.Context,
	owner string,
	repository string,
	reference string,
) (services []*v1alpha1.ModuleService, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetServices(
		ctx,
		&v1alpha1.GetServicesRequest{
			Owner:      owner,
			Repository: repository,
			Reference:  reference,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Services, nil
}

// GetMethodDetails returns data needed to make dynamic requests for a method.
func (s *requestBuilderService) GetMethodDetails(
	ctx context.Context,
	owner string,
	repository string,
	reference string,
	method string,
) (partialImage *v1.Image, requestJsonSchema []byte, resolvedCommit string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.GetMethodDetails(
		ctx,
		&v1alpha1.GetMethodDetailsRequest{
			Owner:      owner,
			Repository: repository,
			Reference:  reference,
			Method:     method,
		},
	)
	if err != nil {
		return nil, nil, "", err
	}
	return response.PartialImage, response.RequestJsonSchema, response.ResolvedCommit, nil
}
