// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-apiclientgrpc. DO NOT EDIT.

package registryv1alpha1apiclientgrpc

import (
	context "context"
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/registry/v1alpha1"
	zap "go.uber.org/zap"
)

type recommendationService struct {
	logger          *zap.Logger
	client          v1alpha1.RecommendationServiceClient
	contextModifier func(context.Context) context.Context
}

// RecommendedRepositories returns a list of recommended repositories.
func (s *recommendationService) RecommendedRepositories(ctx context.Context) (repositories []*v1alpha1.RecommendedRepository, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.RecommendedRepositories(
		ctx,
		&v1alpha1.RecommendedRepositoriesRequest{},
	)
	if err != nil {
		return nil, err
	}
	return response.Repositories, nil
}

// RecommendedTemplates returns a list of recommended templates.
func (s *recommendationService) RecommendedTemplates(ctx context.Context) (templates []*v1alpha1.RecommendedTemplate, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.RecommendedTemplates(
		ctx,
		&v1alpha1.RecommendedTemplatesRequest{},
	)
	if err != nil {
		return nil, err
	}
	return response.Templates, nil
}

// ListRecommendedRepositories returns a list of recommended repositories that user have access to.
func (s *recommendationService) ListRecommendedRepositories(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (repositories []*v1alpha1.RecommendedRepository, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRecommendedRepositories(
		ctx,
		&v1alpha1.ListRecommendedRepositoriesRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Repositories, response.NextPageToken, nil
}

// ListRecommendedTemplates returns a list of recommended templates that user have access to.
func (s *recommendationService) ListRecommendedTemplates(
	ctx context.Context,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (templates []*v1alpha1.RecommendedTemplate, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRecommendedTemplates(
		ctx,
		&v1alpha1.ListRecommendedTemplatesRequest{
			PageSize:  pageSize,
			PageToken: pageToken,
			Reverse:   reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Templates, response.NextPageToken, nil
}

// ListRecommendations returns a list of recommendations of a resource type.
func (s *recommendationService) ListRecommendations(
	ctx context.Context,
	resourceType v1alpha1.ResourceType,
	pageSize uint32,
	pageToken string,
	reverse bool,
) (recommendations []*v1alpha1.Recommendation, nextPageToken string, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.ListRecommendations(
		ctx,
		&v1alpha1.ListRecommendationsRequest{
			ResourceType: resourceType,
			PageSize:     pageSize,
			PageToken:    pageToken,
			Reverse:      reverse,
		},
	)
	if err != nil {
		return nil, "", err
	}
	return response.Recommendations, response.NextPageToken, nil
}

// AddRecommendation add a recommendation to the server.
func (s *recommendationService) AddRecommendation(
	ctx context.Context,
	resource *v1alpha1.Resource,
	description string,
) (recommendation *v1alpha1.Recommendation, _ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	response, err := s.client.AddRecommendation(
		ctx,
		&v1alpha1.AddRecommendationRequest{
			Resource:    resource,
			Description: description,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Recommendation, nil
}

// UpdateRecommendation update a recommendation in the server.
func (s *recommendationService) UpdateRecommendation(
	ctx context.Context,
	resourceType v1alpha1.ResourceType,
	id string,
	description string,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateRecommendation(
		ctx,
		&v1alpha1.UpdateRecommendationRequest{
			ResourceType: resourceType,
			Id:           id,
			Description:  description,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// UpdateRecommendationsRanks update the ranking of the recommendations of a resource type in the server.
func (s *recommendationService) UpdateRecommendationsRanks(
	ctx context.Context,
	resourceType v1alpha1.ResourceType,
	recommendationIds []string,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.UpdateRecommendationsRanks(
		ctx,
		&v1alpha1.UpdateRecommendationsRanksRequest{
			ResourceType:      resourceType,
			RecommendationIds: recommendationIds,
		},
	)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRecommendation delete a recommendation in the server.
func (s *recommendationService) DeleteRecommendation(
	ctx context.Context,
	resourceType v1alpha1.ResourceType,
	id string,
) (_ error) {
	if s.contextModifier != nil {
		ctx = s.contextModifier(ctx)
	}
	_, err := s.client.DeleteRecommendation(
		ctx,
		&v1alpha1.DeleteRecommendationRequest{
			ResourceType: resourceType,
			Id:           id,
		},
	)
	if err != nil {
		return err
	}
	return nil
}
