// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: buf/alpha/registry/v1alpha1/role.proto

package registryv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// UpdateUserServerRole update the role of an user in the server.
	UpdateUserServerRole(ctx context.Context, in *UpdateUserServerRoleRequest, opts ...grpc.CallOption) (*UpdateUserServerRoleResponse, error)
	// AddUserOrganizationRole add a role to an user in the organization.
	AddUserOrganizationRole(ctx context.Context, in *AddUserOrganizationRoleRequest, opts ...grpc.CallOption) (*AddUserOrganizationRoleResponse, error)
	// UpdateUserOrganizationRole update the role of an user in the organization.
	UpdateUserOrganizationRole(ctx context.Context, in *UpdateUserOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateUserOrganizationRoleResponse, error)
	// RemoveUserOrganizationRole remove the role of an user in the organization.
	RemoveUserOrganizationRole(ctx context.Context, in *RemoveUserOrganizationRoleRequest, opts ...grpc.CallOption) (*RemoveUserOrganizationRoleResponse, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) UpdateUserServerRole(ctx context.Context, in *UpdateUserServerRoleRequest, opts ...grpc.CallOption) (*UpdateUserServerRoleResponse, error) {
	out := new(UpdateUserServerRoleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.RoleService/UpdateUserServerRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AddUserOrganizationRole(ctx context.Context, in *AddUserOrganizationRoleRequest, opts ...grpc.CallOption) (*AddUserOrganizationRoleResponse, error) {
	out := new(AddUserOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.RoleService/AddUserOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateUserOrganizationRole(ctx context.Context, in *UpdateUserOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateUserOrganizationRoleResponse, error) {
	out := new(UpdateUserOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.RoleService/UpdateUserOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) RemoveUserOrganizationRole(ctx context.Context, in *RemoveUserOrganizationRoleRequest, opts ...grpc.CallOption) (*RemoveUserOrganizationRoleResponse, error) {
	out := new(RemoveUserOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.RoleService/RemoveUserOrganizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations should embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// UpdateUserServerRole update the role of an user in the server.
	UpdateUserServerRole(context.Context, *UpdateUserServerRoleRequest) (*UpdateUserServerRoleResponse, error)
	// AddUserOrganizationRole add a role to an user in the organization.
	AddUserOrganizationRole(context.Context, *AddUserOrganizationRoleRequest) (*AddUserOrganizationRoleResponse, error)
	// UpdateUserOrganizationRole update the role of an user in the organization.
	UpdateUserOrganizationRole(context.Context, *UpdateUserOrganizationRoleRequest) (*UpdateUserOrganizationRoleResponse, error)
	// RemoveUserOrganizationRole remove the role of an user in the organization.
	RemoveUserOrganizationRole(context.Context, *RemoveUserOrganizationRoleRequest) (*RemoveUserOrganizationRoleResponse, error)
}

// UnimplementedRoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) UpdateUserServerRole(context.Context, *UpdateUserServerRoleRequest) (*UpdateUserServerRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserServerRole not implemented")
}
func (UnimplementedRoleServiceServer) AddUserOrganizationRole(context.Context, *AddUserOrganizationRoleRequest) (*AddUserOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserOrganizationRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateUserOrganizationRole(context.Context, *UpdateUserOrganizationRoleRequest) (*UpdateUserOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserOrganizationRole not implemented")
}
func (UnimplementedRoleServiceServer) RemoveUserOrganizationRole(context.Context, *RemoveUserOrganizationRoleRequest) (*RemoveUserOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserOrganizationRole not implemented")
}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_UpdateUserServerRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserServerRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateUserServerRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.RoleService/UpdateUserServerRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateUserServerRole(ctx, req.(*UpdateUserServerRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AddUserOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddUserOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.RoleService/AddUserOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddUserOrganizationRole(ctx, req.(*AddUserOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateUserOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateUserOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.RoleService/UpdateUserOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateUserOrganizationRole(ctx, req.(*UpdateUserOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_RemoveUserOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).RemoveUserOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.RoleService/RemoveUserOrganizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).RemoveUserOrganizationRole(ctx, req.(*RemoveUserOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buf.alpha.registry.v1alpha1.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserServerRole",
			Handler:    _RoleService_UpdateUserServerRole_Handler,
		},
		{
			MethodName: "AddUserOrganizationRole",
			Handler:    _RoleService_AddUserOrganizationRole_Handler,
		},
		{
			MethodName: "UpdateUserOrganizationRole",
			Handler:    _RoleService_UpdateUserOrganizationRole_Handler,
		},
		{
			MethodName: "RemoveUserOrganizationRole",
			Handler:    _RoleService_RemoveUserOrganizationRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buf/alpha/registry/v1alpha1/role.proto",
}
