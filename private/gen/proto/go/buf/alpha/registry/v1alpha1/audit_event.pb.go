// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: buf/alpha/registry/v1alpha1/audit_event.proto

package registryv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuditActorType is the type of actor that caused the audited event.
type AuditActorType int32

const (
	AuditActorType_AUDIT_ACTOR_TYPE_UNSPECIFIED AuditActorType = 0
	AuditActorType_AUDIT_ACTOR_TYPE_USER        AuditActorType = 1
)

// Enum value maps for AuditActorType.
var (
	AuditActorType_name = map[int32]string{
		0: "AUDIT_ACTOR_TYPE_UNSPECIFIED",
		1: "AUDIT_ACTOR_TYPE_USER",
	}
	AuditActorType_value = map[string]int32{
		"AUDIT_ACTOR_TYPE_UNSPECIFIED": 0,
		"AUDIT_ACTOR_TYPE_USER":        1,
	}
)

func (x AuditActorType) Enum() *AuditActorType {
	p := new(AuditActorType)
	*p = x
	return p
}

func (x AuditActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[0].Descriptor()
}

func (AuditActorType) Type() protoreflect.EnumType {
	return &file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[0]
}

func (x AuditActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditActorType.Descriptor instead.
func (AuditActorType) EnumDescriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{0}
}

// AuditResourceType is the type of the resource that was affected by the
// audited event.
type AuditResourceType int32

const (
	AuditResourceType_AUDIT_RESOURCE_TYPE_UNSPECIFIED         AuditResourceType = 0
	AuditResourceType_AUDIT_RESOURCE_TYPE_USER                AuditResourceType = 1
	AuditResourceType_AUDIT_RESOURCE_TYPE_ORGANIZATION        AuditResourceType = 2
	AuditResourceType_AUDIT_RESOURCE_TYPE_ORGANIZATION_MEMBER AuditResourceType = 3
	AuditResourceType_AUDIT_RESOURCE_TYPE_REPOSITORY          AuditResourceType = 4
	AuditResourceType_AUDIT_RESOURCE_TYPE_REPOSITORY_MEMBER   AuditResourceType = 5
	AuditResourceType_AUDIT_RESOURCE_TYPE_REPOSITORY_COMMIT   AuditResourceType = 6
	AuditResourceType_AUDIT_RESOURCE_TYPE_PLUGIN              AuditResourceType = 7
)

// Enum value maps for AuditResourceType.
var (
	AuditResourceType_name = map[int32]string{
		0: "AUDIT_RESOURCE_TYPE_UNSPECIFIED",
		1: "AUDIT_RESOURCE_TYPE_USER",
		2: "AUDIT_RESOURCE_TYPE_ORGANIZATION",
		3: "AUDIT_RESOURCE_TYPE_ORGANIZATION_MEMBER",
		4: "AUDIT_RESOURCE_TYPE_REPOSITORY",
		5: "AUDIT_RESOURCE_TYPE_REPOSITORY_MEMBER",
		6: "AUDIT_RESOURCE_TYPE_REPOSITORY_COMMIT",
		7: "AUDIT_RESOURCE_TYPE_PLUGIN",
	}
	AuditResourceType_value = map[string]int32{
		"AUDIT_RESOURCE_TYPE_UNSPECIFIED":         0,
		"AUDIT_RESOURCE_TYPE_USER":                1,
		"AUDIT_RESOURCE_TYPE_ORGANIZATION":        2,
		"AUDIT_RESOURCE_TYPE_ORGANIZATION_MEMBER": 3,
		"AUDIT_RESOURCE_TYPE_REPOSITORY":          4,
		"AUDIT_RESOURCE_TYPE_REPOSITORY_MEMBER":   5,
		"AUDIT_RESOURCE_TYPE_REPOSITORY_COMMIT":   6,
		"AUDIT_RESOURCE_TYPE_PLUGIN":              7,
	}
)

func (x AuditResourceType) Enum() *AuditResourceType {
	p := new(AuditResourceType)
	*p = x
	return p
}

func (x AuditResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[1].Descriptor()
}

func (AuditResourceType) Type() protoreflect.EnumType {
	return &file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[1]
}

func (x AuditResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditResourceType.Descriptor instead.
func (AuditResourceType) EnumDescriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{1}
}

// AuditEventType is the type of audited event.
type AuditEventType int32

const (
	AuditEventType_AUDIT_EVENT_TYPE_UNSPECIFIED AuditEventType = 0
)

// Enum value maps for AuditEventType.
var (
	AuditEventType_name = map[int32]string{
		0: "AUDIT_EVENT_TYPE_UNSPECIFIED",
	}
	AuditEventType_value = map[string]int32{
		"AUDIT_EVENT_TYPE_UNSPECIFIED": 0,
	}
)

func (x AuditEventType) Enum() *AuditEventType {
	p := new(AuditEventType)
	*p = x
	return p
}

func (x AuditEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[2].Descriptor()
}

func (AuditEventType) Type() protoreflect.EnumType {
	return &file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes[2]
}

func (x AuditEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventType.Descriptor instead.
func (AuditEventType) EnumDescriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{2}
}

// AuditActor is the actor who caused the audited event.
type AuditActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of actor who caused the audited event.
	Type AuditActorType `protobuf:"varint,1,opt,name=type,proto3,enum=buf.alpha.registry.v1alpha1.AuditActorType" json:"type,omitempty"`
	// Id of the actor who caused the audited event.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuditActor) Reset() {
	*x = AuditActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditActor) ProtoMessage() {}

func (x *AuditActor) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditActor.ProtoReflect.Descriptor instead.
func (*AuditActor) Descriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{0}
}

func (x *AuditActor) GetType() AuditActorType {
	if x != nil {
		return x.Type
	}
	return AuditActorType_AUDIT_ACTOR_TYPE_UNSPECIFIED
}

func (x *AuditActor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AuditResource is the affected resource by the audited event.
type AuditResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource that was affected by the audited event.
	Type AuditResourceType `protobuf:"varint,1,opt,name=type,proto3,enum=buf.alpha.registry.v1alpha1.AuditResourceType" json:"type,omitempty"`
	// Id of the affected resource by the audited event.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AuditResource) Reset() {
	*x = AuditResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditResource) ProtoMessage() {}

func (x *AuditResource) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditResource.ProtoReflect.Descriptor instead.
func (*AuditResource) Descriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{1}
}

func (x *AuditResource) GetType() AuditResourceType {
	if x != nil {
		return x.Type
	}
	return AuditResourceType_AUDIT_RESOURCE_TYPE_UNSPECIFIED
}

func (x *AuditResource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AuditEvent is an action that happened in the BSR, with the information of
// what happened, when it happened, who did it, which resource was affected, and
// more contextual information on the event.
type AuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the audited event.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the audited event. It specifies "what" happened.
	Type AuditEventType `protobuf:"varint,2,opt,name=type,proto3,enum=buf.alpha.registry.v1alpha1.AuditEventType" json:"type,omitempty"`
	// Actor of the audited event. It specifies "who" did it.
	Actor *AuditActor `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`
	// Resource of the audited event. It specifies "which resouce" was affected.
	Resource *AuditResource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Timestamp of the audited event. It specifies "when" it happened.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP(), []int{2}
}

func (x *AuditEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditEvent) GetType() AuditEventType {
	if x != nil {
		return x.Type
	}
	return AuditEventType_AUDIT_EVENT_TYPE_UNSPECIFIED
}

func (x *AuditEvent) GetActor() *AuditActor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AuditEvent) GetResource() *AuditResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AuditEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_buf_alpha_registry_v1alpha1_audit_event_proto protoreflect.FileDescriptor

var file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x9e, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2a, 0x4d, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0xc3, 0x02, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55,
	0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x04, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x2a, 0x32, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x42, 0x9c, 0x02, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x42, 0x41, 0x52, 0xaa, 0x02, 0x1b, 0x42, 0x75, 0x66, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xca, 0x02, 0x1b, 0x42, 0x75, 0x66, 0x5c, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2,
	0x02, 0x27, 0x42, 0x75, 0x66, 0x5c, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x42, 0x75, 0x66, 0x3a,
	0x3a, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3a, 0x3a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescOnce sync.Once
	file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescData = file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDesc
)

func file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescGZIP() []byte {
	file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescOnce.Do(func() {
		file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescData)
	})
	return file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDescData
}

var file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_buf_alpha_registry_v1alpha1_audit_event_proto_goTypes = []interface{}{
	(AuditActorType)(0),           // 0: buf.alpha.registry.v1alpha1.AuditActorType
	(AuditResourceType)(0),        // 1: buf.alpha.registry.v1alpha1.AuditResourceType
	(AuditEventType)(0),           // 2: buf.alpha.registry.v1alpha1.AuditEventType
	(*AuditActor)(nil),            // 3: buf.alpha.registry.v1alpha1.AuditActor
	(*AuditResource)(nil),         // 4: buf.alpha.registry.v1alpha1.AuditResource
	(*AuditEvent)(nil),            // 5: buf.alpha.registry.v1alpha1.AuditEvent
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_buf_alpha_registry_v1alpha1_audit_event_proto_depIdxs = []int32{
	0, // 0: buf.alpha.registry.v1alpha1.AuditActor.type:type_name -> buf.alpha.registry.v1alpha1.AuditActorType
	1, // 1: buf.alpha.registry.v1alpha1.AuditResource.type:type_name -> buf.alpha.registry.v1alpha1.AuditResourceType
	2, // 2: buf.alpha.registry.v1alpha1.AuditEvent.type:type_name -> buf.alpha.registry.v1alpha1.AuditEventType
	3, // 3: buf.alpha.registry.v1alpha1.AuditEvent.actor:type_name -> buf.alpha.registry.v1alpha1.AuditActor
	4, // 4: buf.alpha.registry.v1alpha1.AuditEvent.resource:type_name -> buf.alpha.registry.v1alpha1.AuditResource
	6, // 5: buf.alpha.registry.v1alpha1.AuditEvent.timestamp:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_buf_alpha_registry_v1alpha1_audit_event_proto_init() }
func file_buf_alpha_registry_v1alpha1_audit_event_proto_init() {
	if File_buf_alpha_registry_v1alpha1_audit_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_alpha_registry_v1alpha1_audit_event_proto_goTypes,
		DependencyIndexes: file_buf_alpha_registry_v1alpha1_audit_event_proto_depIdxs,
		EnumInfos:         file_buf_alpha_registry_v1alpha1_audit_event_proto_enumTypes,
		MessageInfos:      file_buf_alpha_registry_v1alpha1_audit_event_proto_msgTypes,
	}.Build()
	File_buf_alpha_registry_v1alpha1_audit_event_proto = out.File
	file_buf_alpha_registry_v1alpha1_audit_event_proto_rawDesc = nil
	file_buf_alpha_registry_v1alpha1_audit_event_proto_goTypes = nil
	file_buf_alpha_registry_v1alpha1_audit_event_proto_depIdxs = nil
}
