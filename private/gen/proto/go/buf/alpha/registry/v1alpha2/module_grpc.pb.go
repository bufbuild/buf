// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: buf/alpha/registry/v1alpha2/module.proto

package registryv1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	// GetModule gets a module by ID.
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error)
	// GetModuleByFullName gets a module by full name.
	GetModuleByFullName(ctx context.Context, in *GetModuleByFullNameRequest, opts ...grpc.CallOption) (*GetModuleByFullNameResponse, error)
	// ListModules lists all modules.
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	// ListUserModules lists all modules belonging to a user.
	ListUserModules(ctx context.Context, in *ListUserModulesRequest, opts ...grpc.CallOption) (*ListUserModulesResponse, error)
	// ListModulesUserCanAccess lists all modules a user can access.
	ListModulesUserCanAccess(ctx context.Context, in *ListModulesUserCanAccessRequest, opts ...grpc.CallOption) (*ListModulesUserCanAccessResponse, error)
	// ListOrganizationModules lists all modules for an organization.
	ListOrganizationModules(ctx context.Context, in *ListOrganizationModulesRequest, opts ...grpc.CallOption) (*ListOrganizationModulesResponse, error)
	// CreateModuleByFullName creates a new module by full name.
	CreateModuleByFullName(ctx context.Context, in *CreateModuleByFullNameRequest, opts ...grpc.CallOption) (*CreateModuleByFullNameResponse, error)
	// DeleteModule deletes a module.
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error)
	// DeleteModuleByFullName deletes a module by full name.
	DeleteModuleByFullName(ctx context.Context, in *DeleteModuleByFullNameRequest, opts ...grpc.CallOption) (*DeleteModuleByFullNameResponse, error)
	// DeprecateModuleByName deprecates the module.
	DeprecateModuleByName(ctx context.Context, in *DeprecateModuleByNameRequest, opts ...grpc.CallOption) (*DeprecateModuleByNameResponse, error)
	// UndeprecateModuleByName makes the module not deprecated and removes any deprecation_message.
	UndeprecateModuleByName(ctx context.Context, in *UndeprecateModuleByNameRequest, opts ...grpc.CallOption) (*UndeprecateModuleByNameResponse, error)
	// GetModulesByFullName gets modules by full name. Response order is unspecified.
	// Errors if any of the modules don't exist or the caller does not have access to any of the modules.
	GetModulesByFullName(ctx context.Context, in *GetModulesByFullNameRequest, opts ...grpc.CallOption) (*GetModulesByFullNameResponse, error)
	// SetModuleContributor sets the role of a user in the module.
	SetModuleContributor(ctx context.Context, in *SetModuleContributorRequest, opts ...grpc.CallOption) (*SetModuleContributorResponse, error)
	// ListModuleContributors returns the list of contributors that has an explicit role against the module.
	// This does not include users who have implicit roles against the module, unless they have also been
	// assigned a role explicitly.
	ListModuleContributors(ctx context.Context, in *ListModuleContributorsRequest, opts ...grpc.CallOption) (*ListModuleContributorsResponse, error)
	// GetModuleContributor returns the contributor information of a user in a module.
	GetModuleContributor(ctx context.Context, in *GetModuleContributorRequest, opts ...grpc.CallOption) (*GetModuleContributorResponse, error)
	// GetModuleSettings gets the settings of a module.
	GetModuleSettings(ctx context.Context, in *GetModuleSettingsRequest, opts ...grpc.CallOption) (*GetModuleSettingsResponse, error)
	// UpdateModuleSettingsByName updates the settings of a module.
	UpdateModuleSettingsByName(ctx context.Context, in *UpdateModuleSettingsByNameRequest, opts ...grpc.CallOption) (*UpdateModuleSettingsByNameResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleResponse, error) {
	out := new(GetModuleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/GetModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleByFullName(ctx context.Context, in *GetModuleByFullNameRequest, opts ...grpc.CallOption) (*GetModuleByFullNameResponse, error) {
	out := new(GetModuleByFullNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleByFullName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/ListModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListUserModules(ctx context.Context, in *ListUserModulesRequest, opts ...grpc.CallOption) (*ListUserModulesResponse, error) {
	out := new(ListUserModulesResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/ListUserModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModulesUserCanAccess(ctx context.Context, in *ListModulesUserCanAccessRequest, opts ...grpc.CallOption) (*ListModulesUserCanAccessResponse, error) {
	out := new(ListModulesUserCanAccessResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/ListModulesUserCanAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListOrganizationModules(ctx context.Context, in *ListOrganizationModulesRequest, opts ...grpc.CallOption) (*ListOrganizationModulesResponse, error) {
	out := new(ListOrganizationModulesResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/ListOrganizationModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) CreateModuleByFullName(ctx context.Context, in *CreateModuleByFullNameRequest, opts ...grpc.CallOption) (*CreateModuleByFullNameResponse, error) {
	out := new(CreateModuleByFullNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/CreateModuleByFullName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error) {
	out := new(DeleteModuleResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/DeleteModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModuleByFullName(ctx context.Context, in *DeleteModuleByFullNameRequest, opts ...grpc.CallOption) (*DeleteModuleByFullNameResponse, error) {
	out := new(DeleteModuleByFullNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/DeleteModuleByFullName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeprecateModuleByName(ctx context.Context, in *DeprecateModuleByNameRequest, opts ...grpc.CallOption) (*DeprecateModuleByNameResponse, error) {
	out := new(DeprecateModuleByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/DeprecateModuleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UndeprecateModuleByName(ctx context.Context, in *UndeprecateModuleByNameRequest, opts ...grpc.CallOption) (*UndeprecateModuleByNameResponse, error) {
	out := new(UndeprecateModuleByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/UndeprecateModuleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModulesByFullName(ctx context.Context, in *GetModulesByFullNameRequest, opts ...grpc.CallOption) (*GetModulesByFullNameResponse, error) {
	out := new(GetModulesByFullNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/GetModulesByFullName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SetModuleContributor(ctx context.Context, in *SetModuleContributorRequest, opts ...grpc.CallOption) (*SetModuleContributorResponse, error) {
	out := new(SetModuleContributorResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/SetModuleContributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) ListModuleContributors(ctx context.Context, in *ListModuleContributorsRequest, opts ...grpc.CallOption) (*ListModuleContributorsResponse, error) {
	out := new(ListModuleContributorsResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/ListModuleContributors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleContributor(ctx context.Context, in *GetModuleContributorRequest, opts ...grpc.CallOption) (*GetModuleContributorResponse, error) {
	out := new(GetModuleContributorResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleContributor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleSettings(ctx context.Context, in *GetModuleSettingsRequest, opts ...grpc.CallOption) (*GetModuleSettingsResponse, error) {
	out := new(GetModuleSettingsResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModuleSettingsByName(ctx context.Context, in *UpdateModuleSettingsByNameRequest, opts ...grpc.CallOption) (*UpdateModuleSettingsByNameResponse, error) {
	out := new(UpdateModuleSettingsByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha2.ModuleService/UpdateModuleSettingsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations should embed UnimplementedModuleServiceServer
// for forward compatibility
type ModuleServiceServer interface {
	// GetModule gets a module by ID.
	GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error)
	// GetModuleByFullName gets a module by full name.
	GetModuleByFullName(context.Context, *GetModuleByFullNameRequest) (*GetModuleByFullNameResponse, error)
	// ListModules lists all modules.
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	// ListUserModules lists all modules belonging to a user.
	ListUserModules(context.Context, *ListUserModulesRequest) (*ListUserModulesResponse, error)
	// ListModulesUserCanAccess lists all modules a user can access.
	ListModulesUserCanAccess(context.Context, *ListModulesUserCanAccessRequest) (*ListModulesUserCanAccessResponse, error)
	// ListOrganizationModules lists all modules for an organization.
	ListOrganizationModules(context.Context, *ListOrganizationModulesRequest) (*ListOrganizationModulesResponse, error)
	// CreateModuleByFullName creates a new module by full name.
	CreateModuleByFullName(context.Context, *CreateModuleByFullNameRequest) (*CreateModuleByFullNameResponse, error)
	// DeleteModule deletes a module.
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error)
	// DeleteModuleByFullName deletes a module by full name.
	DeleteModuleByFullName(context.Context, *DeleteModuleByFullNameRequest) (*DeleteModuleByFullNameResponse, error)
	// DeprecateModuleByName deprecates the module.
	DeprecateModuleByName(context.Context, *DeprecateModuleByNameRequest) (*DeprecateModuleByNameResponse, error)
	// UndeprecateModuleByName makes the module not deprecated and removes any deprecation_message.
	UndeprecateModuleByName(context.Context, *UndeprecateModuleByNameRequest) (*UndeprecateModuleByNameResponse, error)
	// GetModulesByFullName gets modules by full name. Response order is unspecified.
	// Errors if any of the modules don't exist or the caller does not have access to any of the modules.
	GetModulesByFullName(context.Context, *GetModulesByFullNameRequest) (*GetModulesByFullNameResponse, error)
	// SetModuleContributor sets the role of a user in the module.
	SetModuleContributor(context.Context, *SetModuleContributorRequest) (*SetModuleContributorResponse, error)
	// ListModuleContributors returns the list of contributors that has an explicit role against the module.
	// This does not include users who have implicit roles against the module, unless they have also been
	// assigned a role explicitly.
	ListModuleContributors(context.Context, *ListModuleContributorsRequest) (*ListModuleContributorsResponse, error)
	// GetModuleContributor returns the contributor information of a user in a module.
	GetModuleContributor(context.Context, *GetModuleContributorRequest) (*GetModuleContributorResponse, error)
	// GetModuleSettings gets the settings of a module.
	GetModuleSettings(context.Context, *GetModuleSettingsRequest) (*GetModuleSettingsResponse, error)
	// UpdateModuleSettingsByName updates the settings of a module.
	UpdateModuleSettingsByName(context.Context, *UpdateModuleSettingsByNameRequest) (*UpdateModuleSettingsByNameResponse, error)
}

// UnimplementedModuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModuleServiceServer struct {
}

func (UnimplementedModuleServiceServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleByFullName(context.Context, *GetModuleByFullNameRequest) (*GetModuleByFullNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleByFullName not implemented")
}
func (UnimplementedModuleServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedModuleServiceServer) ListUserModules(context.Context, *ListUserModulesRequest) (*ListUserModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserModules not implemented")
}
func (UnimplementedModuleServiceServer) ListModulesUserCanAccess(context.Context, *ListModulesUserCanAccessRequest) (*ListModulesUserCanAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModulesUserCanAccess not implemented")
}
func (UnimplementedModuleServiceServer) ListOrganizationModules(context.Context, *ListOrganizationModulesRequest) (*ListOrganizationModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationModules not implemented")
}
func (UnimplementedModuleServiceServer) CreateModuleByFullName(context.Context, *CreateModuleByFullNameRequest) (*CreateModuleByFullNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModuleByFullName not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModuleByFullName(context.Context, *DeleteModuleByFullNameRequest) (*DeleteModuleByFullNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModuleByFullName not implemented")
}
func (UnimplementedModuleServiceServer) DeprecateModuleByName(context.Context, *DeprecateModuleByNameRequest) (*DeprecateModuleByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprecateModuleByName not implemented")
}
func (UnimplementedModuleServiceServer) UndeprecateModuleByName(context.Context, *UndeprecateModuleByNameRequest) (*UndeprecateModuleByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeprecateModuleByName not implemented")
}
func (UnimplementedModuleServiceServer) GetModulesByFullName(context.Context, *GetModulesByFullNameRequest) (*GetModulesByFullNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesByFullName not implemented")
}
func (UnimplementedModuleServiceServer) SetModuleContributor(context.Context, *SetModuleContributorRequest) (*SetModuleContributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetModuleContributor not implemented")
}
func (UnimplementedModuleServiceServer) ListModuleContributors(context.Context, *ListModuleContributorsRequest) (*ListModuleContributorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleContributors not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleContributor(context.Context, *GetModuleContributorRequest) (*GetModuleContributorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleContributor not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleSettings(context.Context, *GetModuleSettingsRequest) (*GetModuleSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleSettings not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModuleSettingsByName(context.Context, *UpdateModuleSettingsByNameRequest) (*UpdateModuleSettingsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModuleSettingsByName not implemented")
}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleByFullName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleByFullNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleByFullName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleByFullName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleByFullName(ctx, req.(*GetModuleByFullNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListUserModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListUserModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/ListUserModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListUserModules(ctx, req.(*ListUserModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModulesUserCanAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesUserCanAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModulesUserCanAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/ListModulesUserCanAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModulesUserCanAccess(ctx, req.(*ListModulesUserCanAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListOrganizationModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListOrganizationModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/ListOrganizationModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListOrganizationModules(ctx, req.(*ListOrganizationModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_CreateModuleByFullName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleByFullNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModuleByFullName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/CreateModuleByFullName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModuleByFullName(ctx, req.(*CreateModuleByFullNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/DeleteModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModuleByFullName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleByFullNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModuleByFullName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/DeleteModuleByFullName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModuleByFullName(ctx, req.(*DeleteModuleByFullNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeprecateModuleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprecateModuleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeprecateModuleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/DeprecateModuleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeprecateModuleByName(ctx, req.(*DeprecateModuleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UndeprecateModuleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeprecateModuleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UndeprecateModuleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/UndeprecateModuleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UndeprecateModuleByName(ctx, req.(*UndeprecateModuleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModulesByFullName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModulesByFullNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModulesByFullName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/GetModulesByFullName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModulesByFullName(ctx, req.(*GetModulesByFullNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SetModuleContributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModuleContributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SetModuleContributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/SetModuleContributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SetModuleContributor(ctx, req.(*SetModuleContributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_ListModuleContributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleContributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).ListModuleContributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/ListModuleContributors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).ListModuleContributors(ctx, req.(*ListModuleContributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleContributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleContributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleContributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleContributor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleContributor(ctx, req.(*GetModuleContributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/GetModuleSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleSettings(ctx, req.(*GetModuleSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModuleSettingsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleSettingsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModuleSettingsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha2.ModuleService/UpdateModuleSettingsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModuleSettingsByName(ctx, req.(*UpdateModuleSettingsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buf.alpha.registry.v1alpha2.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModule",
			Handler:    _ModuleService_GetModule_Handler,
		},
		{
			MethodName: "GetModuleByFullName",
			Handler:    _ModuleService_GetModuleByFullName_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _ModuleService_ListModules_Handler,
		},
		{
			MethodName: "ListUserModules",
			Handler:    _ModuleService_ListUserModules_Handler,
		},
		{
			MethodName: "ListModulesUserCanAccess",
			Handler:    _ModuleService_ListModulesUserCanAccess_Handler,
		},
		{
			MethodName: "ListOrganizationModules",
			Handler:    _ModuleService_ListOrganizationModules_Handler,
		},
		{
			MethodName: "CreateModuleByFullName",
			Handler:    _ModuleService_CreateModuleByFullName_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModuleService_DeleteModule_Handler,
		},
		{
			MethodName: "DeleteModuleByFullName",
			Handler:    _ModuleService_DeleteModuleByFullName_Handler,
		},
		{
			MethodName: "DeprecateModuleByName",
			Handler:    _ModuleService_DeprecateModuleByName_Handler,
		},
		{
			MethodName: "UndeprecateModuleByName",
			Handler:    _ModuleService_UndeprecateModuleByName_Handler,
		},
		{
			MethodName: "GetModulesByFullName",
			Handler:    _ModuleService_GetModulesByFullName_Handler,
		},
		{
			MethodName: "SetModuleContributor",
			Handler:    _ModuleService_SetModuleContributor_Handler,
		},
		{
			MethodName: "ListModuleContributors",
			Handler:    _ModuleService_ListModuleContributors_Handler,
		},
		{
			MethodName: "GetModuleContributor",
			Handler:    _ModuleService_GetModuleContributor_Handler,
		},
		{
			MethodName: "GetModuleSettings",
			Handler:    _ModuleService_GetModuleSettings_Handler,
		},
		{
			MethodName: "UpdateModuleSettingsByName",
			Handler:    _ModuleService_UpdateModuleSettingsByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buf/alpha/registry/v1alpha2/module.proto",
}
