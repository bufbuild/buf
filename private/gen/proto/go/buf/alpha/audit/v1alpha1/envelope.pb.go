// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: buf/alpha/audit/v1alpha1/envelope.proto

package auditv1alpha1

import (
	v1alpha1 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/module/v1alpha1"
	v1alpha11 "github.com/bufbuild/buf/private/gen/proto/go/buf/alpha/rpc/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ACTION_UNSPECIFIED                                                                                                    Action = 0
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER                                                    Action = 1
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER_SUBJECT                                            Action = 2
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_REPOSITORY                             Action = 3
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_REPOSITORY_SETTINGS                                    Action = 4
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_ORGANIZATION_SETTINGS                                  Action = 5
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_READ_PLUGIN                                                Action = 6
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_PLUGIN_VERSION                                      Action = 7
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_TEMPLATE_VERSION                                    Action = 8
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_PLUGIN                                 Action = 9
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_TEMPLATE                               Action = 10
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_PLUGIN_SETTINGS                                        Action = 11
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_TEMPLATE_SETTINGS                                      Action = 12
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_ADD_ORGANIZATION_MEMBER                                    Action = 13
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_UPDATE_ORGANIZATION_MEMBER                                 Action = 14
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_REMOVE_ORGANIZATION_MEMBER                                 Action = 15
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_ORGANIZATION                                        Action = 16
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_REPOSITORY                                          Action = 17
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_TEMPLATE                                            Action = 18
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_PLUGIN                                              Action = 19
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_USER                                                Action = 20
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_SERVER_ADMIN_PANEL                                     Action = 21
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_DIRECTORY_INFO                                             Action = 22
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_FILE                                                       Action = 23
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_PACKAGES                                                   Action = 24
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_DOCUMENTATION                                              Action = 25
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_PACKAGE_DOCUMENTATION                                             Action = 26
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOWNLOAD_SERVICE_DOWNLOAD                                                         Action = 27
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_PLUGINS                                                 Action = 28
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_TEMPLATE                                                Action = 29
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_IMAGE_SERVICE_GET_IMAGE                                                           Action = 30
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION                                             Action = 31
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_BY_NAME                                     Action = 32
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_ORGANIZATIONS                                           Action = 33
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_USER_ORGANIZATIONS                                      Action = 34
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_CREATE_ORGANIZATION                                          Action = 35
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION                                          Action = 36
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION_BY_NAME                                  Action = 37
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_ADD_ORGANIZATION_MEMBER                                      Action = 38
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_MEMBER                                   Action = 39
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_REMOVE_ORGANIZATION_MEMBER                                   Action = 40
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_SETTINGS                                    Action = 41
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_SETTINGS                                 Action = 42
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_OWNER_SERVICE_GET_OWNER_BY_NAME                                                   Action = 43
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGINS                                                       Action = 44
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_PLUGINS                                                  Action = 45
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_PLUGINS                                          Action = 46
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_VERSIONS                                               Action = 47
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_PLUGIN                                                      Action = 48
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN                                                         Action = 49
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_PLUGIN                                                      Action = 50
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE                                                       Action = 51
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES                                                     Action = 52
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_TEMPLATES                                                Action = 53
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_TEMPLATES                                        Action = 54
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE_VERSION                                               Action = 55
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_VERSIONS                                             Action = 56
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE                                                    Action = 57
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_TEMPLATE                                                    Action = 58
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE_VERSION                                            Action = 59
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PUSH_SERVICE_PUSH                                                                 Action = 60
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_REPOSITORIES                                   Action = 61
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_TEMPLATES                                      Action = 62
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_REPOSITORIES                              Action = 63
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_TEMPLATES                                 Action = 64
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_REPOSITORIES                               Action = 65
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_TEMPLATES                                  Action = 66
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REFERENCE_SERVICE_GET_REFERENCE_BY_NAME                                           Action = 67
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_CREATE_REPOSITORY_BRANCH                                Action = 68
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_LIST_REPOSITORY_BRANCHES                                Action = 69
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_BRANCH                       Action = 70
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_REFERENCE                    Action = 71
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_REFERENCE                      Action = 72
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_SEQUENCE_ID                    Action = 73
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_CREATE_REPOSITORY_TAG                                      Action = 74
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_LIST_REPOSITORY_TAGS                                       Action = 75
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY                                                 Action = 76
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_BY_FULL_NAME                                    Action = 77
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES                                              Action = 78
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_USER_REPOSITORIES                                         Action = 79
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES_USER_CAN_ACCESS                              Action = 80
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_ORGANIZATION_REPOSITORIES                                 Action = 81
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_CREATE_REPOSITORY_BY_FULL_NAME                                 Action = 82
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY                                              Action = 83
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY_BY_FULL_NAME                                 Action = 84
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DEPRECATE_REPOSITORY_BY_NAME                                   Action = 85
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UNDEPRECATE_REPOSITORY_BY_NAME                                 Action = 86
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORIES_BY_FULL_NAME                                  Action = 87
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RESOLVE_SERVICE_GET_MODULE_PINS                                                   Action = 88
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_LOCAL_RESOLVE_SERVICE_GET_LOCAL_MODULE_PINS                                       Action = 89
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_SEARCH_SERVICE_SEARCH                                                             Action = 90
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_CREATE_TOKEN                                                        Action = 91
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_GET_TOKEN                                                           Action = 92
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_DELETE_TOKEN                                                        Action = 93
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_LIST_TOKENS                                                         Action = 94
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_CREATE_USER                                                          Action = 95
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER                                                             Action = 96
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER_BY_USERNAME                                                 Action = 97
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_USERS                                                           Action = 98
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_ORGANIZATION_USERS                                              Action = 99
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DELETE_USER                                                          Action = 100
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DEACTIVATE_USER                                                      Action = 101
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_UPDATE_USER_SERVER_ROLE                                              Action = 102
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_COUNT_USERS                                                          Action = 103
	Action_ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION                             Action = 104
	Action_ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_DELETE_PLUGIN_VERSION                             Action = 105
	Action_ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_TOKEN_SERVICE_AUTHENTICATE_TOKEN                                 Action = 106
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUDIT_LOGS_SERVICE_LIST_AUDIT_LOGS                                                Action = 107
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORY_CONTRIBUTORS                                   Action = 108
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_CONTRIBUTORS                                           Action = 109
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_CONTRIBUTORS                                         Action = 110
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_SET_REPOSITORY_CONTRIBUTOR                                     Action = 111
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_PLUGIN_CONTRIBUTOR                                             Action = 112
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_TEMPLATE_CONTRIBUTOR                                           Action = 113
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_REPOSITORY_CONTRIBUTORS                             Action = 114
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_PLUGIN_CONTRIBUTORS                                 Action = 115
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_TEMPLATE_CONTRIBUTORS                               Action = 116
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_CREATE_REPOSITORY_TRACK                                  Action = 117
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS                                   Action = 118
	Action_ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PROVISION_SERVICE_ADD_USER_TO_ORGANIZATION                       Action = 119
	Action_ACTION_BUF_ALPHA_GOMODULE_V1_ALPHA1_GO_MODULE_SERVICE_DELETE_ALL_MODULES_FOR_REPOSITORY                               Action = 120
	Action_ACTION_BUF_ALPHA_SANDBOX_V1_ALPHA1_SANDBOX_SERVICE_REMOTE_BUILD                                                       Action = 121
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_REPOSITORY_ROLES                                  Action = 122
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_REPOSITORY_ROLES                             Action = 123
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_PLUGIN_ROLES                                      Action = 124
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_PLUGIN_ROLES                                 Action = 125
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_TEMPLATE_ROLES                                    Action = 126
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_TEMPLATE_ROLES                               Action = 127
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_DELETE_REPOSITORY_TRACK_BY_NAME                          Action = 128
	Action_ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION_METADATA                    Action = 129
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_ORGANIZATION_ELEMENTS                                     Action = 130
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_REPOSITORY_ELEMENTS                                       Action = 131
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_PLUGIN_ELEMENTS                                           Action = 132
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_TEMPLATE_ELEMENTS                                         Action = 133
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_USER_ELEMENTS                                             Action = 134
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_SERVER_ELEMENTS                                           Action = 135
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_PLUGIN                                                   Action = 136
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_PLUGIN                                                 Action = 137
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_TEMPLATE                                                 Action = 138
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_TEMPLATE                                               Action = 139
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_SET_ORGANIZATION_MEMBER                                      Action = 140
	Action_ACTION_BUF_ALPHA_GENREGISTRYINTERNAL_V1_ALPHA1_GENERATION_REGISTRY_SERVICE_DELETE_REPOSITORY                          Action = 141
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_SETTINGS                                        Action = 142
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ADMIN_SERVICE_FORCE_DELETE_USER                                                   Action = 143
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN_VERSION                                                 Action = 144
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REPOSITORY_COMMIT  Action = 145
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_LIST_REPOSITORY_TRACK_COMMITS_BY_REPOSITORY_TRACK Action = 146
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_GET_REPOSITORY_TRACK_BY_NAME                             Action = 147
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_JSON_SCHEMA_SERVICE_GET_JSON_SCHEMA                                               Action = 148
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REFERENCE          Action = 149
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_CONVERT_SERVICE_CONVERT                                                           Action = 150
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_CONTRIBUTOR                                     Action = 151
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS_BY_REPOSITORY_COMMIT              Action = 152
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_ON_TRACK                        Action = 153
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES_USER_CAN_ACCESS                                     Action = 154
	Action_ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UPDATE_REPOSITORY_SETTINGS_BY_NAME                             Action = 155
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:   "ACTION_UNSPECIFIED",
		1:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER",
		2:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER_SUBJECT",
		3:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_REPOSITORY",
		4:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_REPOSITORY_SETTINGS",
		5:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_ORGANIZATION_SETTINGS",
		6:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_READ_PLUGIN",
		7:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_PLUGIN_VERSION",
		8:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_TEMPLATE_VERSION",
		9:   "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_PLUGIN",
		10:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_TEMPLATE",
		11:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_PLUGIN_SETTINGS",
		12:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_TEMPLATE_SETTINGS",
		13:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_ADD_ORGANIZATION_MEMBER",
		14:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_UPDATE_ORGANIZATION_MEMBER",
		15:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_REMOVE_ORGANIZATION_MEMBER",
		16:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_ORGANIZATION",
		17:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_REPOSITORY",
		18:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_TEMPLATE",
		19:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_PLUGIN",
		20:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_USER",
		21:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_SERVER_ADMIN_PANEL",
		22:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_DIRECTORY_INFO",
		23:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_FILE",
		24:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_PACKAGES",
		25:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_DOCUMENTATION",
		26:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_PACKAGE_DOCUMENTATION",
		27:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOWNLOAD_SERVICE_DOWNLOAD",
		28:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_PLUGINS",
		29:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_TEMPLATE",
		30:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_IMAGE_SERVICE_GET_IMAGE",
		31:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION",
		32:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_BY_NAME",
		33:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_ORGANIZATIONS",
		34:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_USER_ORGANIZATIONS",
		35:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_CREATE_ORGANIZATION",
		36:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION",
		37:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION_BY_NAME",
		38:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_ADD_ORGANIZATION_MEMBER",
		39:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_MEMBER",
		40:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_REMOVE_ORGANIZATION_MEMBER",
		41:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_SETTINGS",
		42:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_SETTINGS",
		43:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_OWNER_SERVICE_GET_OWNER_BY_NAME",
		44:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGINS",
		45:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_PLUGINS",
		46:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_PLUGINS",
		47:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_VERSIONS",
		48:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_PLUGIN",
		49:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN",
		50:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_PLUGIN",
		51:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE",
		52:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES",
		53:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_TEMPLATES",
		54:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_TEMPLATES",
		55:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE_VERSION",
		56:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_VERSIONS",
		57:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE",
		58:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_TEMPLATE",
		59:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE_VERSION",
		60:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PUSH_SERVICE_PUSH",
		61:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_REPOSITORIES",
		62:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_TEMPLATES",
		63:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_REPOSITORIES",
		64:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_TEMPLATES",
		65:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_REPOSITORIES",
		66:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_TEMPLATES",
		67:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REFERENCE_SERVICE_GET_REFERENCE_BY_NAME",
		68:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_CREATE_REPOSITORY_BRANCH",
		69:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_LIST_REPOSITORY_BRANCHES",
		70:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_BRANCH",
		71:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_REFERENCE",
		72:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_REFERENCE",
		73:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_SEQUENCE_ID",
		74:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_CREATE_REPOSITORY_TAG",
		75:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_LIST_REPOSITORY_TAGS",
		76:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY",
		77:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_BY_FULL_NAME",
		78:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES",
		79:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_USER_REPOSITORIES",
		80:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES_USER_CAN_ACCESS",
		81:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_ORGANIZATION_REPOSITORIES",
		82:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_CREATE_REPOSITORY_BY_FULL_NAME",
		83:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY",
		84:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY_BY_FULL_NAME",
		85:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DEPRECATE_REPOSITORY_BY_NAME",
		86:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UNDEPRECATE_REPOSITORY_BY_NAME",
		87:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORIES_BY_FULL_NAME",
		88:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RESOLVE_SERVICE_GET_MODULE_PINS",
		89:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_LOCAL_RESOLVE_SERVICE_GET_LOCAL_MODULE_PINS",
		90:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_SEARCH_SERVICE_SEARCH",
		91:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_CREATE_TOKEN",
		92:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_GET_TOKEN",
		93:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_DELETE_TOKEN",
		94:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_LIST_TOKENS",
		95:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_CREATE_USER",
		96:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER",
		97:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER_BY_USERNAME",
		98:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_USERS",
		99:  "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_ORGANIZATION_USERS",
		100: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DELETE_USER",
		101: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DEACTIVATE_USER",
		102: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_UPDATE_USER_SERVER_ROLE",
		103: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_COUNT_USERS",
		104: "ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION",
		105: "ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_DELETE_PLUGIN_VERSION",
		106: "ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_TOKEN_SERVICE_AUTHENTICATE_TOKEN",
		107: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUDIT_LOGS_SERVICE_LIST_AUDIT_LOGS",
		108: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORY_CONTRIBUTORS",
		109: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_CONTRIBUTORS",
		110: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_CONTRIBUTORS",
		111: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_SET_REPOSITORY_CONTRIBUTOR",
		112: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_PLUGIN_CONTRIBUTOR",
		113: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_TEMPLATE_CONTRIBUTOR",
		114: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_REPOSITORY_CONTRIBUTORS",
		115: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_PLUGIN_CONTRIBUTORS",
		116: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_TEMPLATE_CONTRIBUTORS",
		117: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_CREATE_REPOSITORY_TRACK",
		118: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS",
		119: "ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PROVISION_SERVICE_ADD_USER_TO_ORGANIZATION",
		120: "ACTION_BUF_ALPHA_GOMODULE_V1_ALPHA1_GO_MODULE_SERVICE_DELETE_ALL_MODULES_FOR_REPOSITORY",
		121: "ACTION_BUF_ALPHA_SANDBOX_V1_ALPHA1_SANDBOX_SERVICE_REMOTE_BUILD",
		122: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_REPOSITORY_ROLES",
		123: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_REPOSITORY_ROLES",
		124: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_PLUGIN_ROLES",
		125: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_PLUGIN_ROLES",
		126: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_TEMPLATE_ROLES",
		127: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_TEMPLATE_ROLES",
		128: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_DELETE_REPOSITORY_TRACK_BY_NAME",
		129: "ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION_METADATA",
		130: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_ORGANIZATION_ELEMENTS",
		131: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_REPOSITORY_ELEMENTS",
		132: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_PLUGIN_ELEMENTS",
		133: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_TEMPLATE_ELEMENTS",
		134: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_USER_ELEMENTS",
		135: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_SERVER_ELEMENTS",
		136: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_PLUGIN",
		137: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_PLUGIN",
		138: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_TEMPLATE",
		139: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_TEMPLATE",
		140: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_SET_ORGANIZATION_MEMBER",
		141: "ACTION_BUF_ALPHA_GENREGISTRYINTERNAL_V1_ALPHA1_GENERATION_REGISTRY_SERVICE_DELETE_REPOSITORY",
		142: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_SETTINGS",
		143: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ADMIN_SERVICE_FORCE_DELETE_USER",
		144: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN_VERSION",
		145: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REPOSITORY_COMMIT",
		146: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_LIST_REPOSITORY_TRACK_COMMITS_BY_REPOSITORY_TRACK",
		147: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_GET_REPOSITORY_TRACK_BY_NAME",
		148: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_JSON_SCHEMA_SERVICE_GET_JSON_SCHEMA",
		149: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REFERENCE",
		150: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_CONVERT_SERVICE_CONVERT",
		151: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_CONTRIBUTOR",
		152: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS_BY_REPOSITORY_COMMIT",
		153: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_ON_TRACK",
		154: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES_USER_CAN_ACCESS",
		155: "ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UPDATE_REPOSITORY_SETTINGS_BY_NAME",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER":                                                    1,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHN_SERVICE_GET_CURRENT_USER_SUBJECT":                                            2,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_REPOSITORY":                             3,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_REPOSITORY_SETTINGS":                                    4,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_ORGANIZATION_SETTINGS":                                  5,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_READ_PLUGIN":                                                6,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_PLUGIN_VERSION":                                      7,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_TEMPLATE_VERSION":                                    8,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_PLUGIN":                                 9,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_CREATE_ORGANIZATION_TEMPLATE":                               10,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_PLUGIN_SETTINGS":                                        11,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_TEMPLATE_SETTINGS":                                      12,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_ADD_ORGANIZATION_MEMBER":                                    13,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_UPDATE_ORGANIZATION_MEMBER":                                 14,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_REMOVE_ORGANIZATION_MEMBER":                                 15,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_ORGANIZATION":                                        16,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_REPOSITORY":                                          17,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_TEMPLATE":                                            18,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_PLUGIN":                                              19,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_DELETE_USER":                                                20,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_SEE_SERVER_ADMIN_PANEL":                                     21,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_DIRECTORY_INFO":                                             22,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_SOURCE_FILE":                                                       23,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_PACKAGES":                                                   24,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_MODULE_DOCUMENTATION":                                              25,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOC_SERVICE_GET_PACKAGE_DOCUMENTATION":                                             26,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DOWNLOAD_SERVICE_DOWNLOAD":                                                         27,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_PLUGINS":                                                 28,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_GENERATE_SERVICE_GENERATE_TEMPLATE":                                                29,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_IMAGE_SERVICE_GET_IMAGE":                                                           30,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION":                                             31,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_BY_NAME":                                     32,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_ORGANIZATIONS":                                           33,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_LIST_USER_ORGANIZATIONS":                                      34,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_CREATE_ORGANIZATION":                                          35,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION":                                          36,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_DELETE_ORGANIZATION_BY_NAME":                                  37,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_ADD_ORGANIZATION_MEMBER":                                      38,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_MEMBER":                                   39,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_REMOVE_ORGANIZATION_MEMBER":                                   40,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_GET_ORGANIZATION_SETTINGS":                                    41,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_UPDATE_ORGANIZATION_SETTINGS":                                 42,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_OWNER_SERVICE_GET_OWNER_BY_NAME":                                                   43,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGINS":                                                       44,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_PLUGINS":                                                  45,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_PLUGINS":                                          46,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_VERSIONS":                                               47,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_PLUGIN":                                                      48,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN":                                                         49,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_PLUGIN":                                                      50,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE":                                                       51,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES":                                                     52,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_USER_TEMPLATES":                                                53,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_ORGANIZATION_TEMPLATES":                                        54,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_TEMPLATE_VERSION":                                               55,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_VERSIONS":                                             56,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE":                                                    57,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DELETE_TEMPLATE":                                                    58,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_CREATE_TEMPLATE_VERSION":                                            59,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PUSH_SERVICE_PUSH":                                                                 60,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_REPOSITORIES":                                   61,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_RECOMMENDED_TEMPLATES":                                      62,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_REPOSITORIES":                              63,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_LIST_RECOMMENDED_TEMPLATES":                                 64,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_REPOSITORIES":                               65,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RECOMMENDATION_SERVICE_SET_RECOMMENDED_TEMPLATES":                                  66,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REFERENCE_SERVICE_GET_REFERENCE_BY_NAME":                                           67,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_CREATE_REPOSITORY_BRANCH":                                68,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_BRANCH_SERVICE_LIST_REPOSITORY_BRANCHES":                                69,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_BRANCH":                       70,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_BY_REFERENCE":                    71,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_REFERENCE":                      72,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_GET_REPOSITORY_COMMIT_BY_SEQUENCE_ID":                    73,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_CREATE_REPOSITORY_TAG":                                      74,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TAG_SERVICE_LIST_REPOSITORY_TAGS":                                       75,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY":                                                 76,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_BY_FULL_NAME":                                    77,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES":                                              78,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_USER_REPOSITORIES":                                         79,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORIES_USER_CAN_ACCESS":                              80,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_ORGANIZATION_REPOSITORIES":                                 81,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_CREATE_REPOSITORY_BY_FULL_NAME":                                 82,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY":                                              83,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DELETE_REPOSITORY_BY_FULL_NAME":                                 84,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_DEPRECATE_REPOSITORY_BY_NAME":                                   85,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UNDEPRECATE_REPOSITORY_BY_NAME":                                 86,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORIES_BY_FULL_NAME":                                  87,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_RESOLVE_SERVICE_GET_MODULE_PINS":                                                   88,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_LOCAL_RESOLVE_SERVICE_GET_LOCAL_MODULE_PINS":                                       89,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_SEARCH_SERVICE_SEARCH":                                                             90,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_CREATE_TOKEN":                                                        91,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_GET_TOKEN":                                                           92,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_DELETE_TOKEN":                                                        93,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_TOKEN_SERVICE_LIST_TOKENS":                                                         94,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_CREATE_USER":                                                          95,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER":                                                             96,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_GET_USER_BY_USERNAME":                                                 97,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_USERS":                                                           98,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_LIST_ORGANIZATION_USERS":                                              99,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DELETE_USER":                                                          100,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_DEACTIVATE_USER":                                                      101,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_UPDATE_USER_SERVER_ROLE":                                              102,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_SERVICE_COUNT_USERS":                                                          103,
		"ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION":                             104,
		"ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_DELETE_PLUGIN_VERSION":                             105,
		"ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_TOKEN_SERVICE_AUTHENTICATE_TOKEN":                                 106,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUDIT_LOGS_SERVICE_LIST_AUDIT_LOGS":                                                107,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_LIST_REPOSITORY_CONTRIBUTORS":                                   108,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_PLUGIN_CONTRIBUTORS":                                           109,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATE_CONTRIBUTORS":                                         110,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_SET_REPOSITORY_CONTRIBUTOR":                                     111,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_PLUGIN_CONTRIBUTOR":                                             112,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_SET_TEMPLATE_CONTRIBUTOR":                                           113,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_REPOSITORY_CONTRIBUTORS":                             114,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_PLUGIN_CONTRIBUTORS":                                 115,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_AUTHZ_SERVICE_USER_CAN_MANAGE_TEMPLATE_CONTRIBUTORS":                               116,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_CREATE_REPOSITORY_TRACK":                                  117,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS":                                   118,
		"ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PROVISION_SERVICE_ADD_USER_TO_ORGANIZATION":                       119,
		"ACTION_BUF_ALPHA_GOMODULE_V1_ALPHA1_GO_MODULE_SERVICE_DELETE_ALL_MODULES_FOR_REPOSITORY":                               120,
		"ACTION_BUF_ALPHA_SANDBOX_V1_ALPHA1_SANDBOX_SERVICE_REMOTE_BUILD":                                                       121,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_REPOSITORY_ROLES":                                  122,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_REPOSITORY_ROLES":                             123,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_PLUGIN_ROLES":                                      124,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_PLUGIN_ROLES":                                 125,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_TEMPLATE_ROLES":                                    126,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_LIST_MANAGEABLE_USER_TEMPLATE_ROLES":                               127,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_DELETE_REPOSITORY_TRACK_BY_NAME":                          128,
		"ACTION_BUF_ALPHA_REGISTRYINTERNAL_V1_ALPHA1_INTERNAL_PLUGIN_SERVICE_CREATE_PLUGIN_VERSION_METADATA":                    129,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_ORGANIZATION_ELEMENTS":                                     130,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_REPOSITORY_ELEMENTS":                                       131,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_PLUGIN_ELEMENTS":                                           132,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_TEMPLATE_ELEMENTS":                                         133,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_USER_ELEMENTS":                                             134,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_DISPLAY_SERVICE_DISPLAY_SERVER_ELEMENTS":                                           135,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_PLUGIN":                                                   136,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_PLUGIN":                                                 137,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_DEPRECATE_TEMPLATE":                                                 138,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_UNDEPRECATE_TEMPLATE":                                               139,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_SERVICE_SET_ORGANIZATION_MEMBER":                                      140,
		"ACTION_BUF_ALPHA_GENREGISTRYINTERNAL_V1_ALPHA1_GENERATION_REGISTRY_SERVICE_DELETE_REPOSITORY":                          141,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_SETTINGS":                                        142,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_ADMIN_SERVICE_FORCE_DELETE_USER":                                                   143,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_GET_PLUGIN_VERSION":                                                 144,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REPOSITORY_COMMIT":  145,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_LIST_REPOSITORY_TRACK_COMMITS_BY_REPOSITORY_TRACK": 146,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_GET_REPOSITORY_TRACK_BY_NAME":                             147,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_JSON_SCHEMA_SERVICE_GET_JSON_SCHEMA":                                               148,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_COMMIT_SERVICE_GET_REPOSITORY_TRACK_COMMIT_BY_REFERENCE":          149,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_CONVERT_SERVICE_CONVERT":                                                           150,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_GET_REPOSITORY_CONTRIBUTOR":                                     151,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_TRACK_SERVICE_LIST_REPOSITORY_TRACKS_BY_REPOSITORY_COMMIT":              152,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_COMMIT_SERVICE_LIST_REPOSITORY_COMMITS_ON_TRACK":                        153,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_SERVICE_LIST_TEMPLATES_USER_CAN_ACCESS":                                     154,
		"ACTION_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_SERVICE_UPDATE_REPOSITORY_SETTINGS_BY_NAME":                             155,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_buf_alpha_audit_v1alpha1_envelope_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{0}
}

// ActionBufAlphaRegistryV1Alpha1DownloadInfo stores audit log details not included
// in actor or object for the Download action.
type ActionBufAlphaRegistryV1Alpha1DownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DownloadInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DownloadInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DownloadInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DownloadInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *ActionBufAlphaRegistryV1Alpha1DownloadInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetImageInfo stores audit log details not included
// in actor or object for the GetImage action.
type ActionBufAlphaRegistryV1Alpha1GetImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetImageInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetImageInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetImageInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetImageInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{1}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetImageInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo stores audit log details not included
// in object for the CreateOrganization action if the creation fails.
type ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{2}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo stores audit log details not included
// in object for the DeleteOrganization action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{3}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo stores audit log details not included
// in object for the DeleteOrganizationByName action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{4}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo stores audit log details not included
// in objects for the AddOrganizationMember action if the addition fails and details not included in the object
// if the addition succeeds.
type ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId   string                                   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId           string                                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationRole BufAlphaRegistryV1Alpha1OrganizationRole `protobuf:"varint,3,opt,name=organization_role,json=organizationRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole" json:"organization_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{5}
}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) GetOrganizationRole() BufAlphaRegistryV1Alpha1OrganizationRole {
	if x != nil {
		return x.OrganizationRole
	}
	return BufAlphaRegistryV1Alpha1OrganizationRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo stores audit log details not included
// in objects for the UpdateOrganizationMember action if the update fails and details not included in the object
// if the update succeeds.
type ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId   string                                   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId           string                                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationRole BufAlphaRegistryV1Alpha1OrganizationRole `protobuf:"varint,3,opt,name=organization_role,json=organizationRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole" json:"organization_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{6}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) GetOrganizationRole() BufAlphaRegistryV1Alpha1OrganizationRole {
	if x != nil {
		return x.OrganizationRole
	}
	return BufAlphaRegistryV1Alpha1OrganizationRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo stores audit log details not included
// in objects for the RemoveOrganizationMember action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{7}
}

func (x *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo stores audit log details not included
// in actor or object for the UpdateOrganizationSettings action.
type ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId     string                                 `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	RepositoryBaseRole BufAlphaRegistryV1Alpha1RepositoryRole `protobuf:"varint,2,opt,name=repository_base_role,json=repositoryBaseRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryRole" json:"repository_base_role,omitempty"`
	PluginBaseRole     BufAlphaRegistryV1Alpha1PluginRole     `protobuf:"varint,3,opt,name=plugin_base_role,json=pluginBaseRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginRole" json:"plugin_base_role,omitempty"`
	TemplateBaseRole   BufAlphaRegistryV1Alpha1TemplateRole   `protobuf:"varint,4,opt,name=template_base_role,json=templateBaseRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1TemplateRole" json:"template_base_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{8}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) GetRepositoryBaseRole() BufAlphaRegistryV1Alpha1RepositoryRole {
	if x != nil {
		return x.RepositoryBaseRole
	}
	return BufAlphaRegistryV1Alpha1RepositoryRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_ROLE_UNSPECIFIED
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) GetPluginBaseRole() BufAlphaRegistryV1Alpha1PluginRole {
	if x != nil {
		return x.PluginBaseRole
	}
	return BufAlphaRegistryV1Alpha1PluginRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_ROLE_UNSPECIFIED
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) GetTemplateBaseRole() BufAlphaRegistryV1Alpha1TemplateRole {
	if x != nil {
		return x.TemplateBaseRole
	}
	return BufAlphaRegistryV1Alpha1TemplateRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_TEMPLATE_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1CreatePluginInfo stores audit log details not included
// in object for the CreatePlugin action if the creation fails.
type ActionBufAlphaRegistryV1Alpha1CreatePluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner      string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name       string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Visibility BufAlphaRegistryV1Alpha1PluginVisibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVisibility" json:"visibility,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreatePluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreatePluginInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{9}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) GetVisibility() BufAlphaRegistryV1Alpha1PluginVisibility {
	if x != nil {
		return x.Visibility
	}
	return BufAlphaRegistryV1Alpha1PluginVisibility_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_VISIBILITY_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1DeletePluginInfo stores audit log details not included
// in object for the DeletePlugin action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeletePluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeletePluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeletePluginInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{10}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo stores audit log details not included
// in actor or object for the GetTemplateVersion action.
type ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{11}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo stores audit log details not included
// in object for the CreateTemplate action if the creation fails and details not included in the object
// if the creation succeeds.
type ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner         string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name          string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Visibility    BufAlphaRegistryV1Alpha1PluginVisibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVisibility" json:"visibility,omitempty"`
	PluginConfigs []*BufAlphaRegistryV1Alpha1PluginConfig  `protobuf:"bytes,4,rep,name=plugin_configs,json=pluginConfigs,proto3" json:"plugin_configs,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{12}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) GetVisibility() BufAlphaRegistryV1Alpha1PluginVisibility {
	if x != nil {
		return x.Visibility
	}
	return BufAlphaRegistryV1Alpha1PluginVisibility_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_VISIBILITY_UNSPECIFIED
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) GetPluginConfigs() []*BufAlphaRegistryV1Alpha1PluginConfig {
	if x != nil {
		return x.PluginConfigs
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo stores audit log details not included
// in object for the DeleteTemplate action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{13}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo stores audit log details not included
// in object for the CreateTemplateVersion action if the creation fails and details not included in
// the object if the creation succeeds.
type ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TemplateOwner  string                                          `protobuf:"bytes,2,opt,name=template_owner,json=templateOwner,proto3" json:"template_owner,omitempty"`
	TemplateName   string                                          `protobuf:"bytes,3,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	PluginVersions []*BufAlphaRegistryV1Alpha1PluginVersionMapping `protobuf:"bytes,4,rep,name=plugin_versions,json=pluginVersions,proto3" json:"plugin_versions,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{14}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) GetTemplateOwner() string {
	if x != nil {
		return x.TemplateOwner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) GetPluginVersions() []*BufAlphaRegistryV1Alpha1PluginVersionMapping {
	if x != nil {
		return x.PluginVersions
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1PushInfo stores audit log details not included
// in actor or object for the Push action.
type ActionBufAlphaRegistryV1Alpha1PushInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner                string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Repository           string   `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch               string   `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Tags                 []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	LocalModulePinBranch string   `protobuf:"bytes,5,opt,name=local_module_pin_branch,json=localModulePinBranch,proto3" json:"local_module_pin_branch,omitempty"`
	LocalModulePinCommit string   `protobuf:"bytes,6,opt,name=local_module_pin_commit,json=localModulePinCommit,proto3" json:"local_module_pin_commit,omitempty"`
	LocalModulePinDigest string   `protobuf:"bytes,7,opt,name=local_module_pin_digest,json=localModulePinDigest,proto3" json:"local_module_pin_digest,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1PushInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1PushInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1PushInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1PushInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{15}
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetLocalModulePinBranch() string {
	if x != nil {
		return x.LocalModulePinBranch
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetLocalModulePinCommit() string {
	if x != nil {
		return x.LocalModulePinCommit
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1PushInfo) GetLocalModulePinDigest() string {
	if x != nil {
		return x.LocalModulePinDigest
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo stores audit log details not included
// in actor or object for the GetReferenceByName action.
type ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Reference:
	//	*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Branch
	//	*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Tag
	//	*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Commit
	//	*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Track
	Reference isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference `protobuf_oneof:"reference"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{16}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetReference() isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetBranch() *BufAlphaRegistryV1Alpha1RepositoryBranch {
	if x, ok := x.GetReference().(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Branch); ok {
		return x.Branch
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetTag() *BufAlphaRegistryV1Alpha1RepositoryTag {
	if x, ok := x.GetReference().(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Tag); ok {
		return x.Tag
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetCommit() *BufAlphaRegistryV1Alpha1RepositoryCommit {
	if x, ok := x.GetReference().(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) GetTrack() *BufAlphaRegistryV1Alpha1RepositoryTrack {
	if x, ok := x.GetReference().(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Track); ok {
		return x.Track
	}
	return nil
}

type isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference interface {
	isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference()
}

type ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Branch struct {
	Branch *BufAlphaRegistryV1Alpha1RepositoryBranch `protobuf:"bytes,2,opt,name=branch,proto3,oneof"`
}

type ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Tag struct {
	Tag *BufAlphaRegistryV1Alpha1RepositoryTag `protobuf:"bytes,3,opt,name=tag,proto3,oneof"`
}

type ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Commit struct {
	Commit *BufAlphaRegistryV1Alpha1RepositoryCommit `protobuf:"bytes,4,opt,name=commit,proto3,oneof"`
}

type ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Track struct {
	Track *BufAlphaRegistryV1Alpha1RepositoryTrack `protobuf:"bytes,5,opt,name=track,proto3,oneof"`
}

func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Branch) isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference() {
}

func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Tag) isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference() {
}

func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Commit) isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference() {
}

func (*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Track) isActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Reference() {
}

// ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo stores audit log details not included
// in object for the CreateRepositoryBranch action if the creation fails and details not included in
// the object if the creation succeeds.
type ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentBranch string `protobuf:"bytes,2,opt,name=parent_branch,json=parentBranch,proto3" json:"parent_branch,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{17}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) GetParentBranch() string {
	if x != nil {
		return x.ParentBranch
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo stores audit log details not included
// in actor or object for the ListRepositoryCommitsByBranch action.
type ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryBranchName string `protobuf:"bytes,1,opt,name=repository_branch_name,json=repositoryBranchName,proto3" json:"repository_branch_name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{18}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) GetRepositoryBranchName() string {
	if x != nil {
		return x.RepositoryBranchName
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo stores audit log details not included
// in actor or object for the ListRepositoryCommitsOnTrack action.
type ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{19}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo stores audit log details not included
// in actor or object for the ListRepositoryCommitsByReference action.
type ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{20}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo stores audit log details not included
// in actor or object for the GetRepositoryCommitByReference action.
type ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{21}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo stores audit log details not included
// in actor or object for the GetRepositoryCommitBySequenceID action.
type ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryBranchName string `protobuf:"bytes,1,opt,name=repository_branch_name,json=repositoryBranchName,proto3" json:"repository_branch_name,omitempty"`
	CommitSequenceId     int64  `protobuf:"varint,2,opt,name=commit_sequence_id,json=commitSequenceId,proto3" json:"commit_sequence_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{22}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) GetRepositoryBranchName() string {
	if x != nil {
		return x.RepositoryBranchName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo) GetCommitSequenceId() int64 {
	if x != nil {
		return x.CommitSequenceId
	}
	return 0
}

// ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo stores audit log details not included
// in object for the CreateRepositoryTag action if the creation fails and details not included in
// the object if the creation succeeds.
type ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId string `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommitName   string `protobuf:"bytes,3,opt,name=commit_name,json=commitName,proto3" json:"commit_name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{23}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) GetCommitName() string {
	if x != nil {
		return x.CommitName
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo stores audit log details not included
// in object for the CreateRepositoryByFullName action if the creation fails and details not included in
// the object if the creation succeeds.
type ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName   string                             `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Visibility BufAlphaRegistryV1Alpha1Visibility `protobuf:"varint,2,opt,name=visibility,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1Visibility" json:"visibility,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{24}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) GetVisibility() BufAlphaRegistryV1Alpha1Visibility {
	if x != nil {
		return x.Visibility
	}
	return BufAlphaRegistryV1Alpha1Visibility_BUF_ALPHA_REGISTRY_V1_ALPHA1_VISIBILITY_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo stores audit log details not included
// in object for the DeleteRepository action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryId string `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{25}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo stores audit log details not included
// in object for the DeleteRepositoryByFullName action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{26}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo stores audit log details not included
// in object for the DeprecateRepositoryByName action if the deprecation fails.
type ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName          string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepositoryName     string `protobuf:"bytes,2,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	DeprecationMessage string `protobuf:"bytes,3,opt,name=deprecation_message,json=deprecationMessage,proto3" json:"deprecation_message,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{27}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) GetDeprecationMessage() string {
	if x != nil {
		return x.DeprecationMessage
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo stores audit log details not included
// in object for the UndeprecateRepositoryByName action if the undeprecation fails.
type ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName      string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{28}
}

func (x *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo stores audit log details not included
// in actor or object for the GetModulePins action.
type ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleReferences  []*v1alpha1.ModuleReference `protobuf:"bytes,1,rep,name=module_references,json=moduleReferences,proto3" json:"module_references,omitempty"`
	CurrentModulePins []*v1alpha1.ModulePin       `protobuf:"bytes,2,rep,name=current_module_pins,json=currentModulePins,proto3" json:"current_module_pins,omitempty"`
	ModulePinsResults []*v1alpha1.ModulePin       `protobuf:"bytes,3,rep,name=module_pins_results,json=modulePinsResults,proto3" json:"module_pins_results,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{29}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) GetModuleReferences() []*v1alpha1.ModuleReference {
	if x != nil {
		return x.ModuleReferences
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) GetCurrentModulePins() []*v1alpha1.ModulePin {
	if x != nil {
		return x.CurrentModulePins
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) GetModulePinsResults() []*v1alpha1.ModulePin {
	if x != nil {
		return x.ModulePinsResults
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo stores audit log details not included
// in actor or object for the GetLocalModulePins action.
type ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalModuleReferences     []*BufAlphaRegistryV1Alpha1LocalModuleReference     `protobuf:"bytes,1,rep,name=local_module_references,json=localModuleReferences,proto3" json:"local_module_references,omitempty"`
	LocalModuleResolveResults []*BufAlphaRegistryV1Alpha1LocalModuleResolveResult `protobuf:"bytes,2,rep,name=local_module_resolve_results,json=localModuleResolveResults,proto3" json:"local_module_resolve_results,omitempty"`
	Dependencies              []*v1alpha1.ModulePin                               `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{30}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) GetLocalModuleReferences() []*BufAlphaRegistryV1Alpha1LocalModuleReference {
	if x != nil {
		return x.LocalModuleReferences
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) GetLocalModuleResolveResults() []*BufAlphaRegistryV1Alpha1LocalModuleResolveResult {
	if x != nil {
		return x.LocalModuleResolveResults
	}
	return nil
}

func (x *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) GetDependencies() []*v1alpha1.ModulePin {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1SearchInfo stores audit log details not included
// in actor or object for the Search action.
type ActionBufAlphaRegistryV1Alpha1SearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   string                                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Filters []BufAlphaRegistryV1Alpha1SearchFilter `protobuf:"varint,2,rep,packed,name=filters,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1SearchFilter" json:"filters,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1SearchInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1SearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1SearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1SearchInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1SearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1SearchInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1SearchInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{31}
}

func (x *ActionBufAlphaRegistryV1Alpha1SearchInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1SearchInfo) GetFilters() []BufAlphaRegistryV1Alpha1SearchFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1CreateTokenInfo stores audit log details not included
// in actor or object for the CreateToken action.
type ActionBufAlphaRegistryV1Alpha1CreateTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note       string                 `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateTokenInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{32}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo stores audit log details not included
// in objects for the DeleteToken action if the deletion fails.
type ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{33}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1CreateUserInfo stores audit log details not included
// in object for the CreateUser action if the creation fails.
type ActionBufAlphaRegistryV1Alpha1CreateUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateUserInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateUserInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateUserInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateUserInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{34}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateUserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1ListUsersInfo stores audit log details not included
// in actor or object for the ListUsers action.
type ActionBufAlphaRegistryV1Alpha1ListUsersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserStateFilter BufAlphaRegistryV1Alpha1UserState `protobuf:"varint,1,opt,name=user_state_filter,json=userStateFilter,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1UserState" json:"user_state_filter,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1ListUsersInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1ListUsersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListUsersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1ListUsersInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1ListUsersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1ListUsersInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1ListUsersInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{35}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListUsersInfo) GetUserStateFilter() BufAlphaRegistryV1Alpha1UserState {
	if x != nil {
		return x.UserStateFilter
	}
	return BufAlphaRegistryV1Alpha1UserState_BUF_ALPHA_REGISTRY_V1_ALPHA1_USER_STATE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo stores audit log details not included
// in objects for the DeactivateeUser action if the deactivation fails.
type ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{36}
}

func (x *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo stores audit log details not included
// in object for the UpdateUserServerRole action if the update fails and details not included in
// the object if the update succeeds.
type ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerRole BufAlphaRegistryV1Alpha1ServerRole `protobuf:"varint,2,opt,name=server_role,json=serverRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ServerRole" json:"server_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{37}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) GetServerRole() BufAlphaRegistryV1Alpha1ServerRole {
	if x != nil {
		return x.ServerRole
	}
	return BufAlphaRegistryV1Alpha1ServerRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_SERVER_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo stores audit log details not included
// in actor or object for the CreatePluginVersion action.
type ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageDigest      string                                                 `protobuf:"bytes,2,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	RuntimeLibraries []*BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary `protobuf:"bytes,3,rep,name=runtime_libraries,json=runtimeLibraries,proto3" json:"runtime_libraries,omitempty"`
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) Reset() {
	*x = ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{38}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) GetRuntimeLibraries() []*BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary {
	if x != nil {
		return x.RuntimeLibraries
	}
	return nil
}

// ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo stores audit log details
// not included in actor or object for the CreatePluginVersionMetadata action.
type ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageDigest      string                                                 `protobuf:"bytes,2,opt,name=image_digest,json=imageDigest,proto3" json:"image_digest,omitempty"`
	RuntimeLibraries []*BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary `protobuf:"bytes,3,rep,name=runtime_libraries,json=runtimeLibraries,proto3" json:"runtime_libraries,omitempty"`
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) Reset() {
	*x = ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{39}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) GetImageDigest() string {
	if x != nil {
		return x.ImageDigest
	}
	return ""
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) GetRuntimeLibraries() []*BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary {
	if x != nil {
		return x.RuntimeLibraries
	}
	return nil
}

// ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo stores audit log details not included
// in actor or object for the DeletePluginVersion action.
type ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) Reset() {
	*x = ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{40}
}

func (x *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo stores audit log details not included
// in actor or object for the SetRepositoryContributor action.
type ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryRole BufAlphaRegistryV1Alpha1RepositoryRole `protobuf:"varint,1,opt,name=repository_role,json=repositoryRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryRole" json:"repository_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{41}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) GetRepositoryRole() BufAlphaRegistryV1Alpha1RepositoryRole {
	if x != nil {
		return x.RepositoryRole
	}
	return BufAlphaRegistryV1Alpha1RepositoryRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_REPOSITORY_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo stores audit log details not included
// in actor or object for the SetPluginContributor action.
type ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginRole BufAlphaRegistryV1Alpha1PluginRole `protobuf:"varint,1,opt,name=plugin_role,json=pluginRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginRole" json:"plugin_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{42}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) GetPluginRole() BufAlphaRegistryV1Alpha1PluginRole {
	if x != nil {
		return x.PluginRole
	}
	return BufAlphaRegistryV1Alpha1PluginRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_PLUGIN_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo stores audit log details not included
// in actor or object for the SetTemplateContributor action.
type ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateRole BufAlphaRegistryV1Alpha1TemplateRole `protobuf:"varint,1,opt,name=template_role,json=templateRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1TemplateRole" json:"template_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{43}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) GetTemplateRole() BufAlphaRegistryV1Alpha1TemplateRole {
	if x != nil {
		return x.TemplateRole
	}
	return BufAlphaRegistryV1Alpha1TemplateRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_TEMPLATE_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo stores audit log details not included
// in actor or object for the CreateRepositoryTrack action.
type ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track *BufAlphaRegistryV1Alpha1RepositoryTrack `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{44}
}

func (x *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) GetTrack() *BufAlphaRegistryV1Alpha1RepositoryTrack {
	if x != nil {
		return x.Track
	}
	return nil
}

// ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo stores audit log details not included
// in objects for the SetOrganizationMember action.
type ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationRole BufAlphaRegistryV1Alpha1OrganizationRole `protobuf:"varint,1,opt,name=organization_role,json=organizationRole,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole" json:"organization_role,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{45}
}

func (x *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) GetOrganizationRole() BufAlphaRegistryV1Alpha1OrganizationRole {
	if x != nil {
		return x.OrganizationRole
	}
	return BufAlphaRegistryV1Alpha1OrganizationRole_BUF_ALPHA_REGISTRY_V1_ALPHA1_ORGANIZATION_ROLE_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1GetJSONSchema stores audit log details not included
// in objects for the GetJSONSchema action.
type ActionBufAlphaRegistryV1Alpha1GetJSONSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1GetJSONSchema) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1GetJSONSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetJSONSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1GetJSONSchema) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1GetJSONSchema) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1GetJSONSchema.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1GetJSONSchema) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{46}
}

func (x *ActionBufAlphaRegistryV1Alpha1GetJSONSchema) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1Convert stores audit log details not included
// in objects for the Convert action.
type ActionBufAlphaRegistryV1Alpha1Convert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName       string                                `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	RequestFormat  BufAlphaRegistryV1Alpha1ConvertFormat `protobuf:"varint,2,opt,name=request_format,json=requestFormat,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ConvertFormat" json:"request_format,omitempty"`
	ResponseFormat BufAlphaRegistryV1Alpha1ConvertFormat `protobuf:"varint,3,opt,name=response_format,json=responseFormat,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ConvertFormat" json:"response_format,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1Convert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1Convert) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1Convert.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1Convert) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{47}
}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) GetRequestFormat() BufAlphaRegistryV1Alpha1ConvertFormat {
	if x != nil {
		return x.RequestFormat
	}
	return BufAlphaRegistryV1Alpha1ConvertFormat_BUF_ALPHA_REGISTRY_V1_ALPHA1_CONVERT_FORMAT_UNSPECIFIED
}

func (x *ActionBufAlphaRegistryV1Alpha1Convert) GetResponseFormat() BufAlphaRegistryV1Alpha1ConvertFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return BufAlphaRegistryV1Alpha1ConvertFormat_BUF_ALPHA_REGISTRY_V1_ALPHA1_CONVERT_FORMAT_UNSPECIFIED
}

// ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo stores audit log details not included
// in actor or object for the ListTemplatesUserCanAccess action.
type ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{48}
}

func (x *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName stores audit log details not included
// in actor or object for the UpdateRepositorySettingsByName action.
type ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName      string                             `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepositoryName string                             `protobuf:"bytes,2,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	Visibility     BufAlphaRegistryV1Alpha1Visibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1Visibility" json:"visibility,omitempty"`
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) Reset() {
	*x = ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) ProtoMessage() {}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName.ProtoReflect.Descriptor instead.
func (*ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{49}
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) GetVisibility() BufAlphaRegistryV1Alpha1Visibility {
	if x != nil {
		return x.Visibility
	}
	return BufAlphaRegistryV1Alpha1Visibility_BUF_ALPHA_REGISTRY_V1_ALPHA1_VISIBILITY_UNSPECIFIED
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID representing the event.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The actor represents the subject initiating execution
	// of the event.
	//
	// Types that are assignable to Actor:
	//	*Event_User
	//	*Event_Machine
	Actor isEvent_Actor `protobuf_oneof:"actor"`
	// The time the event took place.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// The name of the service to which the request belongs.
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// The method name of the request.
	Method string `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	// The trace ID associated with the request.
	TraceId string `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// The span ID associated with the request.
	SpanId string `protobuf:"bytes,7,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Represents object(s) per event, e.g. for remote generation,
	// both repository, template and all the template's
	// plugins are objects.
	Objects []*Object `protobuf:"bytes,8,rep,name=objects,proto3" json:"objects,omitempty"`
	// Details of any error that occurred upon completion of
	// the event request.
	ErrorMessage string `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Code is unspecified if there was no error.
	ErrorCode v1alpha11.ErrorCode `protobuf:"varint,10,opt,name=error_code,json=errorCode,proto3,enum=buf.alpha.rpc.v1alpha1.ErrorCode" json:"error_code,omitempty"`
	// The type of action that took place to initialize this event.
	Action Action `protobuf:"varint,11,opt,name=action,proto3,enum=buf.alpha.audit.v1alpha1.Action" json:"action,omitempty"`
	// This field is set if any additional metadata is associated with the
	// action type that took place for this event.
	//
	// Types that are assignable to ActionDetails:
	//	*Event_ActionBufAlphaRegistryV1Alpha1DownloadInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetImageInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreatePluginInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeletePluginInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1PushInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1SearchInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateTokenInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateUserInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1ListUsersInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo
	//	*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo
	//	*Event_ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo
	//	*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1GetJsonschema
	//	*Event_ActionBufAlphaRegistryV1Alpha1Convert
	//	*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo
	//	*Event_ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName
	ActionDetails isEvent_ActionDetails `protobuf_oneof:"action_details"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{50}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (m *Event) GetActor() isEvent_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (x *Event) GetUser() *UserActor {
	if x, ok := x.GetActor().(*Event_User); ok {
		return x.User
	}
	return nil
}

func (x *Event) GetMachine() *MachineActor {
	if x, ok := x.GetActor().(*Event_Machine); ok {
		return x.Machine
	}
	return nil
}

func (x *Event) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *Event) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Event) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Event) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Event) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Event) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Event) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *Event) GetErrorCode() v1alpha11.ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return v1alpha11.ErrorCode(0)
}

func (x *Event) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (m *Event) GetActionDetails() isEvent_ActionDetails {
	if m != nil {
		return m.ActionDetails
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DownloadInfo() *ActionBufAlphaRegistryV1Alpha1DownloadInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DownloadInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DownloadInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetImageInfo() *ActionBufAlphaRegistryV1Alpha1GetImageInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetImageInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetImageInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo() *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo() *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo() *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo() *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo() *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo() *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo() *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreatePluginInfo() *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreatePluginInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreatePluginInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeletePluginInfo() *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeletePluginInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeletePluginInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo() *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateTemplateInfo() *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo() *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo() *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1PushInfo() *ActionBufAlphaRegistryV1Alpha1PushInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1PushInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1PushInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo() *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo() *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo() *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo() *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo() *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo() *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo() *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo() *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo() *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo() *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo() *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo() *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetModulePinsInfo() *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo() *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1SearchInfo() *ActionBufAlphaRegistryV1Alpha1SearchInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1SearchInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1SearchInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateTokenInfo() *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateTokenInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateTokenInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeleteTokenInfo() *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateUserInfo() *ActionBufAlphaRegistryV1Alpha1CreateUserInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateUserInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateUserInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1ListUsersInfo() *ActionBufAlphaRegistryV1Alpha1ListUsersInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1ListUsersInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1ListUsersInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1DeactivateUserInfo() *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo() *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo() *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo); ok {
		return x.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo() *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo); ok {
		return x.ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo() *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo() *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo() *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo() *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo); ok {
		return x.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo() *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo() *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1GetJsonschema() *ActionBufAlphaRegistryV1Alpha1GetJSONSchema {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1GetJsonschema); ok {
		return x.ActionBufAlphaRegistryV1Alpha1GetJsonschema
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1Convert() *ActionBufAlphaRegistryV1Alpha1Convert {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1Convert); ok {
		return x.ActionBufAlphaRegistryV1Alpha1Convert
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo() *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo() *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo); ok {
		return x.ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo
	}
	return nil
}

func (x *Event) GetActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName() *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName {
	if x, ok := x.GetActionDetails().(*Event_ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName); ok {
		return x.ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName
	}
	return nil
}

type isEvent_Actor interface {
	isEvent_Actor()
}

type Event_User struct {
	User *UserActor `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type Event_Machine struct {
	Machine *MachineActor `protobuf:"bytes,59,opt,name=machine,proto3,oneof"`
}

func (*Event_User) isEvent_Actor() {}

func (*Event_Machine) isEvent_Actor() {}

type isEvent_ActionDetails interface {
	isEvent_ActionDetails()
}

type Event_ActionBufAlphaRegistryV1Alpha1DownloadInfo struct {
	ActionBufAlphaRegistryV1Alpha1DownloadInfo *ActionBufAlphaRegistryV1Alpha1DownloadInfo `protobuf:"bytes,12,opt,name=action_buf_alpha_registry_v1alpha1_download_info,json=actionBufAlphaRegistryV1alpha1DownloadInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetImageInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetImageInfo *ActionBufAlphaRegistryV1Alpha1GetImageInfo `protobuf:"bytes,13,opt,name=action_buf_alpha_registry_v1alpha1_get_image_info,json=actionBufAlphaRegistryV1alpha1GetImageInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo *ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo `protobuf:"bytes,14,opt,name=action_buf_alpha_registry_v1alpha1_create_organization_info,json=actionBufAlphaRegistryV1alpha1CreateOrganizationInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo `protobuf:"bytes,15,opt,name=action_buf_alpha_registry_v1alpha1_delete_organization_info,json=actionBufAlphaRegistryV1alpha1DeleteOrganizationInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo *ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo `protobuf:"bytes,16,opt,name=action_buf_alpha_registry_v1alpha1_delete_organization_by_name_info,json=actionBufAlphaRegistryV1alpha1DeleteOrganizationByNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo struct {
	ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo *ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo `protobuf:"bytes,17,opt,name=action_buf_alpha_registry_v1alpha1_add_organization_member_info,json=actionBufAlphaRegistryV1alpha1AddOrganizationMemberInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo struct {
	ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo `protobuf:"bytes,18,opt,name=action_buf_alpha_registry_v1alpha1_update_organization_member_info,json=actionBufAlphaRegistryV1alpha1UpdateOrganizationMemberInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo struct {
	ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo *ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo `protobuf:"bytes,19,opt,name=action_buf_alpha_registry_v1alpha1_remove_organization_member_info,json=actionBufAlphaRegistryV1alpha1RemoveOrganizationMemberInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo struct {
	ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo *ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo `protobuf:"bytes,20,opt,name=action_buf_alpha_registry_v1alpha1_update_organization_settings_info,json=actionBufAlphaRegistryV1alpha1UpdateOrganizationSettingsInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreatePluginInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreatePluginInfo *ActionBufAlphaRegistryV1Alpha1CreatePluginInfo `protobuf:"bytes,21,opt,name=action_buf_alpha_registry_v1alpha1_create_plugin_info,json=actionBufAlphaRegistryV1alpha1CreatePluginInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeletePluginInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeletePluginInfo *ActionBufAlphaRegistryV1Alpha1DeletePluginInfo `protobuf:"bytes,22,opt,name=action_buf_alpha_registry_v1alpha1_delete_plugin_info,json=actionBufAlphaRegistryV1alpha1DeletePluginInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo *ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo `protobuf:"bytes,23,opt,name=action_buf_alpha_registry_v1alpha1_get_template_version_info,json=actionBufAlphaRegistryV1alpha1GetTemplateVersionInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo *ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo `protobuf:"bytes,24,opt,name=action_buf_alpha_registry_v1alpha1_create_template_info,json=actionBufAlphaRegistryV1alpha1CreateTemplateInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo *ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo `protobuf:"bytes,25,opt,name=action_buf_alpha_registry_v1alpha1_delete_template_info,json=actionBufAlphaRegistryV1alpha1DeleteTemplateInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo *ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo `protobuf:"bytes,26,opt,name=action_buf_alpha_registry_v1alpha1_create_template_version_info,json=actionBufAlphaRegistryV1alpha1CreateTemplateVersionInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1PushInfo struct {
	ActionBufAlphaRegistryV1Alpha1PushInfo *ActionBufAlphaRegistryV1Alpha1PushInfo `protobuf:"bytes,27,opt,name=action_buf_alpha_registry_v1alpha1_push_info,json=actionBufAlphaRegistryV1alpha1PushInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo *ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo `protobuf:"bytes,28,opt,name=action_buf_alpha_registry_v1alpha1_get_reference_by_name_info,json=actionBufAlphaRegistryV1alpha1GetReferenceByNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo *ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo `protobuf:"bytes,29,opt,name=action_buf_alpha_registry_v1alpha1_create_repository_branch_info,json=actionBufAlphaRegistryV1alpha1CreateRepositoryBranchInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo struct {
	ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo `protobuf:"bytes,30,opt,name=action_buf_alpha_registry_v1alpha1_list_repository_commits_by_branch_info,json=actionBufAlphaRegistryV1alpha1ListRepositoryCommitsByBranchInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo struct {
	ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo `protobuf:"bytes,31,opt,name=action_buf_alpha_registry_v1alpha1_list_repository_commits_by_reference_info,json=actionBufAlphaRegistryV1alpha1ListRepositoryCommitsByReferenceInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo `protobuf:"bytes,32,opt,name=action_buf_alpha_registry_v1alpha1_get_repository_commit_by_reference_info,json=actionBufAlphaRegistryV1alpha1GetRepositoryCommitByReferenceInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo *ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo `protobuf:"bytes,33,opt,name=action_buf_alpha_registry_v1alpha1_get_repository_commit_by_sequence_id_info,json=actionBufAlphaRegistryV1alpha1GetRepositoryCommitBySequenceIdInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo `protobuf:"bytes,34,opt,name=action_buf_alpha_registry_v1alpha1_create_repository_tag_info,json=actionBufAlphaRegistryV1alpha1CreateRepositoryTagInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo *ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo `protobuf:"bytes,35,opt,name=action_buf_alpha_registry_v1alpha1_create_repository_by_full_name_info,json=actionBufAlphaRegistryV1alpha1CreateRepositoryByFullNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo `protobuf:"bytes,36,opt,name=action_buf_alpha_registry_v1alpha1_delete_repository_info,json=actionBufAlphaRegistryV1alpha1DeleteRepositoryInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo *ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo `protobuf:"bytes,37,opt,name=action_buf_alpha_registry_v1alpha1_delete_repository_by_full_name_info,json=actionBufAlphaRegistryV1alpha1DeleteRepositoryByFullNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo *ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo `protobuf:"bytes,38,opt,name=action_buf_alpha_registry_v1alpha1_deprecate_repository_by_name_info,json=actionBufAlphaRegistryV1alpha1DeprecateRepositoryByNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo struct {
	ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo *ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo `protobuf:"bytes,39,opt,name=action_buf_alpha_registry_v1alpha1_undeprecate_repository_by_name_info,json=actionBufAlphaRegistryV1alpha1UndeprecateRepositoryByNameInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo *ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo `protobuf:"bytes,40,opt,name=action_buf_alpha_registry_v1alpha1_get_module_pins_info,json=actionBufAlphaRegistryV1alpha1GetModulePinsInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo struct {
	ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo *ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo `protobuf:"bytes,41,opt,name=action_buf_alpha_registry_v1alpha1_get_local_module_pins_info,json=actionBufAlphaRegistryV1alpha1GetLocalModulePinsInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1SearchInfo struct {
	ActionBufAlphaRegistryV1Alpha1SearchInfo *ActionBufAlphaRegistryV1Alpha1SearchInfo `protobuf:"bytes,42,opt,name=action_buf_alpha_registry_v1alpha1_search_info,json=actionBufAlphaRegistryV1alpha1SearchInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateTokenInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateTokenInfo *ActionBufAlphaRegistryV1Alpha1CreateTokenInfo `protobuf:"bytes,43,opt,name=action_buf_alpha_registry_v1alpha1_create_token_info,json=actionBufAlphaRegistryV1alpha1CreateTokenInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo *ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo `protobuf:"bytes,44,opt,name=action_buf_alpha_registry_v1alpha1_delete_token_info,json=actionBufAlphaRegistryV1alpha1DeleteTokenInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateUserInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateUserInfo *ActionBufAlphaRegistryV1Alpha1CreateUserInfo `protobuf:"bytes,45,opt,name=action_buf_alpha_registry_v1alpha1_create_user_info,json=actionBufAlphaRegistryV1alpha1CreateUserInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1ListUsersInfo struct {
	ActionBufAlphaRegistryV1Alpha1ListUsersInfo *ActionBufAlphaRegistryV1Alpha1ListUsersInfo `protobuf:"bytes,46,opt,name=action_buf_alpha_registry_v1alpha1_list_users_info,json=actionBufAlphaRegistryV1alpha1ListUsersInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo struct {
	ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo *ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo `protobuf:"bytes,47,opt,name=action_buf_alpha_registry_v1alpha1_deactivate_user_info,json=actionBufAlphaRegistryV1alpha1DeactivateUserInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo struct {
	ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo *ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo `protobuf:"bytes,48,opt,name=action_buf_alpha_registry_v1alpha1_update_user_server_role_info,json=actionBufAlphaRegistryV1alpha1UpdateUserServerRoleInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo struct {
	ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo `protobuf:"bytes,49,opt,name=action_buf_alpha_registryinternal_v1alpha1_create_plugin_version_info,json=actionBufAlphaRegistryinternalV1alpha1CreatePluginVersionInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo struct {
	ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo *ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo `protobuf:"bytes,50,opt,name=action_buf_alpha_registryinternal_v1alpha1_delete_plugin_version_info,json=actionBufAlphaRegistryinternalV1alpha1DeletePluginVersionInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo struct {
	ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo *ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo `protobuf:"bytes,51,opt,name=action_buf_alpha_registry_v1alpha1_set_repository_contributor_info,json=actionBufAlphaRegistryV1alpha1SetRepositoryContributorInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo struct {
	ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo *ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo `protobuf:"bytes,52,opt,name=action_buf_alpha_registry_v1alpha1_set_plugin_contributor_info,json=actionBufAlphaRegistryV1alpha1SetPluginContributorInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo struct {
	ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo *ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo `protobuf:"bytes,53,opt,name=action_buf_alpha_registry_v1alpha1_set_template_contributor_info,json=actionBufAlphaRegistryV1alpha1SetTemplateContributorInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo struct {
	ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo *ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo `protobuf:"bytes,54,opt,name=action_buf_alpha_registryinternal_v1alpha1_create_plugin_version_metadata_info,json=actionBufAlphaRegistryinternalV1alpha1CreatePluginVersionMetadataInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo struct {
	ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo *ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo `protobuf:"bytes,55,opt,name=action_buf_alpha_registry_v1alpha1_create_repository_track_info,json=actionBufAlphaRegistryV1alpha1CreateRepositoryTrackInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo struct {
	ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo *ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo `protobuf:"bytes,56,opt,name=action_buf_alpha_registry_v1alpha1_set_organization_member_info,json=actionBufAlphaRegistryV1alpha1SetOrganizationMemberInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1GetJsonschema struct {
	ActionBufAlphaRegistryV1Alpha1GetJsonschema *ActionBufAlphaRegistryV1Alpha1GetJSONSchema `protobuf:"bytes,57,opt,name=action_buf_alpha_registry_v1alpha1_get_jsonschema,json=actionBufAlphaRegistryV1alpha1GetJsonschema,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1Convert struct {
	ActionBufAlphaRegistryV1Alpha1Convert *ActionBufAlphaRegistryV1Alpha1Convert `protobuf:"bytes,58,opt,name=action_buf_alpha_registry_v1alpha1_convert,json=actionBufAlphaRegistryV1alpha1Convert,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo struct {
	ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo *ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo `protobuf:"bytes,60,opt,name=action_buf_alpha_registry_v1alpha1_list_repository_commits_on_track_info,json=actionBufAlphaRegistryV1alpha1ListRepositoryCommitsOnTrackInfo,proto3,oneof"` // machine has id 59
}

type Event_ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo struct {
	ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo *ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo `protobuf:"bytes,61,opt,name=action_buf_alpha_registry_v1alpha1_list_templates_user_can_access_info,json=actionBufAlphaRegistryV1alpha1ListTemplatesUserCanAccessInfo,proto3,oneof"`
}

type Event_ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName struct {
	ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName *ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName `protobuf:"bytes,62,opt,name=action_buf_alpha_registry_v1alpha1_update_repository_settings_by_name,json=actionBufAlphaRegistryV1alpha1UpdateRepositorySettingsByName,proto3,oneof"`
}

func (*Event_ActionBufAlphaRegistryV1Alpha1DownloadInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetImageInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreatePluginInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeletePluginInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1PushInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1SearchInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateTokenInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateUserInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1ListUsersInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1GetJsonschema) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1Convert) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo) isEvent_ActionDetails() {
}

func (*Event_ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo) isEvent_ActionDetails() {}

func (*Event_ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName) isEvent_ActionDetails() {}

type UserActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	SourceIp  string `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	Anonymous bool   `protobuf:"varint,4,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	Subject   string `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *UserActor) Reset() {
	*x = UserActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActor) ProtoMessage() {}

func (x *UserActor) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActor.ProtoReflect.Descriptor instead.
func (*UserActor) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{51}
}

func (x *UserActor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserActor) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserActor) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *UserActor) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *UserActor) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type MachineActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *MachineActor) Reset() {
	*x = MachineActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineActor) ProtoMessage() {}

func (x *MachineActor) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineActor.ProtoReflect.Descriptor instead.
func (*MachineActor) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{52}
}

func (x *MachineActor) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type UserObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Subject  string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *UserObject) Reset() {
	*x = UserObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserObject) ProtoMessage() {}

func (x *UserObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserObject.ProtoReflect.Descriptor instead.
func (*UserObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{53}
}

func (x *UserObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserObject) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserObject) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type OrganizationObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OrganizationObject) Reset() {
	*x = OrganizationObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationObject) ProtoMessage() {}

func (x *OrganizationObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationObject.ProtoReflect.Descriptor instead.
func (*OrganizationObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{54}
}

func (x *OrganizationObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrganizationObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RepositoryObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId   string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName string `protobuf:"bytes,4,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Public    bool   `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *RepositoryObject) Reset() {
	*x = RepositoryObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryObject) ProtoMessage() {}

func (x *RepositoryObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryObject.ProtoReflect.Descriptor instead.
func (*RepositoryObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{55}
}

func (x *RepositoryObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepositoryObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepositoryObject) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *RepositoryObject) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *RepositoryObject) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type PluginObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId   string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName string `protobuf:"bytes,4,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Public    bool   `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *PluginObject) Reset() {
	*x = PluginObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginObject) ProtoMessage() {}

func (x *PluginObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginObject.ProtoReflect.Descriptor instead.
func (*PluginObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{56}
}

func (x *PluginObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginObject) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PluginObject) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *PluginObject) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type TemplateObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId   string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName string `protobuf:"bytes,4,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Public    bool   `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *TemplateObject) Reset() {
	*x = TemplateObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateObject) ProtoMessage() {}

func (x *TemplateObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateObject.ProtoReflect.Descriptor instead.
func (*TemplateObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{57}
}

func (x *TemplateObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TemplateObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateObject) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *TemplateObject) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *TemplateObject) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type TokenObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TokenObject) Reset() {
	*x = TokenObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenObject) ProtoMessage() {}

func (x *TokenObject) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenObject.ProtoReflect.Descriptor instead.
func (*TokenObject) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{58}
}

func (x *TokenObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Object_User
	//	*Object_Organization
	//	*Object_Repository
	//	*Object_Plugin
	//	*Object_Template
	//	*Object_Token
	Type isObject_Type `protobuf_oneof:"type"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP(), []int{59}
}

func (m *Object) GetType() isObject_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Object) GetUser() *UserObject {
	if x, ok := x.GetType().(*Object_User); ok {
		return x.User
	}
	return nil
}

func (x *Object) GetOrganization() *OrganizationObject {
	if x, ok := x.GetType().(*Object_Organization); ok {
		return x.Organization
	}
	return nil
}

func (x *Object) GetRepository() *RepositoryObject {
	if x, ok := x.GetType().(*Object_Repository); ok {
		return x.Repository
	}
	return nil
}

func (x *Object) GetPlugin() *PluginObject {
	if x, ok := x.GetType().(*Object_Plugin); ok {
		return x.Plugin
	}
	return nil
}

func (x *Object) GetTemplate() *TemplateObject {
	if x, ok := x.GetType().(*Object_Template); ok {
		return x.Template
	}
	return nil
}

func (x *Object) GetToken() *TokenObject {
	if x, ok := x.GetType().(*Object_Token); ok {
		return x.Token
	}
	return nil
}

type isObject_Type interface {
	isObject_Type()
}

type Object_User struct {
	User *UserObject `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type Object_Organization struct {
	Organization *OrganizationObject `protobuf:"bytes,2,opt,name=organization,proto3,oneof"`
}

type Object_Repository struct {
	Repository *RepositoryObject `protobuf:"bytes,3,opt,name=repository,proto3,oneof"`
}

type Object_Plugin struct {
	Plugin *PluginObject `protobuf:"bytes,4,opt,name=plugin,proto3,oneof"`
}

type Object_Template struct {
	Template *TemplateObject `protobuf:"bytes,5,opt,name=template,proto3,oneof"`
}

type Object_Token struct {
	Token *TokenObject `protobuf:"bytes,6,opt,name=token,proto3,oneof"`
}

func (*Object_User) isObject_Type() {}

func (*Object_Organization) isObject_Type() {}

func (*Object_Repository) isObject_Type() {}

func (*Object_Plugin) isObject_Type() {}

func (*Object_Template) isObject_Type() {}

func (*Object_Token) isObject_Type() {}

var File_buf_alpha_audit_v1alpha1_envelope_proto protoreflect.FileDescriptor

var file_buf_alpha_audit_v1alpha1_envelope_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x26, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x2a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a,
	0x0a, 0x2a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x34, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x34, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x3a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x37, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x3a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x11, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x3a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x3c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x6c, 0x0a, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x5a, 0x0a, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x34, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02,
	0x0a, 0x30, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x65, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x5c, 0x0a, 0x30, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x37, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6f, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x26, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x70, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a,
	0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x34, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5c, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x53, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x5c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x59, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x38, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x77, 0x0a, 0x3f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x3e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x62, 0x0a, 0x42, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x40,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x41, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x35, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x3c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x59, 0x0a, 0x32, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x3c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x3b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x3d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x6e, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8e, 0x03, 0x0a,
	0x34, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x28, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x58, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x2d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a,
	0x2d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x2c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x2b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4b,
	0x0a, 0x30, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x36,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xf2,
	0x01, 0x0a, 0x3d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x10,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x53, 0x0a, 0x3d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x3a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x36, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0a, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x38, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x37,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x22, 0xaa, 0x01, 0x0a, 0x37, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x4b, 0x0a,
	0x2b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47,
	0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x25, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x5c, 0x0a, 0x3c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xe4, 0x01, 0x0a, 0x3c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xf5, 0x56, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x30, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x2a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xad, 0x01, 0x0a, 0x31, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x2a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xcb, 0x01, 0x0a, 0x3b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x34, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xcb, 0x01, 0x0a, 0x3b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x34, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xdf, 0x01, 0x0a, 0x43, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd5, 0x01, 0x0a, 0x3f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0xde, 0x01, 0x0a, 0x42, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xde, 0x01, 0x0a, 0x42, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0xe4, 0x01, 0x0a, 0x44, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb9, 0x01, 0x0a, 0x35, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb9, 0x01, 0x0a, 0x35, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xcc, 0x01, 0x0a, 0x3c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x34, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0xbf, 0x01, 0x0a, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x30, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0xbf, 0x01, 0x0a, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x30, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0xd5, 0x01, 0x0a, 0x3f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xa0, 0x01, 0x0a, 0x2c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x26, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xcd,
	0x01, 0x0a, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x34, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd8,
	0x01, 0x0a, 0x40, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x38, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xef, 0x01, 0x0a, 0x49, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xf8, 0x01, 0x0a, 0x4c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x42, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xf2, 0x01, 0x0a, 0x4a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x40, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xf6, 0x01, 0x0a, 0x4c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42,
	0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x41, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xcf, 0x01, 0x0a, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x35, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe6, 0x01, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x3c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0xc5, 0x01, 0x0a, 0x39, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x32, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe6, 0x01, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x3c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xe2, 0x01, 0x0a, 0x44, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe8, 0x01, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x55, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xbd, 0x01, 0x0a, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xcd, 0x01, 0x0a, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x34, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xa6, 0x01, 0x0a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x28, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb6, 0x01, 0x0a, 0x34, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0xb6, 0x01, 0x0a, 0x34, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75,
	0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x2d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xb3, 0x01, 0x0a, 0x33,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x2c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0xb0, 0x01, 0x0a, 0x32, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x2b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xbf, 0x01, 0x0a, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x30, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd3, 0x01, 0x0a, 0x3f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x36, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe7, 0x01, 0x0a,
	0x45, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe7, 0x01, 0x0a, 0x45, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xde, 0x01, 0x0a, 0x42, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0xd2, 0x01, 0x0a, 0x3e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x36,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd8, 0x01, 0x0a, 0x40, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x38, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x80, 0x02, 0x0a, 0x4e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x45, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd5, 0x01, 0x0a, 0x3f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x37, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xd5, 0x01, 0x0a,
	0x3f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x37, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xaf, 0x01, 0x0a, 0x31, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x01, 0x52, 0x2b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x9c, 0x01, 0x0a, 0x2a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x48, 0x01, 0x52, 0x25,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0xec, 0x01, 0x0a, 0x48, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x01, 0x52, 0x3e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe6, 0x01, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x3c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xe5, 0x01,
	0x0a, 0x45, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x5f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x3c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x31, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x38, 0x0a, 0x12, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x84, 0x01, 0x0a, 0x0c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x1d, 0x0a, 0x0b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x06, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x52, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x2a, 0xd5, 0x65, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x46, 0x0a, 0x42, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x4e, 0x0a, 0x4a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x5d, 0x0a, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x56,
	0x0a, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x04, 0x12, 0x58, 0x0a, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x05,
	0x12, 0x4a, 0x0a, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x54, 0x0a, 0x50,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x12, 0x56, 0x0a, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x5b, 0x0a, 0x57, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x0a, 0x12, 0x52, 0x0a, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e,
	0x5f, 0x53, 0x45, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x0b, 0x12, 0x54, 0x0a, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0c, 0x12, 0x56, 0x0a, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x0d, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x52, 0x0a, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x50,
	0x0a, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x11,
	0x12, 0x4e, 0x0a, 0x4a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x12,
	0x12, 0x4c, 0x0a, 0x48, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x13, 0x12, 0x4a,
	0x0a, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x14, 0x12, 0x55, 0x0a, 0x51, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x10,
	0x15, 0x12, 0x4d, 0x0a, 0x49, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x16,
	0x12, 0x43, 0x0a, 0x3f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x47, 0x0a, 0x43, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x4f, 0x43,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x10, 0x18, 0x12, 0x4c,
	0x0a, 0x48, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x4d, 0x0a, 0x49,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x41, 0x0a, 0x3d, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x1b, 0x12, 0x49,
	0x0a, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x53, 0x10, 0x1c, 0x12, 0x4a, 0x0a, 0x46, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x4d, 0x0a, 0x49, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x55, 0x0a, 0x51, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x20, 0x12, 0x4f, 0x0a, 0x4b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x21, 0x12, 0x54, 0x0a,
	0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x22, 0x12, 0x50, 0x0a, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x23, 0x12, 0x50, 0x0a, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x58, 0x0a, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x25, 0x12, 0x54, 0x0a, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x26, 0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x27,
	0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x56, 0x0a, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10,
	0x29, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x2a, 0x12, 0x47, 0x0a, 0x43,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x2b, 0x12, 0x43, 0x0a, 0x3f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x53, 0x10, 0x2c, 0x12, 0x48, 0x0a, 0x44, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x53, 0x10, 0x2d, 0x12, 0x50, 0x0a, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x49, 0x4e, 0x53, 0x10, 0x2e, 0x12, 0x4b, 0x0a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c,
	0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x2f, 0x12, 0x44, 0x0a, 0x40, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x30, 0x12, 0x41, 0x0a, 0x3d, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x31, 0x12, 0x44, 0x0a, 0x40,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e,
	0x10, 0x32, 0x12, 0x43, 0x0a, 0x3f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x33, 0x12, 0x45, 0x0a, 0x41, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x34, 0x12, 0x4a,
	0x0a, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x35, 0x12, 0x52, 0x0a, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x36, 0x12, 0x4b,
	0x0a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x37, 0x12, 0x4d, 0x0a, 0x49, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x38, 0x12, 0x46, 0x0a, 0x42, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x39, 0x12, 0x46, 0x0a, 0x42, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x3a, 0x12, 0x4e, 0x0a, 0x4a, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x12, 0x39, 0x0a, 0x35, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x55, 0x53, 0x48, 0x10, 0x3c, 0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x3d, 0x12, 0x54,
	0x0a, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x53, 0x10, 0x3e, 0x12, 0x5c, 0x0a, 0x58, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53,
	0x10, 0x3f, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0x40, 0x12, 0x5b, 0x0a,
	0x57, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x41, 0x12, 0x58, 0x0a, 0x54, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x53, 0x10, 0x42, 0x12, 0x4f, 0x0a, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x43, 0x12, 0x5a, 0x0a, 0x56, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10,
	0x44, 0x12, 0x5a, 0x0a, 0x56, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x53, 0x10, 0x45, 0x12, 0x63, 0x0a,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x10, 0x46, 0x12, 0x66, 0x0a, 0x62, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x47, 0x12, 0x64, 0x0a, 0x60, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x48,
	0x12, 0x66, 0x0a, 0x62, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x49, 0x12, 0x54, 0x0a, 0x50, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x4a, 0x12, 0x53,
	0x0a, 0x4f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47,
	0x53, 0x10, 0x4b, 0x12, 0x49, 0x0a, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x4c, 0x12, 0x56,
	0x0a, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x4d, 0x12, 0x4c, 0x0a, 0x48, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x49,
	0x45, 0x53, 0x10, 0x4e, 0x12, 0x51, 0x0a, 0x4d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x4f, 0x12, 0x5c, 0x0a, 0x58, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x49, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x50, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x51,
	0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x52, 0x12, 0x4c, 0x0a, 0x48, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x53, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x54, 0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x55, 0x12, 0x59, 0x0a,
	0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x42,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x56, 0x12, 0x58, 0x0a, 0x54, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x49, 0x45, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x57, 0x12, 0x47, 0x0a, 0x43, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x53, 0x10, 0x58, 0x12, 0x53, 0x0a, 0x4f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x53, 0x10, 0x59,
	0x12, 0x3d, 0x0a, 0x39, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x5a, 0x12,
	0x42, 0x0a, 0x3e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x5b, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x5c, 0x12, 0x42, 0x0a, 0x3e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x5d, 0x12, 0x41, 0x0a, 0x3d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x5e, 0x12, 0x40, 0x0a, 0x3c, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x5f, 0x12, 0x3d, 0x0a,
	0x39, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x60, 0x12, 0x49, 0x0a, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x61, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x62, 0x12, 0x4c, 0x0a, 0x48, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x53, 0x10, 0x63, 0x12, 0x40, 0x0a, 0x3c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x64, 0x12, 0x44, 0x0a, 0x40, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x65, 0x12, 0x4c,
	0x0a, 0x48, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x66, 0x12, 0x40, 0x0a, 0x3c,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x67, 0x12, 0x5d,
	0x0a, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x5d, 0x0a,
	0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x59, 0x0a, 0x55,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x6a, 0x12, 0x4a, 0x0a, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x47,
	0x53, 0x10, 0x6b, 0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x6c, 0x12, 0x4f, 0x0a, 0x4b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x6d, 0x12, 0x51, 0x0a,
	0x4d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x6e,
	0x12, 0x55, 0x0a, 0x51, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x6f, 0x12, 0x4d, 0x0a, 0x49, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x4f, 0x52, 0x10, 0x70, 0x12, 0x4f, 0x0a, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c,
	0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x71, 0x12, 0x5d, 0x0a, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x4f, 0x52, 0x53, 0x10, 0x72, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5a, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10,
	0x73, 0x12, 0x5b, 0x0a, 0x57, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x74, 0x12, 0x58,
	0x0a, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x75, 0x12, 0x57, 0x0a, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10,
	0x76, 0x12, 0x63, 0x0a, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x77, 0x12, 0x5b, 0x0a, 0x57, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x47, 0x4f, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x47, 0x4f,
	0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x78, 0x12, 0x43, 0x0a, 0x3f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f,
	0x58, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x79, 0x12, 0x58, 0x0a, 0x54, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53,
	0x10, 0x7a, 0x12, 0x5d, 0x0a, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10,
	0x7b, 0x12, 0x54, 0x0a, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x7c, 0x12, 0x59, 0x0a, 0x55, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53,
	0x10, 0x7d, 0x12, 0x56, 0x0a, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x7e, 0x12, 0x5b, 0x0a, 0x57, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x7f, 0x12, 0x61, 0x0a, 0x5c, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x80, 0x01, 0x12, 0x67, 0x0a, 0x62, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x81, 0x01, 0x12, 0x56, 0x0a, 0x51, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x82, 0x01, 0x12, 0x54, 0x0a, 0x4f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x83,
	0x01, 0x12, 0x50, 0x0a, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x84, 0x01, 0x12, 0x52, 0x0a, 0x4d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x85, 0x01, 0x12, 0x4e, 0x0a, 0x49, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x86, 0x01, 0x12, 0x50, 0x0a, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x87, 0x01, 0x12, 0x48, 0x0a, 0x43, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e,
	0x10, 0x88, 0x01, 0x12, 0x4a, 0x0a, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x89, 0x01, 0x12,
	0x4a, 0x0a, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x01, 0x12, 0x4c, 0x0a, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x8b, 0x01, 0x12, 0x55, 0x0a, 0x50, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x8c, 0x01,
	0x12, 0x61, 0x0a, 0x5c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x47, 0x45, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x8d, 0x01, 0x12, 0x53, 0x0a, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x8e, 0x01, 0x12, 0x48, 0x0a, 0x43, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x8f, 0x01, 0x12, 0x4a, 0x0a, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x49, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x90, 0x01, 0x12, 0x79,
	0x0a, 0x74, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x91, 0x01, 0x12, 0x7a, 0x0a, 0x75, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x42,
	0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x10, 0x92, 0x01, 0x12, 0x5e, 0x0a, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x93, 0x01, 0x12, 0x4c, 0x0a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x4a, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x10, 0x94, 0x01, 0x12, 0x71, 0x0a, 0x6c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x95, 0x01, 0x12, 0x40, 0x0a, 0x3b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x96, 0x01, 0x12, 0x56, 0x0a, 0x51, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x97, 0x01,
	0x12, 0x6d, 0x0a, 0x68, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31,
	0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x98, 0x01, 0x12,
	0x63, 0x0a, 0x5e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c,
	0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f,
	0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x10, 0x99, 0x01, 0x12, 0x56, 0x0a, 0x51, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x9a, 0x01, 0x12, 0x5e, 0x0a, 0x59,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x9b, 0x01, 0x42, 0x85, 0x02, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0d, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x41, 0x41, 0xaa, 0x02, 0x18, 0x42, 0x75, 0x66, 0x2e,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x18, 0x42, 0x75, 0x66, 0x5c, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x5c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2,
	0x02, 0x24, 0x42, 0x75, 0x66, 0x5c, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x42, 0x75, 0x66, 0x3a, 0x3a, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x3a, 0x3a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescOnce sync.Once
	file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescData = file_buf_alpha_audit_v1alpha1_envelope_proto_rawDesc
)

func file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescGZIP() []byte {
	file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescOnce.Do(func() {
		file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescData)
	})
	return file_buf_alpha_audit_v1alpha1_envelope_proto_rawDescData
}

var file_buf_alpha_audit_v1alpha1_envelope_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_buf_alpha_audit_v1alpha1_envelope_proto_goTypes = []interface{}{
	(Action)(0), // 0: buf.alpha.audit.v1alpha1.Action
	(*ActionBufAlphaRegistryV1Alpha1DownloadInfo)(nil),                            // 1: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DownloadInfo
	(*ActionBufAlphaRegistryV1Alpha1GetImageInfo)(nil),                            // 2: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetImageInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo)(nil),                  // 3: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo)(nil),                  // 4: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo)(nil),            // 5: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo
	(*ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo)(nil),               // 6: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo
	(*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo)(nil),            // 7: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo
	(*ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo)(nil),            // 8: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo
	(*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo)(nil),          // 9: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo
	(*ActionBufAlphaRegistryV1Alpha1CreatePluginInfo)(nil),                        // 10: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreatePluginInfo
	(*ActionBufAlphaRegistryV1Alpha1DeletePluginInfo)(nil),                        // 11: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeletePluginInfo
	(*ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo)(nil),                  // 12: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo)(nil),                      // 13: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo)(nil),                      // 14: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo)(nil),               // 15: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo
	(*ActionBufAlphaRegistryV1Alpha1PushInfo)(nil),                                // 16: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1PushInfo
	(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo)(nil),                  // 17: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo)(nil),              // 18: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo
	(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo)(nil),       // 19: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo
	(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo)(nil),        // 20: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo
	(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo)(nil),    // 21: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo
	(*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo)(nil),      // 22: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo
	(*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo)(nil),     // 23: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo)(nil),                 // 24: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo)(nil),          // 25: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo)(nil),                    // 26: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo)(nil),          // 27: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo
	(*ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo)(nil),           // 28: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo
	(*ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo)(nil),         // 29: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo
	(*ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo)(nil),                       // 30: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo
	(*ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo)(nil),                  // 31: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo
	(*ActionBufAlphaRegistryV1Alpha1SearchInfo)(nil),                              // 32: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SearchInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateTokenInfo)(nil),                         // 33: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTokenInfo
	(*ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo)(nil),                         // 34: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateUserInfo)(nil),                          // 35: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateUserInfo
	(*ActionBufAlphaRegistryV1Alpha1ListUsersInfo)(nil),                           // 36: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListUsersInfo
	(*ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo)(nil),                      // 37: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo
	(*ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo)(nil),                // 38: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo
	(*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo)(nil),         // 39: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo
	(*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo)(nil), // 40: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo
	(*ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo)(nil),         // 41: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo
	(*ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo)(nil),            // 42: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo
	(*ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo)(nil),                // 43: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo
	(*ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo)(nil),              // 44: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo
	(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo)(nil),               // 45: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo
	(*ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo)(nil),               // 46: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo
	(*ActionBufAlphaRegistryV1Alpha1GetJSONSchema)(nil),                           // 47: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetJSONSchema
	(*ActionBufAlphaRegistryV1Alpha1Convert)(nil),                                 // 48: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1Convert
	(*ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo)(nil),          // 49: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo
	(*ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName)(nil),          // 50: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName
	(*Event)(nil),                                               // 51: buf.alpha.audit.v1alpha1.Event
	(*UserActor)(nil),                                           // 52: buf.alpha.audit.v1alpha1.UserActor
	(*MachineActor)(nil),                                        // 53: buf.alpha.audit.v1alpha1.MachineActor
	(*UserObject)(nil),                                          // 54: buf.alpha.audit.v1alpha1.UserObject
	(*OrganizationObject)(nil),                                  // 55: buf.alpha.audit.v1alpha1.OrganizationObject
	(*RepositoryObject)(nil),                                    // 56: buf.alpha.audit.v1alpha1.RepositoryObject
	(*PluginObject)(nil),                                        // 57: buf.alpha.audit.v1alpha1.PluginObject
	(*TemplateObject)(nil),                                      // 58: buf.alpha.audit.v1alpha1.TemplateObject
	(*TokenObject)(nil),                                         // 59: buf.alpha.audit.v1alpha1.TokenObject
	(*Object)(nil),                                              // 60: buf.alpha.audit.v1alpha1.Object
	(BufAlphaRegistryV1Alpha1OrganizationRole)(0),               // 61: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole
	(BufAlphaRegistryV1Alpha1RepositoryRole)(0),                 // 62: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryRole
	(BufAlphaRegistryV1Alpha1PluginRole)(0),                     // 63: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginRole
	(BufAlphaRegistryV1Alpha1TemplateRole)(0),                   // 64: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1TemplateRole
	(BufAlphaRegistryV1Alpha1PluginVisibility)(0),               // 65: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVisibility
	(*BufAlphaRegistryV1Alpha1PluginConfig)(nil),                // 66: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginConfig
	(*BufAlphaRegistryV1Alpha1PluginVersionMapping)(nil),        // 67: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVersionMapping
	(*BufAlphaRegistryV1Alpha1RepositoryBranch)(nil),            // 68: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryBranch
	(*BufAlphaRegistryV1Alpha1RepositoryTag)(nil),               // 69: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryTag
	(*BufAlphaRegistryV1Alpha1RepositoryCommit)(nil),            // 70: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryCommit
	(*BufAlphaRegistryV1Alpha1RepositoryTrack)(nil),             // 71: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryTrack
	(BufAlphaRegistryV1Alpha1Visibility)(0),                     // 72: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1Visibility
	(*v1alpha1.ModuleReference)(nil),                            // 73: buf.alpha.module.v1alpha1.ModuleReference
	(*v1alpha1.ModulePin)(nil),                                  // 74: buf.alpha.module.v1alpha1.ModulePin
	(*BufAlphaRegistryV1Alpha1LocalModuleReference)(nil),        // 75: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1LocalModuleReference
	(*BufAlphaRegistryV1Alpha1LocalModuleResolveResult)(nil),    // 76: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1LocalModuleResolveResult
	(BufAlphaRegistryV1Alpha1SearchFilter)(0),                   // 77: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1SearchFilter
	(*timestamppb.Timestamp)(nil),                               // 78: google.protobuf.Timestamp
	(BufAlphaRegistryV1Alpha1UserState)(0),                      // 79: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1UserState
	(BufAlphaRegistryV1Alpha1ServerRole)(0),                     // 80: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ServerRole
	(*BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary)(nil), // 81: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary
	(BufAlphaRegistryV1Alpha1ConvertFormat)(0),                  // 82: buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ConvertFormat
	(v1alpha11.ErrorCode)(0),                                    // 83: buf.alpha.rpc.v1alpha1.ErrorCode
}
var file_buf_alpha_audit_v1alpha1_envelope_proto_depIdxs = []int32{
	61, // 0: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo.organization_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole
	61, // 1: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo.organization_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole
	62, // 2: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo.repository_base_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryRole
	63, // 3: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo.plugin_base_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginRole
	64, // 4: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo.template_base_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1TemplateRole
	65, // 5: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreatePluginInfo.visibility:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVisibility
	65, // 6: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo.visibility:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVisibility
	66, // 7: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo.plugin_configs:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginConfig
	67, // 8: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo.plugin_versions:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVersionMapping
	68, // 9: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo.branch:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryBranch
	69, // 10: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo.tag:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryTag
	70, // 11: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo.commit:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryCommit
	71, // 12: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo.track:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryTrack
	72, // 13: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo.visibility:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1Visibility
	73, // 14: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo.module_references:type_name -> buf.alpha.module.v1alpha1.ModuleReference
	74, // 15: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo.current_module_pins:type_name -> buf.alpha.module.v1alpha1.ModulePin
	74, // 16: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo.module_pins_results:type_name -> buf.alpha.module.v1alpha1.ModulePin
	75, // 17: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo.local_module_references:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1LocalModuleReference
	76, // 18: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo.local_module_resolve_results:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1LocalModuleResolveResult
	74, // 19: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo.dependencies:type_name -> buf.alpha.module.v1alpha1.ModulePin
	77, // 20: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SearchInfo.filters:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1SearchFilter
	78, // 21: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTokenInfo.expire_time:type_name -> google.protobuf.Timestamp
	79, // 22: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListUsersInfo.user_state_filter:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1UserState
	80, // 23: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo.server_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ServerRole
	81, // 24: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo.runtime_libraries:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary
	81, // 25: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo.runtime_libraries:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginVersionRuntimeLibrary
	62, // 26: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo.repository_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryRole
	63, // 27: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo.plugin_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1PluginRole
	64, // 28: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo.template_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1TemplateRole
	71, // 29: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo.track:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1RepositoryTrack
	61, // 30: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo.organization_role:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1OrganizationRole
	82, // 31: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1Convert.request_format:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ConvertFormat
	82, // 32: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1Convert.response_format:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1ConvertFormat
	72, // 33: buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName.visibility:type_name -> buf.alpha.audit.v1alpha1.BufAlphaRegistryV1Alpha1Visibility
	52, // 34: buf.alpha.audit.v1alpha1.Event.user:type_name -> buf.alpha.audit.v1alpha1.UserActor
	53, // 35: buf.alpha.audit.v1alpha1.Event.machine:type_name -> buf.alpha.audit.v1alpha1.MachineActor
	78, // 36: buf.alpha.audit.v1alpha1.Event.event_time:type_name -> google.protobuf.Timestamp
	60, // 37: buf.alpha.audit.v1alpha1.Event.objects:type_name -> buf.alpha.audit.v1alpha1.Object
	83, // 38: buf.alpha.audit.v1alpha1.Event.error_code:type_name -> buf.alpha.rpc.v1alpha1.ErrorCode
	0,  // 39: buf.alpha.audit.v1alpha1.Event.action:type_name -> buf.alpha.audit.v1alpha1.Action
	1,  // 40: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_download_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DownloadInfo
	2,  // 41: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_image_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetImageInfo
	3,  // 42: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_organization_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo
	4,  // 43: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_organization_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo
	5,  // 44: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_organization_by_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo
	6,  // 45: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_add_organization_member_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo
	7,  // 46: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_update_organization_member_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo
	8,  // 47: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_remove_organization_member_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo
	9,  // 48: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_update_organization_settings_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo
	10, // 49: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_plugin_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreatePluginInfo
	11, // 50: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_plugin_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeletePluginInfo
	12, // 51: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_template_version_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo
	13, // 52: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_template_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo
	14, // 53: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_template_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo
	15, // 54: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_template_version_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo
	16, // 55: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_push_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1PushInfo
	17, // 56: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_reference_by_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo
	18, // 57: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_repository_branch_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo
	19, // 58: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_list_repository_commits_by_branch_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo
	21, // 59: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_list_repository_commits_by_reference_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo
	22, // 60: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_repository_commit_by_reference_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo
	23, // 61: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_repository_commit_by_sequence_id_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo
	24, // 62: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_repository_tag_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo
	25, // 63: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_repository_by_full_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo
	26, // 64: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_repository_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo
	27, // 65: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_repository_by_full_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo
	28, // 66: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_deprecate_repository_by_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo
	29, // 67: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_undeprecate_repository_by_name_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo
	30, // 68: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_module_pins_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo
	31, // 69: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_local_module_pins_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo
	32, // 70: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_search_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SearchInfo
	33, // 71: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_token_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateTokenInfo
	34, // 72: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_delete_token_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo
	35, // 73: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_user_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateUserInfo
	36, // 74: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_list_users_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListUsersInfo
	37, // 75: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_deactivate_user_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo
	38, // 76: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_update_user_server_role_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo
	39, // 77: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registryinternal_v1alpha1_create_plugin_version_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo
	41, // 78: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registryinternal_v1alpha1_delete_plugin_version_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo
	42, // 79: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_set_repository_contributor_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo
	43, // 80: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_set_plugin_contributor_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo
	44, // 81: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_set_template_contributor_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo
	40, // 82: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registryinternal_v1alpha1_create_plugin_version_metadata_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo
	45, // 83: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_create_repository_track_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo
	46, // 84: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_set_organization_member_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo
	47, // 85: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_get_jsonschema:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1GetJSONSchema
	48, // 86: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_convert:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1Convert
	20, // 87: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_list_repository_commits_on_track_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo
	49, // 88: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_list_templates_user_can_access_info:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo
	50, // 89: buf.alpha.audit.v1alpha1.Event.action_buf_alpha_registry_v1alpha1_update_repository_settings_by_name:type_name -> buf.alpha.audit.v1alpha1.ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName
	54, // 90: buf.alpha.audit.v1alpha1.Object.user:type_name -> buf.alpha.audit.v1alpha1.UserObject
	55, // 91: buf.alpha.audit.v1alpha1.Object.organization:type_name -> buf.alpha.audit.v1alpha1.OrganizationObject
	56, // 92: buf.alpha.audit.v1alpha1.Object.repository:type_name -> buf.alpha.audit.v1alpha1.RepositoryObject
	57, // 93: buf.alpha.audit.v1alpha1.Object.plugin:type_name -> buf.alpha.audit.v1alpha1.PluginObject
	58, // 94: buf.alpha.audit.v1alpha1.Object.template:type_name -> buf.alpha.audit.v1alpha1.TemplateObject
	59, // 95: buf.alpha.audit.v1alpha1.Object.token:type_name -> buf.alpha.audit.v1alpha1.TokenObject
	96, // [96:96] is the sub-list for method output_type
	96, // [96:96] is the sub-list for method input_type
	96, // [96:96] is the sub-list for extension type_name
	96, // [96:96] is the sub-list for extension extendee
	0,  // [0:96] is the sub-list for field type_name
}

func init() { file_buf_alpha_audit_v1alpha1_envelope_proto_init() }
func file_buf_alpha_audit_v1alpha1_envelope_proto_init() {
	if File_buf_alpha_audit_v1alpha1_envelope_proto != nil {
		return
	}
	file_buf_alpha_audit_v1alpha1_convert_proto_init()
	file_buf_alpha_audit_v1alpha1_module_proto_init()
	file_buf_alpha_audit_v1alpha1_plugin_proto_init()
	file_buf_alpha_audit_v1alpha1_repository_proto_init()
	file_buf_alpha_audit_v1alpha1_role_proto_init()
	file_buf_alpha_audit_v1alpha1_search_proto_init()
	file_buf_alpha_audit_v1alpha1_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreatePluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeletePluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1PushInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1SearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1ListUsersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1GetJSONSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1Convert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Branch)(nil),
		(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Tag)(nil),
		(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Commit)(nil),
		(*ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo_Track)(nil),
	}
	file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Event_User)(nil),
		(*Event_Machine)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DownloadInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetImageInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateOrganizationInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteOrganizationByNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1AddOrganizationMemberInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationMemberInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1RemoveOrganizationMemberInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1UpdateOrganizationSettingsInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreatePluginInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeletePluginInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetTemplateVersionInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteTemplateInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateTemplateVersionInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1PushInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetReferenceByNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryBranchInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByBranchInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsByReferenceInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitByReferenceInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetRepositoryCommitBySequenceIdInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTagInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryByFullNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteRepositoryByFullNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeprecateRepositoryByNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1UndeprecateRepositoryByNameInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetModulePinsInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetLocalModulePinsInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1SearchInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateTokenInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeleteTokenInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateUserInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1ListUsersInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1DeactivateUserInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1UpdateUserServerRoleInfo)(nil),
		(*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionInfo)(nil),
		(*Event_ActionBufAlphaRegistryinternalV1Alpha1DeletePluginVersionInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1SetRepositoryContributorInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1SetPluginContributorInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1SetTemplateContributorInfo)(nil),
		(*Event_ActionBufAlphaRegistryinternalV1Alpha1CreatePluginVersionMetadataInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1CreateRepositoryTrackInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1SetOrganizationMemberInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1GetJsonschema)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1Convert)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1ListRepositoryCommitsOnTrackInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1ListTemplatesUserCanAccessInfo)(nil),
		(*Event_ActionBufAlphaRegistryV1Alpha1UpdateRepositorySettingsByName)(nil),
	}
	file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*Object_User)(nil),
		(*Object_Organization)(nil),
		(*Object_Repository)(nil),
		(*Object_Plugin)(nil),
		(*Object_Template)(nil),
		(*Object_Token)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buf_alpha_audit_v1alpha1_envelope_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_alpha_audit_v1alpha1_envelope_proto_goTypes,
		DependencyIndexes: file_buf_alpha_audit_v1alpha1_envelope_proto_depIdxs,
		EnumInfos:         file_buf_alpha_audit_v1alpha1_envelope_proto_enumTypes,
		MessageInfos:      file_buf_alpha_audit_v1alpha1_envelope_proto_msgTypes,
	}.Build()
	File_buf_alpha_audit_v1alpha1_envelope_proto = out.File
	file_buf_alpha_audit_v1alpha1_envelope_proto_rawDesc = nil
	file_buf_alpha_audit_v1alpha1_envelope_proto_goTypes = nil
	file_buf_alpha_audit_v1alpha1_envelope_proto_depIdxs = nil
}
