// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: buf/registry/module/v1beta1/commit_service.proto

package modulev1beta1

import (
	v1beta1 "github.com/bufbuild/buf/private/gen/proto/go/buf/registry/storage/v1beta1"
	_ "github.com/bufbuild/buf/private/gen/proto/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolveCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// References to request a Commit for.
	//
	// See the documentation on ResourceRef for resource resolution details.
	//
	// Once the resource is resolved, this reference is interpeted to refer to the following Commit:
	//   - If a Module is referenced, this is interpreted to mean the latest released Commit on the Module.
	//   - If a Commit is referenced, this just references that specific commit.
	//   - If a Tag is referenced, this is interpreted to mean the Commit associated with the Tag.
	//   - If a VCSCommit is referenced, this is interpreted to mean the Commit associated with the VCSCommit.
	//   - Is a Branch is referenced, this is interpreted to mean the latest Commit on the Branch.
	ResourceRefs []*ResourceRef `protobuf:"bytes,1,rep,name=resource_refs,json=resourceRefs,proto3" json:"resource_refs,omitempty"`
}

func (x *ResolveCommitsRequest) Reset() {
	*x = ResolveCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCommitsRequest) ProtoMessage() {}

func (x *ResolveCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCommitsRequest.ProtoReflect.Descriptor instead.
func (*ResolveCommitsRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveCommitsRequest) GetResourceRefs() []*ResourceRef {
	if x != nil {
		return x.ResourceRefs
	}
	return nil
}

type ResolveCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The found Commits in the same order as requested.
	Commits []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ResolveCommitsResponse) Reset() {
	*x = ResolveCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCommitsResponse) ProtoMessage() {}

func (x *ResolveCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCommitsResponse.ProtoReflect.Descriptor instead.
func (*ResolveCommitsResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveCommitsResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type ListCommitHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of items to return.
	//
	// The default value is 10.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The page to start from.
	//
	// If empty, the first page is returned.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The reference to get the history for.
	//
	// See the documentation on ResourceRef for resource resolution details.
	//
	// Once the resource is resolved, history is started from the following Commit:
	//   - If a Module is referenced, history is started at the latest released Commit on the Module.
	//   - If a Commit is referenced, history is started at this Commit.
	//   - If a Tag is referenced, history is started at the Commit associated with the Tag.
	//   - If a VCSCommit is referenced, history is started at the Commit associated with the VCSCommit.
	//   - Is a Branch is referenced, history is started at the latest Commit on the Branch.
	ResourceRef *ResourceRef `protobuf:"bytes,3,opt,name=resource_ref,json=resourceRef,proto3" json:"resource_ref,omitempty"`
	// Only return Commits that have one or more associated Tags.
	HasTag bool `protobuf:"varint,4,opt,name=has_tag,json=hasTag,proto3" json:"has_tag,omitempty"`
	// Only return Commits that have one or more associated VCSCommits.
	HasVcsCommit bool `protobuf:"varint,5,opt,name=has_vcs_commit,json=hasVcsCommit,proto3" json:"has_vcs_commit,omitempty"`
}

func (x *ListCommitHistoryRequest) Reset() {
	*x = ListCommitHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitHistoryRequest) ProtoMessage() {}

func (x *ListCommitHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListCommitHistoryRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCommitHistoryRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCommitHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCommitHistoryRequest) GetResourceRef() *ResourceRef {
	if x != nil {
		return x.ResourceRef
	}
	return nil
}

func (x *ListCommitHistoryRequest) GetHasTag() bool {
	if x != nil {
		return x.HasTag
	}
	return false
}

func (x *ListCommitHistoryRequest) GetHasVcsCommit() bool {
	if x != nil {
		return x.HasVcsCommit
	}
	return false
}

type ListCommitHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The next page token.
	//
	// / If empty, there are no more pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The listed Commits.
	Commits []*Commit `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ListCommitHistoryResponse) Reset() {
	*x = ListCommitHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitHistoryResponse) ProtoMessage() {}

func (x *ListCommitHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListCommitHistoryResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListCommitHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListCommitHistoryResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type CreateCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All of the Files for the Modules that should have Commits created for them.
	//
	// If you have a workspace, all files from the workspace, including buf.yaml and buf.lock, should
	// be in files. The backend will parse the buf.yaml to discover the ModuleResourceRefs.
	FileNodes []*v1beta1.FileNode `protobuf:"bytes,1,rep,name=file_nodes,json=fileNodes,proto3" json:"file_nodes,omitempty"`
	// Blobs for the given FileNodes.
	//
	// Only Blobs that were returned as missing from GetMissingBlobDigests need to be sent.
	// Other Blobs already exist on the server, and will be ignored.
	MissingBlobs []*v1beta1.Blob `protobuf:"bytes,2,rep,name=missing_blobs,json=missingBlobs,proto3" json:"missing_blobs,omitempty"`
	// The names of Branches that should be associated with this Commit.
	//
	// If a Branch currently exists on the associated Module with a name, this existing
	// Branch will be used. Otherwise, a new Branch will be created for the corresponding name.
	//
	// If empty, the default branch is assumed as the only branch.
	BranchNames []string `protobuf:"bytes,3,rep,name=branch_names,json=branchNames,proto3" json:"branch_names,omitempty"`
	// The names of Tags that should be associated with this Commit.
	//
	// If a Tag currently exists on the assocated Module with a name, the RPC will error, however
	// this will change in the future when we allow Tags to move. If the Tag does not
	// currently exist, a new Tag will be created for each name.
	TagNames []string `protobuf:"bytes,4,rep,name=tag_names,json=tagNames,proto3" json:"tag_names,omitempty"`
	// Associated VCS commit information.
	//
	// If there are already VCSCommits on the associated Module with a given hash, this
	// will result in an error. Otherwise, a new VCSCommit is created.
	AssociatedVcsCommits []*CreateCommitsRequest_AssociatedVCSCommit `protobuf:"bytes,5,rep,name=associated_vcs_commits,json=associatedVcsCommits,proto3" json:"associated_vcs_commits,omitempty"`
}

func (x *CreateCommitsRequest) Reset() {
	*x = CreateCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitsRequest) ProtoMessage() {}

func (x *CreateCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitsRequest.ProtoReflect.Descriptor instead.
func (*CreateCommitsRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCommitsRequest) GetFileNodes() []*v1beta1.FileNode {
	if x != nil {
		return x.FileNodes
	}
	return nil
}

func (x *CreateCommitsRequest) GetMissingBlobs() []*v1beta1.Blob {
	if x != nil {
		return x.MissingBlobs
	}
	return nil
}

func (x *CreateCommitsRequest) GetBranchNames() []string {
	if x != nil {
		return x.BranchNames
	}
	return nil
}

func (x *CreateCommitsRequest) GetTagNames() []string {
	if x != nil {
		return x.TagNames
	}
	return nil
}

func (x *CreateCommitsRequest) GetAssociatedVcsCommits() []*CreateCommitsRequest_AssociatedVCSCommit {
	if x != nil {
		return x.AssociatedVcsCommits
	}
	return nil
}

type CreateCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created Commits.
	//
	// If the digest was found for an pre-existing Commit, this pre-existing Commit will be returned
	// instead of a new Commit being created.
	Commits []*Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *CreateCommitsResponse) Reset() {
	*x = CreateCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitsResponse) ProtoMessage() {}

func (x *CreateCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitsResponse.ProtoReflect.Descriptor instead.
func (*CreateCommitsResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCommitsResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type GetFileNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The File sets to request.
	Values []*GetFileNodesRequest_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetFileNodesRequest) Reset() {
	*x = GetFileNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileNodesRequest) ProtoMessage() {}

func (x *GetFileNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileNodesRequest.ProtoReflect.Descriptor instead.
func (*GetFileNodesRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileNodesRequest) GetValues() []*GetFileNodesRequest_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetFileNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The returned File sets in the same order as requested.
	Values []*GetFileNodesResponse_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GetFileNodesResponse) Reset() {
	*x = GetFileNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileNodesResponse) ProtoMessage() {}

func (x *GetFileNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileNodesResponse.ProtoReflect.Descriptor instead.
func (*GetFileNodesResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetFileNodesResponse) GetValues() []*GetFileNodesResponse_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetBlobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digests to retrieve Blobs for.
	Digests []*v1beta1.Digest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *GetBlobsRequest) Reset() {
	*x = GetBlobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobsRequest) ProtoMessage() {}

func (x *GetBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobsRequest.ProtoReflect.Descriptor instead.
func (*GetBlobsRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetBlobsRequest) GetDigests() []*v1beta1.Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

type GetBlobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrieved Blobs.
	Blobs []*v1beta1.Blob `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *GetBlobsResponse) Reset() {
	*x = GetBlobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobsResponse) ProtoMessage() {}

func (x *GetBlobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobsResponse.ProtoReflect.Descriptor instead.
func (*GetBlobsResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlobsResponse) GetBlobs() []*v1beta1.Blob {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type GetMissingBlobDigestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digests to see if we have Blobs for.
	Digests []*v1beta1.Digest `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *GetMissingBlobDigestsRequest) Reset() {
	*x = GetMissingBlobDigestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissingBlobDigestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissingBlobDigestsRequest) ProtoMessage() {}

func (x *GetMissingBlobDigestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissingBlobDigestsRequest.ProtoReflect.Descriptor instead.
func (*GetMissingBlobDigestsRequest) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetMissingBlobDigestsRequest) GetDigests() []*v1beta1.Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

type GetMissingBlobDigestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digests that are missing.
	MissingBlobDigests []*v1beta1.Digest `protobuf:"bytes,1,rep,name=missing_blob_digests,json=missingBlobDigests,proto3" json:"missing_blob_digests,omitempty"`
}

func (x *GetMissingBlobDigestsResponse) Reset() {
	*x = GetMissingBlobDigestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissingBlobDigestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissingBlobDigestsResponse) ProtoMessage() {}

func (x *GetMissingBlobDigestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissingBlobDigestsResponse.ProtoReflect.Descriptor instead.
func (*GetMissingBlobDigestsResponse) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetMissingBlobDigestsResponse) GetMissingBlobDigests() []*v1beta1.Digest {
	if x != nil {
		return x.MissingBlobDigests
	}
	return nil
}

// Information on an associated VCS commit needed to create a VCSCommit.
type CreateCommitsRequest_AssociatedVCSCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the VCSCommit.
	//
	// VCS-specific.
	// Unique within a given Module.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The type of VCS.
	Type VCSType `protobuf:"varint,2,opt,name=type,proto3,enum=buf.registry.module.v1beta1.VCSType" json:"type,omitempty"`
	// The URL of of the repository on the VCS.
	VcsRepositoryUrl string `protobuf:"bytes,3,opt,name=vcs_repository_url,json=vcsRepositoryUrl,proto3" json:"vcs_repository_url,omitempty"`
	// The name of the author of the VCSCommit.
	//
	// VCS-specific: not associated with the name of Users on the BSR, for example.
	AuthorName string `protobuf:"bytes,4,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	// The email of the author of the VCSCommit.
	//
	// VCS-specific: not associated with the Users on the BSR, for example.
	AuthorEmail string `protobuf:"bytes,5,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	// The name of the committer of the VCSCommit.
	//
	// VCS-specific: not associated with the name of Users on the BSR, for example.
	CommitterName string `protobuf:"bytes,6,opt,name=committer_name,json=committerName,proto3" json:"committer_name,omitempty"`
	// The email of the committer of the VCSCommit.
	//
	// VCS-specific: not associated with the Users on the BSR, for example.
	CommitterEmail string `protobuf:"bytes,7,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) Reset() {
	*x = CreateCommitsRequest_AssociatedVCSCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommitsRequest_AssociatedVCSCommit) ProtoMessage() {}

func (x *CreateCommitsRequest_AssociatedVCSCommit) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommitsRequest_AssociatedVCSCommit.ProtoReflect.Descriptor instead.
func (*CreateCommitsRequest_AssociatedVCSCommit) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetType() VCSType {
	if x != nil {
		return x.Type
	}
	return VCSType_VCS_TYPE_UNSPECIFIED
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetVcsRepositoryUrl() string {
	if x != nil {
		return x.VcsRepositoryUrl
	}
	return ""
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetCommitterName() string {
	if x != nil {
		return x.CommitterName
	}
	return ""
}

func (x *CreateCommitsRequest_AssociatedVCSCommit) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

// An individual request for a set of files from a single Commit, Module, Branch, Tag, or VCSCommit.
type GetFileNodesRequest_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference to get files for.
	//
	// See the documentation on ResourceRef for resource resolution details.
	//
	// Once the resource is resolved, files are returned from the following Commit:
	//   - If a Module is referenced, files are returned from the latest released Commit on the Module.
	//   - If a Commit is referenced, files are returned from this Commit.
	//   - If a Tag is referenced, files are returned from the Commit associated with the Tag.
	//   - If a VCSCommit is referenced, files are returned from the Commit associated with the VCSCommit.
	//   - Is a Branch is referenced, files are returned from the latest Commit on the Branch.
	ResourceRef *ResourceRef `protobuf:"bytes,1,opt,name=resource_ref,json=resourceRef,proto3" json:"resource_ref,omitempty"`
	// Specific file paths to retrieve.
	//
	// If empty, all file paths for the given reference are retrieved.
	//
	// The path must be relative, and connect contain any "." or ".." components
	// The separator "/" must be used.
	//
	// TODO: Can we encode the above requirements via validation?
	Paths []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	// Whether to allow file paths not to exist within the given module.
	//
	// For example, one may want to retrieve the file paths "buf.md" and "README.md",
	// but only expect one to actually exist.
	//
	// If false, it is an error to specify non-existent file paths.
	AllowPathsNotExist bool `protobuf:"varint,3,opt,name=allow_paths_not_exist,json=allowPathsNotExist,proto3" json:"allow_paths_not_exist,omitempty"`
}

func (x *GetFileNodesRequest_Value) Reset() {
	*x = GetFileNodesRequest_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileNodesRequest_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileNodesRequest_Value) ProtoMessage() {}

func (x *GetFileNodesRequest_Value) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileNodesRequest_Value.ProtoReflect.Descriptor instead.
func (*GetFileNodesRequest_Value) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetFileNodesRequest_Value) GetResourceRef() *ResourceRef {
	if x != nil {
		return x.ResourceRef
	}
	return nil
}

func (x *GetFileNodesRequest_Value) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *GetFileNodesRequest_Value) GetAllowPathsNotExist() bool {
	if x != nil {
		return x.AllowPathsNotExist
	}
	return false
}

// A single set of FileNodes and their associated commits.
type GetFileNodesResponse_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileNodes []*v1beta1.FileNode `protobuf:"bytes,1,rep,name=file_nodes,json=fileNodes,proto3" json:"file_nodes,omitempty"`
	Commit    *Commit             `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetFileNodesResponse_Value) Reset() {
	*x = GetFileNodesResponse_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileNodesResponse_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileNodesResponse_Value) ProtoMessage() {}

func (x *GetFileNodesResponse_Value) ProtoReflect() protoreflect.Message {
	mi := &file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileNodesResponse_Value.ProtoReflect.Descriptor instead.
func (*GetFileNodesResponse_Value) Descriptor() ([]byte, []int) {
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetFileNodesResponse_Value) GetFileNodes() []*v1beta1.FileNode {
	if x != nil {
		return x.FileNodes
	}
	return nil
}

func (x *GetFileNodesResponse_Value) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

var File_buf_registry_module_v1beta1_commit_service_proto protoreflect.FileDescriptor

var file_buf_registry_module_v1beta1_commit_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a,
	0x28, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22, 0x61,
	0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x2a, 0x03, 0x18, 0xfa, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x54,
	0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x56,
	0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xd7, 0x05,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x12, 0x30, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72,
	0x03, 0x18, 0xff, 0x01, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x7b,
	0x0a, 0x16, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x56, 0x43, 0x53, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x56, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0xc9, 0x02, 0x0a, 0x13,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x56, 0x43, 0x53, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x12, 0x76,
	0x63, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01,
	0x01, 0x52, 0x10, 0x76, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x60, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xb4, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x92, 0x01,
	0x07, 0x22, 0x05, 0x72, 0x03, 0x18, 0x80, 0x20, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x74, 0x68, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x32, 0x94,
	0x06, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x7e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x32, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x87, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7b, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0x6c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x2c, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x93, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x6c,
	0x6f, 0x62, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x62, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x9c, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x75,
	0x66, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x52, 0x4d, 0xaa, 0x02, 0x1b,
	0x42, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x42, 0x75,
	0x66, 0x5c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x27, 0x42, 0x75, 0x66, 0x5c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x42, 0x75, 0x66, 0x3a, 0x3a, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_buf_registry_module_v1beta1_commit_service_proto_rawDescOnce sync.Once
	file_buf_registry_module_v1beta1_commit_service_proto_rawDescData = file_buf_registry_module_v1beta1_commit_service_proto_rawDesc
)

func file_buf_registry_module_v1beta1_commit_service_proto_rawDescGZIP() []byte {
	file_buf_registry_module_v1beta1_commit_service_proto_rawDescOnce.Do(func() {
		file_buf_registry_module_v1beta1_commit_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_buf_registry_module_v1beta1_commit_service_proto_rawDescData)
	})
	return file_buf_registry_module_v1beta1_commit_service_proto_rawDescData
}

var file_buf_registry_module_v1beta1_commit_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_buf_registry_module_v1beta1_commit_service_proto_goTypes = []interface{}{
	(*ResolveCommitsRequest)(nil),                    // 0: buf.registry.module.v1beta1.ResolveCommitsRequest
	(*ResolveCommitsResponse)(nil),                   // 1: buf.registry.module.v1beta1.ResolveCommitsResponse
	(*ListCommitHistoryRequest)(nil),                 // 2: buf.registry.module.v1beta1.ListCommitHistoryRequest
	(*ListCommitHistoryResponse)(nil),                // 3: buf.registry.module.v1beta1.ListCommitHistoryResponse
	(*CreateCommitsRequest)(nil),                     // 4: buf.registry.module.v1beta1.CreateCommitsRequest
	(*CreateCommitsResponse)(nil),                    // 5: buf.registry.module.v1beta1.CreateCommitsResponse
	(*GetFileNodesRequest)(nil),                      // 6: buf.registry.module.v1beta1.GetFileNodesRequest
	(*GetFileNodesResponse)(nil),                     // 7: buf.registry.module.v1beta1.GetFileNodesResponse
	(*GetBlobsRequest)(nil),                          // 8: buf.registry.module.v1beta1.GetBlobsRequest
	(*GetBlobsResponse)(nil),                         // 9: buf.registry.module.v1beta1.GetBlobsResponse
	(*GetMissingBlobDigestsRequest)(nil),             // 10: buf.registry.module.v1beta1.GetMissingBlobDigestsRequest
	(*GetMissingBlobDigestsResponse)(nil),            // 11: buf.registry.module.v1beta1.GetMissingBlobDigestsResponse
	(*CreateCommitsRequest_AssociatedVCSCommit)(nil), // 12: buf.registry.module.v1beta1.CreateCommitsRequest.AssociatedVCSCommit
	(*GetFileNodesRequest_Value)(nil),                // 13: buf.registry.module.v1beta1.GetFileNodesRequest.Value
	(*GetFileNodesResponse_Value)(nil),               // 14: buf.registry.module.v1beta1.GetFileNodesResponse.Value
	(*ResourceRef)(nil),                              // 15: buf.registry.module.v1beta1.ResourceRef
	(*Commit)(nil),                                   // 16: buf.registry.module.v1beta1.Commit
	(*v1beta1.FileNode)(nil),                         // 17: buf.registry.storage.v1beta1.FileNode
	(*v1beta1.Blob)(nil),                             // 18: buf.registry.storage.v1beta1.Blob
	(*v1beta1.Digest)(nil),                           // 19: buf.registry.storage.v1beta1.Digest
	(VCSType)(0),                                     // 20: buf.registry.module.v1beta1.VCSType
}
var file_buf_registry_module_v1beta1_commit_service_proto_depIdxs = []int32{
	15, // 0: buf.registry.module.v1beta1.ResolveCommitsRequest.resource_refs:type_name -> buf.registry.module.v1beta1.ResourceRef
	16, // 1: buf.registry.module.v1beta1.ResolveCommitsResponse.commits:type_name -> buf.registry.module.v1beta1.Commit
	15, // 2: buf.registry.module.v1beta1.ListCommitHistoryRequest.resource_ref:type_name -> buf.registry.module.v1beta1.ResourceRef
	16, // 3: buf.registry.module.v1beta1.ListCommitHistoryResponse.commits:type_name -> buf.registry.module.v1beta1.Commit
	17, // 4: buf.registry.module.v1beta1.CreateCommitsRequest.file_nodes:type_name -> buf.registry.storage.v1beta1.FileNode
	18, // 5: buf.registry.module.v1beta1.CreateCommitsRequest.missing_blobs:type_name -> buf.registry.storage.v1beta1.Blob
	12, // 6: buf.registry.module.v1beta1.CreateCommitsRequest.associated_vcs_commits:type_name -> buf.registry.module.v1beta1.CreateCommitsRequest.AssociatedVCSCommit
	16, // 7: buf.registry.module.v1beta1.CreateCommitsResponse.commits:type_name -> buf.registry.module.v1beta1.Commit
	13, // 8: buf.registry.module.v1beta1.GetFileNodesRequest.values:type_name -> buf.registry.module.v1beta1.GetFileNodesRequest.Value
	14, // 9: buf.registry.module.v1beta1.GetFileNodesResponse.values:type_name -> buf.registry.module.v1beta1.GetFileNodesResponse.Value
	19, // 10: buf.registry.module.v1beta1.GetBlobsRequest.digests:type_name -> buf.registry.storage.v1beta1.Digest
	18, // 11: buf.registry.module.v1beta1.GetBlobsResponse.blobs:type_name -> buf.registry.storage.v1beta1.Blob
	19, // 12: buf.registry.module.v1beta1.GetMissingBlobDigestsRequest.digests:type_name -> buf.registry.storage.v1beta1.Digest
	19, // 13: buf.registry.module.v1beta1.GetMissingBlobDigestsResponse.missing_blob_digests:type_name -> buf.registry.storage.v1beta1.Digest
	20, // 14: buf.registry.module.v1beta1.CreateCommitsRequest.AssociatedVCSCommit.type:type_name -> buf.registry.module.v1beta1.VCSType
	15, // 15: buf.registry.module.v1beta1.GetFileNodesRequest.Value.resource_ref:type_name -> buf.registry.module.v1beta1.ResourceRef
	17, // 16: buf.registry.module.v1beta1.GetFileNodesResponse.Value.file_nodes:type_name -> buf.registry.storage.v1beta1.FileNode
	16, // 17: buf.registry.module.v1beta1.GetFileNodesResponse.Value.commit:type_name -> buf.registry.module.v1beta1.Commit
	0,  // 18: buf.registry.module.v1beta1.CommitService.ResolveCommits:input_type -> buf.registry.module.v1beta1.ResolveCommitsRequest
	2,  // 19: buf.registry.module.v1beta1.CommitService.ListCommitHistory:input_type -> buf.registry.module.v1beta1.ListCommitHistoryRequest
	4,  // 20: buf.registry.module.v1beta1.CommitService.CreateCommits:input_type -> buf.registry.module.v1beta1.CreateCommitsRequest
	6,  // 21: buf.registry.module.v1beta1.CommitService.GetFileNodes:input_type -> buf.registry.module.v1beta1.GetFileNodesRequest
	8,  // 22: buf.registry.module.v1beta1.CommitService.GetBlobs:input_type -> buf.registry.module.v1beta1.GetBlobsRequest
	10, // 23: buf.registry.module.v1beta1.CommitService.GetMissingBlobDigests:input_type -> buf.registry.module.v1beta1.GetMissingBlobDigestsRequest
	1,  // 24: buf.registry.module.v1beta1.CommitService.ResolveCommits:output_type -> buf.registry.module.v1beta1.ResolveCommitsResponse
	3,  // 25: buf.registry.module.v1beta1.CommitService.ListCommitHistory:output_type -> buf.registry.module.v1beta1.ListCommitHistoryResponse
	5,  // 26: buf.registry.module.v1beta1.CommitService.CreateCommits:output_type -> buf.registry.module.v1beta1.CreateCommitsResponse
	7,  // 27: buf.registry.module.v1beta1.CommitService.GetFileNodes:output_type -> buf.registry.module.v1beta1.GetFileNodesResponse
	9,  // 28: buf.registry.module.v1beta1.CommitService.GetBlobs:output_type -> buf.registry.module.v1beta1.GetBlobsResponse
	11, // 29: buf.registry.module.v1beta1.CommitService.GetMissingBlobDigests:output_type -> buf.registry.module.v1beta1.GetMissingBlobDigestsResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_buf_registry_module_v1beta1_commit_service_proto_init() }
func file_buf_registry_module_v1beta1_commit_service_proto_init() {
	if File_buf_registry_module_v1beta1_commit_service_proto != nil {
		return
	}
	file_buf_registry_module_v1beta1_commit_proto_init()
	file_buf_registry_module_v1beta1_resource_proto_init()
	file_buf_registry_module_v1beta1_vcs_commit_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissingBlobDigestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissingBlobDigestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommitsRequest_AssociatedVCSCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileNodesRequest_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_registry_module_v1beta1_commit_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileNodesResponse_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buf_registry_module_v1beta1_commit_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_buf_registry_module_v1beta1_commit_service_proto_goTypes,
		DependencyIndexes: file_buf_registry_module_v1beta1_commit_service_proto_depIdxs,
		MessageInfos:      file_buf_registry_module_v1beta1_commit_service_proto_msgTypes,
	}.Build()
	File_buf_registry_module_v1beta1_commit_service_proto = out.File
	file_buf_registry_module_v1beta1_commit_service_proto_rawDesc = nil
	file_buf_registry_module_v1beta1_commit_service_proto_goTypes = nil
	file_buf_registry_module_v1beta1_commit_service_proto_depIdxs = nil
}
