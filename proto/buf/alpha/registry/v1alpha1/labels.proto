// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "google/protobuf/timestamp.proto";

enum LabelNamespace {
  LABEL_NAMESPACE_UNSPECIFIED = 0;
  LABEL_NAMESPACE_TAG = 1;
  LABEL_NAMESPACE_BRANCH = 2;
  LABEL_NAMESPACE_GIT_COMMIT = 3;
  LABEL_NAMESPACE_REVIEW = 4;
  LABEL_NAMESPACE_BSR_HEAD = 5;
}

message Label {
  LabelName label_name = 1;
  LabelValue label_value = 2;
}

message LabelName {
  LabelNamespace namespace = 1;
  string name = 2;
}

message LabelValue {
  string commit_id = 1;
}

service LabelService {
  rpc CreateLabel(CreateLabelRequest) returns (CreateLabelResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  rpc MoveLabel(MoveLabelRequest) returns (MoveLabelResponse);
  // GetLabels returns labels in a repository with optional label name and value filters.
  rpc GetLabels(GetLabelsRequest) returns (GetLabelsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // GetLabelsInNamespace returns labels in a given namespace, optionally matching label names.
  rpc GetLabelsInNamespace(GetLabelsInNamespaceRequest) returns (GetLabelsInNamespaceResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message CreateLabelRequest {
  LabelName label_name = 1;
  LabelValue label_value = 2;
  optional string author = 3;
  optional google.protobuf.Timestamp create_time = 4;
}

message CreateLabelResponse {
  LabelValue commit_id = 1;
}

message MoveLabelRequest {
  LabelName label_name = 1;
  optional LabelValue from = 2;
  LabelValue to = 3;
}

message MoveLabelResponse {}

message GetLabelsRequest {
  string repository_owner = 1;
  string repository_name = 2;
  // Optional label_name filter, in case you want to get labels in a namespace+name.
  optional LabelName label_name = 3;
  // Optional label_value filter, in case you want to get labels in a commit id.
  optional LabelValue label_value = 4;
}

message GetLabelsResponse {
  repeated Label labels = 1;
}

message GetLabelsInNamespaceRequest {
  string repository_owner = 1;
  string repository_name = 2;
  // Label namespace filter, so only labels in this namespace will be retrieved.
  LabelNamespace label_namespace = 3;
  // Optional label names filter. Label names that matches a value here will be retrieved. If empty,
  // all labels in the namespace will be retrieved.
  repeated string label_names = 4;
}

message GetLabelsInNamespaceResponse {
  repeated Label labels = 1;
}
