// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/repository_commit.proto";
import "google/protobuf/timestamp.proto";

message RepositoryTrack {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // We reserve field number '3' for the update_time.
  // google.protobuf.Timestamp update_time = 3;
  // The name of the repository track, i.e. "v1".
  string name = 4;
  // The latest commit to the track.
  RepositoryCommit latest_commit = 5;
}

service RepositoryTrackService {
  // CreateRepositoryTrack creates a new repository track.
  rpc CreateRepositoryTrack(CreateRepositoryTrackRequest) returns (CreateRepositoryTrackResponse);
  // ListRepositoryTracks lists the repository tracks associated with a repository.
  rpc ListRepositoryTracks(ListRepositoryTracksRequest) returns (ListRepositoryTracksResponse);
  // DeleteRepositoryTrackByName deletes a repository track by name.
  rpc DeleteRepositoryTrackByName(DeleteRepositoryTrackByNameRequest) returns (DeleteRepositoryTrackByNameResponse);
  // GetRepositoryTrackByName gets a repository track by name.
  rpc GetRepositoryTrackByName(GetRepositoryTrackByNameRequest) returns (GetRepositoryTrackByNameResponse);
  // ListRepositoryTracksByRepositoryCommit lists the repository tracks associated with a repository commit.
  rpc ListRepositoryTracksByRepositoryCommit(ListRepositoryTracksByRepositoryCommitRequest) returns (ListRepositoryTracksByRepositoryCommitResponse);
}

message CreateRepositoryTrackRequest {
  // The ID of the repository this track should be created on.
  string repository_id = 1;
  // The name of the repository track, i.e. v1.
  string name = 2;
}

message CreateRepositoryTrackResponse {
  RepositoryTrack repository_track = 1;
}

message ListRepositoryTracksRequest {
  // The ID of the repository whose tracks should be listed.
  string repository_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListRepositoryTracksResponse {
  repeated RepositoryTrack repository_tracks = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message DeleteRepositoryTrackByNameRequest {
  string owner_name = 1;
  string repository_name = 2;
  // The name of the repository track
  string name = 3;
}

message DeleteRepositoryTrackByNameResponse {}

message GetRepositoryTrackByNameRequest {
  string owner_name = 1;
  string repository_name = 2;
  // The name of the repository track
  string name = 3;
}

message GetRepositoryTrackByNameResponse {
  RepositoryTrack repository_track = 1;
}

message ListRepositoryTracksByRepositoryCommitRequest {
  // The ID of the repository where these tracks reside.
  string repository_id = 1;
  // The commit (name) to list tracks for.
  string commit = 2;
  uint32 page_size = 3;
  // The first page is returned if this is empty.
  string page_token = 4;
  bool reverse = 5;
}

message ListRepositoryTracksByRepositoryCommitResponse {
  repeated RepositoryTrack repository_tracks = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}
