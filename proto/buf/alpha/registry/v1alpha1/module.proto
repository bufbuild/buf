// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/role.proto";
import "buf/alpha/registry/v1alpha1/user.proto";
import "google/protobuf/timestamp.proto";

// LocalModuleReference is a local module reference.
//
// It does not include a remote.
message LocalModuleReference {
  string owner = 1;
  string repository = 2;
  // either branch or commit
  string reference = 3;
}

// LocalModulePin is a local module pin.
//
// It does not include a remote.
message LocalModulePin {
  string owner = 1;
  string repository = 2;
  string branch = 3;
  string commit = 4;
  string digest = 5;
  google.protobuf.Timestamp create_time = 7;
}

// From here on, this is part of the module -> repository migration.
// Until we move or remove LocalModuleReference and LocalModulePin, those
// will remain above that line.

enum Visibility {
  VISIBILITY_UNSPECIFIED = 0;
  VISIBILITY_PUBLIC = 1;
  VISIBILITY_PRIVATE = 2;
}

message Module {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // mutable
  google.protobuf.Timestamp update_time = 3;
  // unique, mutable
  string name = 4;
  oneof owner {
    // foreign key, mutable
    string user_id = 5;
    // foreign key, mutable
    string organization_id = 6;
  }
  Visibility visibility = 7;
  // deprecated means this module is deprecated.
  bool deprecated = 8;
  // deprecation_message is the message shown if the module is deprecated.
  string deprecation_message = 9;
}

message ModuleCounts {
  uint32 tags_count = 1;
  uint32 tracks_count = 2;
}

message ModuleContributor {
  User user = 1;
  // The ID of the for which the role belongs to.
  string module_id = 2;
  // The role that the user has been explicitly assigned against the repository.
  ModuleRole explicit_role = 3;
  // Optionally defines the role that the user has implicitly against the repository through the owning organization.
  // If the module does not belong to an organization or the user is not part of the owning organization, this is unset.
  ModuleRole implicit_role = 4;
}

// ModuleService is the Module service.
service ModuleService {
  // GetModule gets a module by ID.
  rpc GetModule(GetModuleRequest) returns (GetModuleResponse);
  // GetModuleByFullName gets a module by full name.
  rpc GetModuleByFullName(GetModuleByFullNameRequest) returns (GetModuleByFullNameResponse);
  // ListModules lists all modules.
  rpc ListModules(ListModulesRequest) returns (ListModulesResponse);
  // ListUserModules lists all modules belonging to a user.
  rpc ListUserModules(ListUserModulesRequest) returns (ListUserModulesResponse);
  // ListModulesUserCanAccess lists all modules a user can access.
  rpc ListModulesUserCanAccess(ListModulesUserCanAccessRequest) returns (ListModulesUserCanAccessResponse);
  // ListOrganizationModules lists all modules for an organization.
  rpc ListOrganizationModules(ListOrganizationModulesRequest) returns (ListOrganizationModulesResponse);
  // CreateModuleByFullName creates a new module by full name.
  rpc CreateModuleByFullName(CreateModuleByFullNameRequest) returns (CreateModuleByFullNameResponse);
  // DeleteModule deletes a module.
  rpc DeleteModule(DeleteModuleRequest) returns (DeleteModuleResponse);
  // DeleteModuleByFullName deletes a module by full name.
  rpc DeleteModuleByFullName(DeleteModuleByFullNameRequest) returns (DeleteModuleByFullNameResponse);
  // DeprecateModuleByName deprecates the module.
  rpc DeprecateModuleByName(DeprecateModuleByNameRequest) returns (DeprecateModuleByNameResponse);
  // UndeprecateModuleByName makes the module not deprecated and removes any deprecation_message.
  rpc UndeprecateModuleByName(UndeprecateModuleByNameRequest) returns (UndeprecateModuleByNameResponse);
  // GetModulesByFullName gets modules by full name. Response order is unspecified.
  // Errors if any of the modules don't exist or the caller does not have access to any of the modules.
  rpc GetModulesByFullName(GetModulesByFullNameRequest) returns (GetModulesByFullNameResponse);
  // SetModuleContributor sets the role of a user in the module.
  rpc SetModuleContributor(SetModuleContributorRequest) returns (SetModuleContributorResponse);
  // ListModuleContributors returns the list of contributors that has an explicit role against the module.
  // This does not include users who have implicit roles against the module, unless they have also been
  // assigned a role explicitly.
  rpc ListModuleContributors(ListModuleContributorsRequest) returns (ListModuleContributorsResponse);
  // GetModuleContributor returns the contributor information of a user in a module.
  rpc GetModuleContributor(GetModuleContributorRequest) returns (GetModuleContributorResponse);
  // GetModuleSettings gets the settings of a module.
  rpc GetModuleSettings(GetModuleSettingsRequest) returns (GetModuleSettingsResponse);
  // UpdateModuleSettingsByName updates the settings of a module.
  rpc UpdateModuleSettingsByName(UpdateModuleSettingsByNameRequest) returns (UpdateModuleSettingsByNameResponse);
}

message GetModulesByFullNameRequest {
  // minimum length is 1
  // maximum length is 250
  repeated string full_names = 1;
}

message GetModulesByFullNameResponse {
  repeated Module modules = 1;
}

message GetModuleRequest {
  string id = 1;
}

message GetModuleResponse {
  Module module = 1;
  ModuleCounts counts = 2;
}

message GetModuleByFullNameRequest {
  string full_name = 1;
}

message GetModuleByFullNameResponse {
  Module module = 1;
  ModuleCounts counts = 2;
}

message ListModulesRequest {
  uint32 page_size = 1;
  // The first page is returned if this is empty.
  string page_token = 2;
  bool reverse = 3;
}

message ListModulesResponse {
  repeated Module modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListUserModulesRequest {
  // The ID of the user whose modules should be listed.
  string user_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListUserModulesResponse {
  repeated Module modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListModulesUserCanAccessRequest {
  uint32 page_size = 1;
  // The first page is returned if this is empty.
  string page_token = 2;
  bool reverse = 3;
}

message ListModulesUserCanAccessResponse {
  repeated Module modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListOrganizationModulesRequest {
  // The ID of the organization whose modules should be listed.
  string organization_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListOrganizationModulesResponse {
  repeated Module modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message CreateModuleByFullNameRequest {
  // Must be unique across modules.
  string full_name = 1;
  Visibility visibility = 2;
}

message CreateModuleByFullNameResponse {
  Module module = 1;
}

message DeleteModuleRequest {
  string id = 1;
}

message DeleteModuleResponse {}

message DeleteModuleByFullNameRequest {
  string full_name = 1;
}

message DeleteModuleByFullNameResponse {}

message DeprecateModuleByNameRequest {
  string owner_name = 1;
  string module_name = 2;
  // A message shown along with the deprecation warning for this module.
  // It must be a utf8 encoded string containing 256 or fewer characters.
  string deprecation_message = 3;
}

message DeprecateModuleByNameResponse {
  Module module = 1;
}

message UndeprecateModuleByNameRequest {
  string owner_name = 1;
  string module_name = 2;
}

message UndeprecateModuleByNameResponse {
  Module module = 1;
}

message SetModuleContributorRequest {
  // The ID of the module for which the user's role will be set.
  string module_id = 1;
  // The ID of the user whose role will be set.
  string user_id = 2;
  // The role to assign to the user.
  // Setting UNSPECIFIED means removing the user's role.
  ModuleRole module_role = 3;
}

message SetModuleContributorResponse {}

message ListModuleContributorsRequest {
  string module_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListModuleContributorsResponse {
  repeated ModuleContributor users = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message GetModuleContributorRequest {
  // The ID of the module for which to get the contributor information.
  string module_id = 1;
  // The ID of the user for which to get the contributor information.
  string user_id = 2;
}

message GetModuleContributorResponse {
  // The contributor information of the user in the module.
  ModuleContributor user = 1;
}

message GetModuleSettingsRequest {
  // The ID of the module for which to get the settings.
  string module_id = 1;
}

message GetModuleSettingsResponse {
  // The number of outside contributors in the module,
  // excluding owning-organization's members that have an explicit role.
  uint32 contributors_count = 1;
}

message UpdateModuleSettingsByNameRequest {
  string owner_name = 1;
  string module_name = 2;
  // Changes are only made to specified values. Unspecified ones are left unchanged.
  Visibility visibility = 3;
}

message UpdateModuleSettingsByNameResponse {}
