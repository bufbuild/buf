// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "google/protobuf/timestamp.proto";

// RepositoryTrackCommit is the existence of a RepositoryCommit on a RepositoryTrack. Currently its only purpose is
// for querying whether a RepositoryCommit is on a RepositoryTrack and determining it's sequence id.
message RepositoryTrackCommit {
  // We reserve field number '3' for id, but RepositoryTrackCommits have no id.
  // string id = 1;

  // immutable
  google.protobuf.Timestamp create_time = 2;

  // We reserve field number '3' for the update_time.
  // google.protobuf.Timestamp update_time = 3;

  // immutable
  string repository_track_id = 4;

  // immutable
  string repository_commit_id = 5;

  // unique for repository_track, immutable
  int64 sequence_id = 6;
}

service RepositoryTrackCommitService {
  // GetRepositoryTrackCommitByRepositoryCommit returns the RepositoryTrackCommit associated given repository_commit on
  // the given repository_track. Returns NOT_FOUND if the RepositoryTrackCommit does not exist.
  rpc GetRepositoryTrackCommitByRepositoryCommit(GetRepositoryTrackCommitByRepositoryCommitRequest) returns (GetRepositoryTrackCommitByRepositoryCommitResponse);
  // ListRepositoryTrackCommitsByRepositoryTrack lists the RepositoryTrackCommitS associated with a repository track,
  // ordered by their sequence id.
  rpc ListRepositoryTrackCommitsByRepositoryTrack(ListRepositoryTrackCommitsByRepositoryTrackRequest) returns (ListRepositoryTrackCommitsByRepositoryTrackResponse);
  // GetRepositoryTrackCommitByReference returns the RepositoryTrackCommit associated with the given reference.
  rpc GetRepositoryTrackCommitByReference(GetRepositoryTrackCommitByReferenceRequest) returns (GetRepositoryTrackCommitByReferenceResponse);
}

message GetRepositoryTrackCommitByRepositoryCommitRequest {
  string repository_track_id = 1;
  string repository_commit_id = 2;
}

message GetRepositoryTrackCommitByRepositoryCommitResponse {
  RepositoryTrackCommit repository_track_commit = 1;
}

message ListRepositoryTrackCommitsByRepositoryTrackRequest {
  string repository_track_id = 1;
  uint32 page_size = 2;
  string page_token = 3;
  bool reverse = 4;
}

message ListRepositoryTrackCommitsByRepositoryTrackResponse {
  repeated RepositoryTrackCommit repository_track_commits = 1;
  string next_page_token = 2;
}

message GetRepositoryTrackCommitByReferenceRequest {
  string repository_owner = 1;
  string repository_name = 2;
  string track = 3;
  string reference = 4;
}

message GetRepositoryTrackCommitByReferenceResponse {
  RepositoryTrackCommit repository_track_commit = 1;
}
