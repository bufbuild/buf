// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/git_metadata.proto";
import "buf/alpha/registry/v1alpha1/repository_branch.proto";
import "buf/alpha/registry/v1alpha1/repository_commit.proto";
import "buf/alpha/registry/v1alpha1/repository_tag.proto";

message Reference {
  reserved 4;
  reserved "track";

  oneof reference {
    // The requested reference is a branch.
    RepositoryBranch branch = 1;
    // The requested reference is a tag.
    RepositoryTag tag = 2;
    // The requested reference is a commit.
    RepositoryCommit commit = 3;
    // The requested reference is the default reference.
    RepositoryMainReference main = 5;
    // The requested reference is a draft commit.
    RepositoryDraft draft = 6;
  }
}

message RepositoryMainReference {
  // Name is always 'main'.
  string name = 1;
  // The latest commit in this repository. If the repository has no commits,
  // this will be empty.
  RepositoryCommit commit = 2;
}

message RepositoryDraft {
  // The name of the draft
  string name = 1;
  // The commit this draft points to.
  RepositoryCommit commit = 2;
}

// ReferenceService is a service that provides RPCs that allow the BSR to query
// for reference information.
service ReferenceService {
  // GetReferenceByName takes a reference name and returns the
  // reference either as 'main', a tag, or commit.
  rpc GetReferenceByName(GetReferenceByNameRequest) returns (GetReferenceByNameResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // ListGitCommitsForReference takes a string reference and returns a paginated list of
  // git commit information associated with the resolved reference commit.
  rpc ListGitCommitsForReference(ListGitCommitsForReferenceRequest) returns (ListGitCommitsForReferenceResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message GetReferenceByNameRequest {
  // Name of the requested reference.
  string name = 1;
  // Owner of the repository the reference belongs to.
  string owner = 2;
  // Name of the repository the reference belongs to.
  string repository_name = 3;
}

message GetReferenceByNameResponse {
  Reference reference = 1;
}

message ListGitCommitsForReferenceRequest {
  // String that represents the name of the reference.
  string reference = 1;
  // Owner of the repository the reference belongs to.
  string owner = 2;
  // Name of the repository the reference belongs to.
  string repository_name = 3;
  uint32 page_size = 4;
  // The first page is returned if this is empty.
  string page_token = 5;
}

message ListGitCommitsForReferenceResponse {
  // ID of the BSR commit the reference resolved to.
  string commit_id = 1;
  // List of git commits and metadata associated with the resolved reference.
  repeated GitCommitInformation git_commits = 2;
  // There are no more pages if this is empty.
  string next_page_token = 3;
}
