// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/api/v1alpha1/api.proto";
import "buf/alpha/registry/v1alpha1/scope.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/bufbuild/buf/internal/gen/proto/go/buf/alpha/registry/v1alpha1;registryv1alpha1";

message Organization {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // mutable
  google.protobuf.Timestamp update_time = 3;
  // unique, mutable
  string name = 4;
}

// OrganizationService is the Organization service.
// All methods on the Organization service require authentication.
service OrganizationService {
  // GetOrganization gets a organization by ID.
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_READ;
  }
  // GetOrganizationByName gets a organization by name.
  rpc GetOrganizationByName(GetOrganizationByNameRequest) returns (GetOrganizationByNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_READ;
  }
  // ListOrganizations lists all organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_READ;
  }
  // ListUserOrganizations lists all organizations a user is member of.
  rpc ListUserOrganizations(ListUserOrganizationsRequest) returns (ListUserOrganizationsResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_READ;
  }
  // CreateOrganization creates a new organization.
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // UpdateOrganizationName updates a organization's name.
  rpc UpdateOrganizationName(UpdateOrganizationNameRequest) returns (UpdateOrganizationNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // UpdateOrganizationNameByName updates a organization's name by name.
  rpc UpdateOrganizationNameByName(UpdateOrganizationNameByNameRequest) returns (UpdateOrganizationNameByNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // DeleteOrganization deletes a organization.
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // DeleteOrganizationByName deletes a organization by name.
  rpc DeleteOrganizationByName(DeleteOrganizationByNameRequest) returns (DeleteOrganizationByNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // AddOrganizationBaseRepositoryScope adds a base repository scope to an organization by ID.
  rpc AddOrganizationBaseRepositoryScope(AddOrganizationBaseRepositoryScopeRequest) returns (AddOrganizationBaseRepositoryScopeResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // AddOrganizationBaseRepositoryScopeByName adds a base repository scope to an organization by name.
  rpc AddOrganizationBaseRepositoryScopeByName(AddOrganizationBaseRepositoryScopeByNameRequest) returns (AddOrganizationBaseRepositoryScopeByNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // RemoveOrganizationBaseRepositoryScope removes a base repository scope from an organization by ID.
  rpc RemoveOrganizationBaseRepositoryScope(RemoveOrganizationBaseRepositoryScopeRequest) returns (RemoveOrganizationBaseRepositoryScopeResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // RemoveOrganizationBaseRepositoryScopeByName removes a base repository scope from an organization by name.
  rpc RemoveOrganizationBaseRepositoryScopeByName(RemoveOrganizationBaseRepositoryScopeByNameRequest) returns (RemoveOrganizationBaseRepositoryScopeByNameResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
}

message GetOrganizationRequest {
  string id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationByNameRequest {
  string name = 1;
}

message GetOrganizationByNameResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  uint32 page_size = 1;
  // The first page is returned if this is empty.
  string page_token = 2;
  bool reverse = 3;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListUserOrganizationsRequest {
  // The ID of the user whose organizations should be listed.
  string user_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListUserOrganizationsResponse {
  repeated Organization organizations = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message CreateOrganizationRequest {
  // Must be unique across organizations.
  string name = 1;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationNameRequest {
  string id = 1;
  string new_name = 2;
}

message UpdateOrganizationNameResponse {
  Organization organization = 1;
}

message UpdateOrganizationNameByNameRequest {
  string name = 1;
  string new_name = 2;
}

message UpdateOrganizationNameByNameResponse {
  Organization organization = 1;
}


message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {}

message DeleteOrganizationByNameRequest {
  string name = 1;
}

message DeleteOrganizationByNameResponse {}

message AddOrganizationBaseRepositoryScopeRequest {
  string id = 1;
  RepositoryScope repository_scope = 2;
}

message AddOrganizationBaseRepositoryScopeResponse {}

message AddOrganizationBaseRepositoryScopeByNameRequest {
  string name = 1;
  RepositoryScope repository_scope = 2;
}

message AddOrganizationBaseRepositoryScopeByNameResponse {}

message RemoveOrganizationBaseRepositoryScopeRequest {
  string id = 1;
  RepositoryScope repository_scope = 2;
}

message RemoveOrganizationBaseRepositoryScopeResponse {}

message RemoveOrganizationBaseRepositoryScopeByNameRequest {
  string name = 1;
  RepositoryScope repository_scope = 2;
}

message RemoveOrganizationBaseRepositoryScopeByNameResponse {}
