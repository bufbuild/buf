// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/image/v1/image.proto";

// ModuleMethod represents method definitions declared in a module's services.
message ModuleMethod {
  // The name of the method, e.g. "Foo"
  string name = 1;

  // A fully qualified name of the request type for the method, e.g.
  // "pkg.foo.BarRequest"
  string input_type = 2;
  // A fully qualified name of the request type for the method, e.g.
  // "pkg.foo.BarResponse"
  string output_type = 3;

  // Indicates if the method is annotated as deprecated.
  bool deprecated = 4;
  // Indicates if the method is client streaming.
  bool client_streaming = 5;
  // Indicates if the method is server streaming.
  bool server_streaming = 6;
}

// ModuleService represents service definitions declared in a module.
message ModuleService {
  // The fully qualified name of the service, e.g. "pkg.foo.BarService"
  string name = 1;

  // The methods available in the service.
  repeated ModuleMethod methods = 2;

  // Indicates if the service is marked as deprecated.
  bool deprecated = 3;
}

// RequestBuilderService serves endpoints used by requestbuilder.
service RequestBuilderService {
  // GetServices returns an overview of all services declared in a module
  // and their methods.
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse);

  // GetMethodDetails returns data needed to make dynamic requests for a method.
  rpc GetMethodDetails(GetMethodDetailsRequest) returns (GetMethodDetailsResponse);
}


message GetServicesRequest {
  string owner = 1;
  string repository = 2;
  string reference = 3;
}

message GetServicesResponse {
  // Services declared in this module.
  repeated ModuleService services = 1;
}

message GetMethodDetailsRequest {
  string owner = 1;
  string repository = 2;
  string reference = 3;

  // Fully qualified method in the module, like "pkg.foo.BarService/Foo"
  string method = 4;
}

message GetMethodDetailsResponse {
  // A partial image containing only the files in which the request and
  // response type for this method are declared, as well as all the files
  // in the the transitive closure of their imports.
  buf.alpha.image.v1.Image partial_image = 1;

  // A jsonschema representing what the json encoded request message of
  // the method should conform to. This schema is an approximation to be
  // used by editors for validation and autocompletion, not a lossless
  // representation of the type's descriptor (for that use partial_image).
  bytes request_json_schema = 2;

  // The commit the request reference resolved to. May be used on the
  // client side to merge multiple partial_image's into one for repeated
  // GetMethodDetails requests on the same module.
  string resolved_commit = 3;
}
