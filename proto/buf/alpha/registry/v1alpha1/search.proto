// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/plugin.proto";
import "buf/alpha/registry/v1alpha1/repository.proto";
import "buf/alpha/registry/v1alpha1/repository_commit.proto";
import "buf/alpha/registry/v1alpha1/repository_tag.proto";

enum SearchFilter {
  SEARCH_FILTER_UNSPECIFIED = 0;
  SEARCH_FILTER_USER = 1;
  SEARCH_FILTER_ORGANIZATION = 2;
  SEARCH_FILTER_REPOSITORY = 3;
  SEARCH_FILTER_PLUGIN = 4 [deprecated = true];
  SEARCH_FILTER_TEMPLATE = 5 [deprecated = true];
  SEARCH_FILTER_TEAM = 6;
  SEARCH_FILTER_CURATED_PLUGIN = 7;
}

enum OrderBy {
  ORDER_BY_UNSPECIFIED = 0;
  ORDER_BY_CREATE_TIME = 1;
  ORDER_BY_UPDATE_TIME = 2;
  ORDER_BY_NAME = 3;
}

message RepositorySearchResult {
  string id = 1;
  string name = 2;
  // The name of the user or organization
  // who is the owner of this repository.
  string owner = 3;
  // The visibility of the repository.
  Visibility visibility = 4;
  bool deprecated = 5;
}

message OrganizationSearchResult {
  string id = 1;
  string name = 2;
}

message UserSearchResult {
  string id = 1;
  string username = 2;
  bool deactivated = 3;
}

message TeamSearchResult {
  string id = 1;
  string name = 2;
  string organization_name = 3;
}

message PluginSearchResult {
  option deprecated = true;
  string id = 1;
  string name = 2;
  // The name of the user or organization
  // who is the owner of this plugin.
  string owner = 3;
  // The visibility of the plugin.
  PluginVisibility visibility = 4;
  bool deprecated = 5;
}

message CuratedPluginSearchResult {
  string id = 1;
  string name = 2;
  // The name of the user or organization
  // who is the owner of this plugin.
  string owner = 3;
}

message TemplateSearchResult {
  option deprecated = true;
  string id = 1;
  string name = 2;
  // The name of the user or organization
  // who is the owner of this template.
  string owner = 3;
  // The visibility of the template.
  PluginVisibility visibility = 4;
  bool deprecated = 5;
}

message SearchResult {
  oneof item {
    RepositorySearchResult repository = 1;
    OrganizationSearchResult organization = 2;
    UserSearchResult user = 3;
    TeamSearchResult team = 4;
    PluginSearchResult plugin = 5 [deprecated = true];
    TemplateSearchResult template = 6 [deprecated = true];
    CuratedPluginSearchResult curated_plugin = 7;
  }
}

// SearchService is the search service.
service SearchService {
  // Search searches the BSR.
  rpc Search(SearchRequest) returns (SearchResponse);
  // SearchTag searches for tags in a repository
  rpc SearchTag(SearchTagRequest) returns (SearchTagResponse);
  // SearchDraft searches for drafts in a repository
  rpc SearchDraft(SearchDraftRequest) returns (SearchDraftResponse);
}

message SearchRequest {
  // The search string.
  string query = 1;
  uint32 page_size = 2;
  // The first page is returned if this is 0.
  uint32 page_token = 3;
  // Empty list means show all. Supplying one or more enums will
  // limit the search to only the requested resources.
  // Supplying all possible enums is equivalent to empty list of filters.
  repeated SearchFilter filters = 4;
}

message SearchResponse {
  repeated SearchResult search_results = 1;
  // There are no more pages if this is 0.
  uint32 next_page_token = 2;
}

message SearchTagRequest {
  // The owner of the repository.
  string repository_owner = 1;
  // The name of the repository.
  string repository_name = 2;
  // The search string.
  string query = 3;
  uint32 page_size = 4;
  // The first page is returned if this is empty.
  string page_token = 5;
  // The field to order results by.
  OrderBy order_by = 6;
  // Reverse orders results in descending order.
  bool reverse = 7;
}

message SearchTagResponse {
  repeated RepositoryTag repository_tags = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message SearchDraftRequest {
  // The owner of the repository.
  string repository_owner = 1;
  // The name of the repository.
  string repository_name = 2;
  // The search string.
  string query = 3;
  uint32 page_size = 4;
  // The first page is returned if this is empty.
  string page_token = 5;
  // The field to order results by.
  OrderBy order_by = 6;
  // Reverse orders results in descending order.
  bool reverse = 7;
}

message SearchDraftResponse {
  repeated RepositoryCommit repository_commits = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}
