// Copyright 2020-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/organization.proto";
import "buf/alpha/registry/v1alpha1/plugin.proto";
import "buf/alpha/registry/v1alpha1/repository.proto";
import "buf/alpha/registry/v1alpha1/user.proto";
import "buf/alpha/registry/v1alpha1/verification_status.proto";

// BreakingChangeCategory is the allowed list of categories for breaking rule settings.
enum BreakingChangeCategory {
  BREAKING_CHANGE_CATEGORY_UNSPECIFIED = 0;
  BREAKING_CHANGE_CATEGORY_FILE = 1;
  BREAKING_CHANGE_CATEGORY_WIRE_JSON = 2;
}

message BreakingChangeSettings {
  bool enabled = 1;
  bool ignore_unstable_packages = 2;
  BreakingChangeCategory category = 3;
}

// AdminService is the Admin service.
service AdminService {
  // ForceDeleteUser forces to delete a user. Resources and organizations that are
  // solely owned by the user will also be deleted.
  rpc ForceDeleteUser(ForceDeleteUserRequest) returns (ForceDeleteUserResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Update a user's verification status.
  rpc UpdateUserVerificationStatus(UpdateUserVerificationStatusRequest) returns (UpdateUserVerificationStatusResponse);
  // Update a organization's verification.
  rpc UpdateOrganizationVerificationStatus(UpdateOrganizationVerificationStatusRequest) returns (UpdateOrganizationVerificationStatusResponse);
  // Create a new machine user on the server.
  rpc CreateMachineUser(CreateMachineUserRequest) returns (CreateMachineUserResponse) {
    option idempotency_level = IDEMPOTENT;
  }
  // Get breaking change settings for the server.
  rpc GetBreakingChangeSettings(GetBreakingChangeSettingsRequest) returns (GetBreakingChangeSettingsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Update breaking change settings for the server.
  rpc UpdateBreakingChangeSettings(UpdateBreakingChangeSettingsRequest) returns (UpdateBreakingChangeSettingsResponse);
}

message ForceDeleteUserRequest {
  string user_id = 1;
}

message ForceDeleteUserResponse {
  // The deleted user.
  User user = 1;
  // The deleted organizations.
  repeated Organization organizations = 2;
  // The deleted repositories.
  repeated Repository repositories = 3;
  // The deleted plugins.
  repeated Plugin plugins = 4 [deprecated = true];
  // The deleted templates.
  repeated Template templates = 5 [deprecated = true];
}

message UpdateUserVerificationStatusRequest {
  string user_id = 1;
  VerificationStatus verification_status = 2;
}

message UpdateUserVerificationStatusResponse {}

message UpdateOrganizationVerificationStatusRequest {
  string organization_id = 1;
  VerificationStatus verification_status = 2;
}

message UpdateOrganizationVerificationStatusResponse {}

message CreateMachineUserRequest {
  string username = 1;
}

message CreateMachineUserResponse {
  User user = 1;
}

message GetBreakingChangeSettingsRequest {}

message GetBreakingChangeSettingsResponse {
  BreakingChangeSettings settings = 1;
}

message UpdateBreakingChangeSettingsRequest {
  BreakingChangeSettings settings = 1;
}

message UpdateBreakingChangeSettingsResponse {}
