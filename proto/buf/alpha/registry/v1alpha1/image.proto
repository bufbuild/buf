// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/image/v1/image.proto";

// ImageService serves compiled images.
service ImageService {
  // GetImage serves a compiled image for the local module. It automatically
  // downloads dependencies if necessary.
  rpc GetImage(GetImageRequest) returns (GetImageResponse);

  // GetPartialImage serves a compiled image for part of the local module.
  rpc GetPartialImage(GetImageRequest) returns (GetImageResponse);
}

message GetImageRequest {
  string owner = 1;
  string repository = 2;
  string reference = 3;
}

message GetImageResponse {
  buf.alpha.image.v1.Image image = 1;
}

enum PartialImageLevel {
  PARTIAL_IMAGE_LEVEL_UNSPECIFIED = 0;

  // Returns complete files in which the requested types are contained.
  PARTIAL_IMAGE_LEVEL_FILES = 1;

  // Returns trimmed files in which the requested types are contained. In a
  // trimmed file, all declarations that are not embedded (directly or
  // indirectly) in requested types are removed.
  PARTIAL_IMAGE_LEVEL_TYPES = 2;
}

message GetPartialImageRequest {
  string owner = 1;
  string repository = 2;
  string reference = 3;

  // If the image should exclude depdendencies. When set to true, a incomplete
  // image without descriptors for dependencies of the requested types is
  // returned.
  bool exclude_dependencies = 4;

  // Determines if the patterns specified in {messages,enums,services} should
  // consider types from imported modules.
  bool match_dependencies = 5;
  
  // Type names or patterns describing which messages should be included in the
  // partial image, e.g. 
  // - "pkg.foo.Bar" for a message named 'Bar' in 'pkg.foo'
  // - "pkg.foo.*" for all messages in package 'pkg.foo'
  // - "pkg.foo.*.**" for all messages under 'pkg.foo' and subpackages
  // - "*.**" for all messages in all packages.
  repeated string messages = 6;
  // Type names or patterns describing which enums should be included in the
  // partial image. For examples see `messages`.
  repeated string enums = 7;
  // Type names or patterns describing which services should be included in the
  // partial image. For examples see `messages`.
  repeated string services = 8;
}

message GetPartialImageResponse {
  // The commit the request reference resolved to. May be used on the
  // client side to merge multiple partial_image's into one for repeated
  // GetPartialImage requests on the same module.
  string resolved_commit = 1;

  buf.alpha.image.v1.Image partial_image = 2;
}
