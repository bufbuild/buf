// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/image/v1/image.proto";

// ImageService serves compiled images.
service ImageService {
  // GetImage serves a compiled image for the local module. It automatically
  // downloads dependencies if necessary.
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
}

// ImageMask is used in GetImageRequest to specify which parts of an image are
// requested.
enum ImageMask {
  IMAGE_MASK_UNSPECIFIED = 0;

  // IMAGE_MASK_MESSAGES refers to ImageFile's `google.protobuf.DescriptorProto
  // message_type` field.
  IMAGE_MASK_MESSAGES = 1;

  // IMAGE_MASK_ENUMS refers to ImageFile's `google.protobuf.EnumDescriptorProto
  // enum_type` field.
  IMAGE_MASK_ENUMS = 2;

  // IMAGE_MASK_SERVICES refers to ImageFile's
  // `google.protobuf.ServiceDescriptorProto service` field.
  IMAGE_MASK_SERVICES = 3;
}

message GetImageRequest {
  string owner = 1;
  string repository = 2;
  string reference = 3;

  // Exclude files from imported buf modules in this image.
  bool exclude_imports = 4;

  // Exclude source_code_info fields from each ImageFile.
  bool exclude_source_info = 5;

  // When specified the returned imageÂ will only contain the necessary files to
  // describe these types. Accepts messages, enums and services. All types must
  // be defined in the buf module, types in dependencies are not accepted.
  repeated string types = 6;

  // When `exclude_extensions` is true, images may omit extension declarations
  // for regular proto2 messages. When used in combination with `types`,
  // extensions will not be considered for determining what types are referenced
  // by the requested type.
  //
  // For example, in the following example proto structure:
  //
  //    --- foo.proto ---
  //    message Foo {
  //      optional Bar bar = 1 [(my_option).field = "buf"];
  //      extensions 2 to 3;
  //    }
  //    --- baz.proto ---
  //    extend Foo {
  //      optional Baz baz = 2;
  //    }
  //    --- qux.proto ---
  //    extend google.protobuf.FieldOptions {
  //      optional Qux my_option = 51234;
  //    }
  //
  //  When `exclude_extensions` is true and `types` is "Foo", the resulting image
  //  will contains types for "Foo", "Bar" and "Qux", but not "Baz".
  bool exclude_extensions = 7;

  // When `exclude_extensions` is true, images may omit extends declarations for
  // `google.protobuf.*Option` messages and their usage in annotations. When
  // used in combination with `types`, custom options will not be considered for
  // determining what types are referenced by the requested type.
  //
  // In the example proto referenced in `exclude_options`, if `exclude_options`
  // is true and `types` is "Foo", the resulting image will contains types for
  // "Foo", "Bar" and "Baz", but not "Qux". Field "bar" on "Foo" will not
  // have a custom option for "Qux" set.
  bool exclude_options = 8;

  // When not empty, the returned image's files will only include
  // *DescriptorProto fields for the elements specified here.
  repeated ImageMask include_mask = 9;
}

message GetImageResponse {
  buf.alpha.image.v1.Image image = 1;
}
