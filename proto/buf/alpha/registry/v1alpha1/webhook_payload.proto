// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/webhook.proto";
import "google/protobuf/timestamp.proto";

// WebhookListenerService represents a service implemented by a customer, to
// receive webhook events invocations from the BSR.
service WebhookListenerService {
  // ListenWebhook listens events from a registered webhook, triggered in the
  // BSR and forwared to the customer's backend.
  rpc ListenWebhook(ListenWebhookRequest) returns (ListenWebhookResponse) {}
}

// ListenWebhookRequest is the request sent to the customer's webhook listener
// service on each webhook invocation.
message ListenWebhookRequest {
  // payload is the actual webhook payload.
  WebhookPayload payload = 1;
}

// ListenWebhookResponse empty response for successful invocations receipts.
message ListenWebhookResponse {}

// WebhookPayload defines the structure of an actual webhook invocation.
message WebhookPayload {
  // The timestamp of when the event happened.
  google.protobuf.Timestamp event_time = 1;
  // The event that happened.
  buf.alpha.registry.v1alpha1.WebhookEvent event = 2;
  // The repository id tied to the event.
  string repository_id = 3;
  // Te repository commit id tied to the event.
  string repository_commit_id = 4;
  // The user id of the author who triggered the event.
  string author_user_id = 5;
}
