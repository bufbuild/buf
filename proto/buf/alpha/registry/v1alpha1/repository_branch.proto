// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/api/v1alpha1/api.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/bufbuild/buf/internal/gen/proto/go/buf/alpha/registry/v1alpha1;registryv1alpha1";

message RepositoryBranch {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // We reserve field number '3' for the update_time.
  // google.protobuf.Timestamp update_time = 3;
  // The name of the repository branch, i.e. "v1".
  string name = 4;
  // The ID of the repository this branch belongs to.
  string repository_id = 5;
}

// RepositoryBranchService is the Repository branch service.
// All methods on the Repository branch service require authentication.
service RepositoryBranchService {
  // CreateRepositoryBranch creates a new repository branch.
  rpc CreateRepositoryBranch(CreateRepositoryBranchRequest) returns (CreateRepositoryBranchResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_WRITE;
  }
  // ListRepositoryBranches lists the repository branches associated with a Repository.
  rpc ListRepositoryBranches(ListRepositoryBranchesRequest) returns (ListRepositoryBranchesResponse) {
    option (buf.alpha.api.v1alpha1.access_type) = ACCESS_TYPE_READ;
  }
}

message CreateRepositoryBranchRequest {
  // The ID of the repository this branch should be created on.
  string repository_id = 1;
  // The name of the repository branch, i.e. v1.
  string name = 2;
  // The name of the parent branch. The latest commit on this
  // branch will be used as the branch's parent.
  string parent_branch = 3;
}

message CreateRepositoryBranchResponse {
  RepositoryBranch repository_branch = 1;
}

message ListRepositoryBranchesRequest {
  // The ID of the repository whose branches should be listed.
  string repository_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListRepositoryBranchesResponse {
  repeated RepositoryBranch repository_branches = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}
