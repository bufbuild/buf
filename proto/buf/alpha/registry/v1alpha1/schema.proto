// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha1;

import "buf/alpha/registry/v1alpha1/module.proto";
import "google/protobuf/descriptor.proto";

// Provides endpoints for downloading dynamic schemas and for using schemas
// in validation and data transformation functions.
// TODO don't like name
service FileDescriptorSetService {
  // GetFileDescriptorSet allows the caller to download a schema for one or more requested
  // types, RPC services, or RPC methods.
  rpc GetFileDescriptorSet(GetFileDescriptorSetRequest) returns (GetFileDescriptorSetResponse);
}

service ConvertService {
  // ConvertMessage allows the caller to convert a given message data blob from
  // one format to another by referring to a type schema for the blob.
  rpc ConvertMessage(ConvertMessageRequest) returns (ConvertMessageResponse);
}

message GetFileDescriptorSetRequest {
  // always unwrap when easily possible for requests (ie dont use nested message)
  // TODO should these be here, or should we make this more generic?
  //string owner = 1;
  //string repository = 2;

  "buf.build/foo/bar"
  "foo/bar"
  // it is up to the implementation whether this is required
  string module/id/container/project = 1;
  // draft or commit
  // may be empty, if empty, this gets latest
  string version = 3;
  // One or more element names. The names may be type names (messages or enums),
  // service names, or method names. All names must be fully-qualified. If any name
  // is unknown, the request will fail and no schema will be returned.
  //
  // The resulting schema contains these elements and all of their dependencies,
  // which is enough information for the caller to construct a dynamic message for
  // any requested types (e.g. requested message types or request and response types
  // for requested service and method names).
  repeated string types = 4;
}

message GetFileDescriptorSetResponse {
  // The resolved version of the schema. If the request included a reference to a commit,
  // this value is the same as that commit. If the request included a reference to a tag,
  // this is the commit version for that tag. If the request did not include any version,
  // this is the latest version of the requested module.
  // TODO what is a "commit version"?
  // TODO should this even be part of the response?
  string version = 1;
  // The schema, which is a set of file descriptors that include the requested elements
  // and their dependencies.
  google.protobuf.FileDescriptorSet file_descriptor_set = 2;
}

enum Format {

}
message Message {
  string name
  string data
  Format format
}

message ConvertMessageRequest {
message BinaryOptions {
  // If true, the output will be deterministic. In particular, extension fields
  // will be emitted in tag number order and entries in map fields will be
  // ordered by key.
  //bool deterministic = 1;
}

message JSONOptions {
  // Indentation to use for multi-line output. If empty, the output will be
  // compact instead of multi-line. If not empty, it may contain only space
  // and tab characters.
  string indent = 1;
  // Emits JSON field names using the names as defined in proto source. If false
  // (the default), field names are emitted using a custom json_name option if
  // present or a camel-case version of the name otherwise.
  bool use_proto_names = 2;
  // Enum fields will be emitted as numeric values. If false (the dafault), enum
  // fields are emitted as strings that are the enum values' names.
  bool use_enum_numbers = 3;
  // Includes fields that have their default values. This applies only to fields
  // defined in proto3 syntax that have no explicit "optional" keyword. Other
  // optional fields will be included if present in the input data.
  bool include_defaults = 4;
}

message TextOptions {
  // Indentation to use for multi-line output. If empty, the output will be
  // compact instead of multi-line. If not empty, it may contain only space
  // and tab characters.
  string indent = 1;
  // If true and the input data includes unrecognized fields, the unrecognized
  // fields will be preserved in the text output (using field numbers and raw
  // values).
  bool include_unrecognized = 2;
}

  // TODO should these be here, or should we make this more generic?
  string owner = 1;
  string repository = 2;
  // draft or commit
  // may be empty, if empty, this gets latest
  string version = 3;


  message input = 1;
  Format output_format = 2;

  //// The fully-qualified name of the message. Required.
  //// TODO dont like message_*, but what to do?
  //string message_name = 2;
  //// The input data that is to be converted. Required. This must be
  //// a valid encoding of type indicated by message_name in the format
  //// indicated by input_format.
  //// TODO would prefer "data"
  //bytes message_data = 4;
  //// The format of the input data. Required.
  //// TODO would prefer "format"
  //Format message_format = 3;

  // If true, any unresolvable fields in the input are discarded. For
  // formats other than FORMAT_BINARY, this means that the operation
  // will fail if the input contains unrecognized field names. For
  // FORMAT_BINARY, unrecognized fields can be retained and possibly
  // included in the reformatted output (depending on the requested
  // output format).
  //bool discard_unknown = 5;

  // TODO if we have no binary or text options, can we do without JSON options at launch?
  oneof options {
    BinaryOptions binary_options = 6;
    JSONOptions json_options = 7;
    TextOptions text_options = 8;
  }
}

enum Format {
  FORMAT_UNSPECIFIED = 0;

  FORMAT_BINARY = 1;
  FORMAT_JSON = 2;
  FORMAT_TEXT = 3;
}


message ConvertMessageResponse {
  // The resolved version of the schema. If the request included a reference to a commit,
  // this value is the same as that commit. If the request included a reference to a tag,
  // this is the commit version for that tag. If the request did not include any version,
  // this is the latest version of the requested module.
  // TODO do we need this?
  string version = 1;
  // The reformatted data.
  bytes data = 2;
}
