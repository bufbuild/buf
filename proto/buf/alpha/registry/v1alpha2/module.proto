// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.alpha.registry.v1alpha2;

import "buf/alpha/registry/v1alpha1/user.proto";
import "buf/alpha/registry/v1alpha2/role.proto";
import "google/protobuf/timestamp.proto";

enum Visibility {
  VISIBILITY_UNSPECIFIED = 0;
  VISIBILITY_PUBLIC = 1;
  VISIBILITY_PRIVATE = 2;
}

message RemoteModule {
  // primary key, unique, immutable
  string id = 1;
  // immutable
  google.protobuf.Timestamp create_time = 2;
  // mutable
  google.protobuf.Timestamp update_time = 3;
  // unique, mutable
  string name = 4;
  oneof owner {
    // foreign key, mutable
    string user_id = 5;
    // foreign key, mutable
    string organization_id = 6;
  }
  Visibility visibility = 7;
  // deprecated means this module is deprecated.
  bool deprecated = 8;
  // deprecation_message is the message shown if the module is deprecated.
  string deprecation_message = 9;
}

message RemoteModuleCounts {
  uint32 tags_count = 1;
  uint32 tracks_count = 2;
}

message RemoteModuleContributor {
  buf.alpha.registry.v1alpha1.User user = 1;
  // The ID of the for which the role belongs to.
  string module_id = 2;
  // The role that the user has been explicitly assigned against the repository.
  RemoteModuleRole explicit_role = 3;
  // Optionally defines the role that the user has implicitly against the repository through the owning organization.
  // If the module does not belong to an organization or the user is not part of the owning organization, this is unset.
  RemoteModuleRole implicit_role = 4;
}

// RemoteModuleService is the RemoteModule service.
service RemoteModuleService {
  // GetRemoteModule gets a module by ID.
  rpc GetRemoteModule(GetRemoteModuleRequest) returns (GetRemoteModuleResponse);
  // GetRemoteModuleByFullName gets a module by full name.
  rpc GetRemoteModuleByFullName(GetRemoteModuleByFullNameRequest) returns (GetRemoteModuleByFullNameResponse);
  // ListRemoteModules lists all modules.
  rpc ListRemoteModules(ListRemoteModulesRequest) returns (ListRemoteModulesResponse);
  // ListUserRemoteModules lists all modules belonging to a user.
  rpc ListUserRemoteModules(ListUserRemoteModulesRequest) returns (ListUserRemoteModulesResponse);
  // ListRemoteModulesUserCanAccess lists all modules a user can access.
  rpc ListRemoteModulesUserCanAccess(ListRemoteModulesUserCanAccessRequest) returns (ListRemoteModulesUserCanAccessResponse);
  // ListOrganizationRemoteModules lists all modules for an organization.
  rpc ListOrganizationRemoteModules(ListOrganizationRemoteModulesRequest) returns (ListOrganizationRemoteModulesResponse);
  // CreateRemoteModuleByFullName creates a new module by full name.
  rpc CreateRemoteModuleByFullName(CreateRemoteModuleByFullNameRequest) returns (CreateRemoteModuleByFullNameResponse);
  // DeleteRemoteModule deletes a module.
  rpc DeleteRemoteModule(DeleteRemoteModuleRequest) returns (DeleteRemoteModuleResponse);
  // DeleteRemoteModuleByFullName deletes a module by full name.
  rpc DeleteRemoteModuleByFullName(DeleteRemoteModuleByFullNameRequest) returns (DeleteRemoteModuleByFullNameResponse);
  // DeprecateRemoteModuleByName deprecates the module.
  rpc DeprecateRemoteModuleByName(DeprecateRemoteModuleByNameRequest) returns (DeprecateRemoteModuleByNameResponse);
  // UndeprecateRemoteModuleByName makes the module not deprecated and removes any deprecation_message.
  rpc UndeprecateRemoteModuleByName(UndeprecateRemoteModuleByNameRequest) returns (UndeprecateRemoteModuleByNameResponse);
  // GetRemoteModulesByFullName gets modules by full name. Response order is unspecified.
  // Errors if any of the modules don't exist or the caller does not have access to any of the modules.
  rpc GetRemoteModulesByFullName(GetRemoteModulesByFullNameRequest) returns (GetRemoteModulesByFullNameResponse);
  // SetRemoteModuleContributor sets the role of a user in the module.
  rpc SetRemoteModuleContributor(SetRemoteModuleContributorRequest) returns (SetRemoteModuleContributorResponse);
  // ListRemoteModuleContributors returns the list of contributors that has an explicit role against the module.
  // This does not include users who have implicit roles against the module, unless they have also been
  // assigned a role explicitly.
  rpc ListRemoteModuleContributors(ListRemoteModuleContributorsRequest) returns (ListRemoteModuleContributorsResponse);
  // GetRemoteModuleContributor returns the contributor information of a user in a module.
  rpc GetRemoteModuleContributor(GetRemoteModuleContributorRequest) returns (GetRemoteModuleContributorResponse);
  // GetRemoteModuleSettings gets the settings of a module.
  rpc GetRemoteModuleSettings(GetRemoteModuleSettingsRequest) returns (GetRemoteModuleSettingsResponse);
  // UpdateRemoteModuleSettingsByName updates the settings of a module.
  rpc UpdateRemoteModuleSettingsByName(UpdateRemoteModuleSettingsByNameRequest) returns (UpdateRemoteModuleSettingsByNameResponse);
}

message GetRemoteModulesByFullNameRequest {
  // minimum length is 1
  // maximum length is 250
  repeated string full_names = 1;
}

message GetRemoteModulesByFullNameResponse {
  repeated RemoteModule modules = 1;
}

message GetRemoteModuleRequest {
  string id = 1;
}

message GetRemoteModuleResponse {
  RemoteModule module = 1;
  RemoteModuleCounts counts = 2;
}

message GetRemoteModuleByFullNameRequest {
  string full_name = 1;
}

message GetRemoteModuleByFullNameResponse {
  RemoteModule module = 1;
  RemoteModuleCounts counts = 2;
}

message ListRemoteModulesRequest {
  uint32 page_size = 1;
  // The first page is returned if this is empty.
  string page_token = 2;
  bool reverse = 3;
}

message ListRemoteModulesResponse {
  repeated RemoteModule modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListUserRemoteModulesRequest {
  // The ID of the user whose modules should be listed.
  string user_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListUserRemoteModulesResponse {
  repeated RemoteModule modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListRemoteModulesUserCanAccessRequest {
  uint32 page_size = 1;
  // The first page is returned if this is empty.
  string page_token = 2;
  bool reverse = 3;
}

message ListRemoteModulesUserCanAccessResponse {
  repeated RemoteModule modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message ListOrganizationRemoteModulesRequest {
  // The ID of the organization whose modules should be listed.
  string organization_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListOrganizationRemoteModulesResponse {
  repeated RemoteModule modules = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message CreateRemoteModuleByFullNameRequest {
  // Must be unique across modules.
  string full_name = 1;
  Visibility visibility = 2;
}

message CreateRemoteModuleByFullNameResponse {
  RemoteModule module = 1;
}

message DeleteRemoteModuleRequest {
  string id = 1;
}

message DeleteRemoteModuleResponse {}

message DeleteRemoteModuleByFullNameRequest {
  string full_name = 1;
}

message DeleteRemoteModuleByFullNameResponse {}

message DeprecateRemoteModuleByNameRequest {
  string owner_name = 1;
  string module_name = 2;
  // A message shown along with the deprecation warning for this module.
  // It must be a utf8 encoded string containing 256 or fewer characters.
  string deprecation_message = 3;
}

message DeprecateRemoteModuleByNameResponse {
  RemoteModule module = 1;
}

message UndeprecateRemoteModuleByNameRequest {
  string owner_name = 1;
  string module_name = 2;
}

message UndeprecateRemoteModuleByNameResponse {
  RemoteModule module = 1;
}

message SetRemoteModuleContributorRequest {
  // The ID of the module for which the user's role will be set.
  string module_id = 1;
  // The ID of the user whose role will be set.
  string user_id = 2;
  // The role to assign to the user.
  // Setting UNSPECIFIED means removing the user's role.
  RemoteModuleRole module_role = 3;
}

message SetRemoteModuleContributorResponse {}

message ListRemoteModuleContributorsRequest {
  string module_id = 1;
  uint32 page_size = 2;
  // The first page is returned if this is empty.
  string page_token = 3;
  bool reverse = 4;
}

message ListRemoteModuleContributorsResponse {
  repeated RemoteModuleContributor users = 1;
  // There are no more pages if this is empty.
  string next_page_token = 2;
}

message GetRemoteModuleContributorRequest {
  // The ID of the module for which to get the contributor information.
  string module_id = 1;
  // The ID of the user for which to get the contributor information.
  string user_id = 2;
}

message GetRemoteModuleContributorResponse {
  // The contributor information of the user in the module.
  RemoteModuleContributor user = 1;
}

message GetRemoteModuleSettingsRequest {
  // The ID of the module for which to get the settings.
  string module_id = 1;
}

message GetRemoteModuleSettingsResponse {
  // The number of outside contributors in the module,
  // excluding owning-organization's members that have an explicit role.
  uint32 contributors_count = 1;
}

message UpdateRemoteModuleSettingsByNameRequest {
  string owner_name = 1;
  string module_name = 2;
  // Changes are only made to specified values. Unspecified ones are left unchanged.
  Visibility visibility = 3;
}

message UpdateRemoteModuleSettingsByNameResponse {}
