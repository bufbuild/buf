// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package buf.alpha.image.v1;

import "google/protobuf/descriptor.proto";

option cc_enable_arenas = true;
option go_package = "github.com/bufbuild/buf/internal/gen/proto/go/buf/alpha/image/v1;imagev1";
option optimize_for = SPEED;

// Image is analogous to a FileDescriptorSet.
message Image {
  // file matches the file field of a FileDescriptorSet.
  repeated google.protobuf.FileDescriptorProto file = 1;

  // bufbuild_image_extension is the ImageExtension for this image.
  //
  // The prefixed name and high tag value is used to all but guarantee there
  // will never be any conflict with Google's FileDescriptorSet definition.
  // The definition of a FileDescriptorSet has not changed in 11 years, so
  // we're not too worried about a conflict here.
  optional ImageExtension bufbuild_image_extension = 8042;
}

// ImageExtension contains extensions to Images.
//
// The fields are not included directly on the Image so that we can both
// detect if extensions exist, which signifies this was created by buf
// and not by protoc, and so that we can add fields in a freeform manner
// without worrying about conflicts with google.protobuf.FileDescriptorSet.
message ImageExtension {
  // image_import_refs are the image import references for this specific Image.
  //
  // A given FileDescriptorProto may or may not be an import depending on
  // the image context, so this information is not stored on each FileDescriptorProto.
  repeated ImageImportRef image_import_refs = 1;
}

// ImageImportRef is a reference to an image import.
//
// This is a message type instead of a scalar type so that we can add
// additional information about an import reference in the future, such as
// the external location of the import.
message ImageImportRef {
  // file_index is the index within the Image file array of the import.
  //
  // This signifies that file[file_index] is an import.
  // This field must be set.
  optional uint32 file_index = 1;
}
