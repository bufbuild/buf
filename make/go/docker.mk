# Managed by makego. DO NOT EDIT.

# Must be set
$(call _assert_var,MAKEGO)
$(call _conditional_include,$(MAKEGO)/base.mk)
# Must be set
$(call _assert_var,PROJECT)
# Must be set
$(call _assert_var,GO_MODULE)
# Must be set
$(call _assert_var,DOCKER_ORG)
# Must be set
$(call _assert_var,DOCKER_PROJECT)

DOCKER_WORKSPACE_IMAGE := $(DOCKER_ORG)/$(DOCKER_PROJECT)-workspace
DOCKER_WORKSPACE_FILE := Dockerfile.workspace
DOCKER_WORKSPACE_DIR := /workspace

# Settable
DOCKER_BINS ?=

# Runtime
DOCKERMAKETARGET ?= all

.PHONY: dockerbuildworkspace
dockerbuildworkspace:
	docker build \
		--build-arg PROJECT=$(PROJECT) \
		--build-arg GO_MODULE=$(GO_MODULE) \
		-t $(DOCKER_WORKSPACE_IMAGE) \
		-f $(DOCKER_WORKSPACE_FILE) \
		.

.PHONY: dockermakeworkspace
dockermakeworkspace: dockerbuildworkspace
	docker run -v "$(CURDIR):$(DOCKER_WORKSPACE_DIR)" $(DOCKER_WORKSPACE_IMAGE) make -j 8 $(DOCKERMAKETARGET)

.PHONY: dockerbuild
dockerbuild::

define dockerbinfunc
.PHONY: dockerbuild$(1)
dockerbuild$(1):
	docker build \
		-t $(DOCKER_ORG)/$(1):latest \
		-f Dockerfile.$(1) \
		.

dockerbuild:: dockerbuild$(1)
endef

$(foreach dockerbin,$(sort $(DOCKER_BINS)),$(eval $(call dockerbinfunc,$(dockerbin))))

.PHONY: updatedockerignores
updatedockerignores:
	@rm -f .dockerignore
	@echo '# Autogenerated by makego. DO NOT EDIT.' > .dockerignore
	@$(foreach file_ignore,$(sort $(FILE_IGNORES)),echo $(file_ignore) >> .dockerignore || exit 1;)

pregenerate:: updatedockerignores
