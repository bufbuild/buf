// Copyright 2020 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bufmodule

import (
	"context"

	"github.com/bufbuild/buf/internal/pkg/encoding"
	"github.com/bufbuild/buf/internal/pkg/storage"
	"go.opencensus.io/trace"
	"go.uber.org/multierr"
)

// externalLockFile represents the buf.lock configuration file.
type externalLockFile struct {
	Deps []string `json:"deps" yaml:"deps"`
}

// putDependencies puts the lock file representation of the given dependencies into the given write bucket.
// It validates that all module names are resolved (have a digest) and that there are no duplicates.
func putDependencies(ctx context.Context, writeBucket storage.WriteBucket, dependencies []ResolvedModuleName) (retErr error) {
	sortResolvedModuleNames(dependencies)
	if err := ValidateResolvedModuleNamesUnique(dependencies); err != nil {
		return err
	}
	var dependencyStrings []string
	for _, dependency := range dependencies {
		if dependency.Digest() == "" {
			return NewNoDigestError(dependency)
		}
		dependencyStrings = append(dependencyStrings, dependency.String())
	}
	externalLock := &externalLockFile{
		Deps: dependencyStrings,
	}
	yamlBytes, err := encoding.MarshalYAML(externalLock)
	if err != nil {
		return err
	}
	header := []byte("# Generated by buf. DO NOT EDIT.\n")
	return storage.PutPath(ctx, writeBucket, LockFilePath, append(header, yamlBytes...))
}

func dependenciesForBucket(ctx context.Context, readBucket storage.ReadBucket) (_ []ResolvedModuleName, retErr error) {
	ctx, span := trace.StartSpan(ctx, "get_lock_file")
	defer span.End()

	readObject, err := readBucket.Get(ctx, LockFilePath)
	if err != nil {
		if storage.IsNotExist(err) {
			// If the lock file doesn't exist, just return no dependencies.
			return nil, nil
		}
		return nil, err
	}
	defer func() {
		retErr = multierr.Append(retErr, readObject.Close())
	}()
	externalLockFile := &externalLockFile{}
	if err := encoding.NewYAMLDecoderStrict(readObject).Decode(externalLockFile); err != nil {
		return nil, err
	}
	dependencies := make([]ResolvedModuleName, len(externalLockFile.Deps))
	for i, dep := range externalLockFile.Deps {
		dependency, err := ResolvedModuleNameForString(dep)
		if err != nil {
			return nil, err
		}
		dependencies[i] = dependency
	}
	sortResolvedModuleNames(dependencies)
	if err := ValidateResolvedModuleNamesUnique(dependencies); err != nil {
		return nil, err
	}
	return dependencies, nil
}
