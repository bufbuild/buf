// Copyright 2020 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package buffetch

import (
	"context"
	"fmt"
	"testing"

	"github.com/bufbuild/buf/internal/pkg/app"
	"github.com/bufbuild/buf/internal/pkg/fetch"
	"github.com/bufbuild/buf/internal/pkg/git"
	"github.com/stretchr/testify/assert"
	"go.uber.org/zap"
)

var (
	testAllowedFormats = []string{
		formatBin,
		formatJSON,
		formatBingz,
		formatJSONGZ,
		formatTar,
		formatTargz,
		formatZip,
		formatGit,
		formatDir,
	}
)

func TestGetParsedRefSuccess(t *testing.T) {
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			"path/to/dir",
		),
		"path/to/dir",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			".",
		),
		".",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			"/",
		),
		"/",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			".",
		),
		"foo/..",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			"../foo",
		),
		"../foo",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedDirRef(
			formatDir,
			"/foo",
		),
		"/foo/bar/..",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			0,
		),
		"path/to/file.tar",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"/path/to/file.tar",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			0,
		),
		"file:///path/to/file.tar",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			1,
		),
		"path/to/file.tar#strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar.gz",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			0,
		),
		"path/to/file.tar.gz",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar.gz",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			1,
		),
		"path/to/file.tar.gz#strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tgz",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			0,
		),
		"path/to/file.tgz",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tgz",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			1,
		),
		"path/to/file.tgz#strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar",
			fetch.FileSchemeHTTP,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			0,
		),
		"http://path/to/file.tar",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar",
			fetch.FileSchemeHTTPS,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			0,
		),
		"https://path/to/file.tar",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatZip,
			"path/to/file.zip",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeZip,
			fetch.CompressionTypeNone,
			0,
		),
		"path/to/file.zip",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatZip,
			"/path/to/file.zip",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeZip,
			fetch.CompressionTypeNone,
			0,
		),
		"file:///path/to/file.zip",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatZip,
			"path/to/file.zip",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeZip,
			fetch.CompressionTypeNone,
			1,
		),
		"path/to/file.zip#strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir.git",
			fetch.GitSchemeLocal,
			nil,
			false,
			1,
		),
		"path/to/dir.git",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir.git",
			fetch.GitSchemeLocal,
			nil,
			false,
			40,
		),
		"path/to/dir.git#depth=40",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir.git",
			fetch.GitSchemeLocal,
			git.NewBranchName("master"),
			false,
			1,
		),
		"path/to/dir.git#branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"/path/to/dir.git",
			fetch.GitSchemeLocal,
			git.NewBranchName("master"),
			false,
			1,
		),
		"file:///path/to/dir.git#branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir.git",
			fetch.GitSchemeLocal,
			git.NewTagName("v1.0.0"),
			false,
			1,
		),
		"path/to/dir.git#tag=v1.0.0",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"hello.com/path/to/dir.git",
			fetch.GitSchemeHTTP,
			git.NewBranchName("master"),
			false,
			1,
		),
		"http://hello.com/path/to/dir.git#branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"hello.com/path/to/dir.git",
			fetch.GitSchemeHTTPS,
			git.NewBranchName("master"),
			false,
			1,
		),
		"https://hello.com/path/to/dir.git#branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"user@hello.com:path/to/dir.git",
			fetch.GitSchemeSSH,
			git.NewBranchName("master"),
			false,
			1,
		),
		"ssh://user@hello.com:path/to/dir.git#branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"user@hello.com:path/to/dir.git",
			fetch.GitSchemeSSH,
			git.NewRefName("refs/remotes/origin/HEAD"),
			false,
			50,
		),
		"ssh://user@hello.com:path/to/dir.git#ref=refs/remotes/origin/HEAD",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"user@hello.com:path/to/dir.git",
			fetch.GitSchemeSSH,
			git.NewRefNameWithBranch("refs/remotes/origin/HEAD", "master"),
			false,
			50,
		),
		"ssh://user@hello.com:path/to/dir.git#ref=refs/remotes/origin/HEAD,branch=master",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"user@hello.com:path/to/dir.git",
			fetch.GitSchemeSSH,
			git.NewRefName("refs/remotes/origin/HEAD"),
			false,
			10,
		),
		"ssh://user@hello.com:path/to/dir.git#ref=refs/remotes/origin/HEAD,depth=10",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"user@hello.com:path/to/dir.git",
			fetch.GitSchemeSSH,
			git.NewRefNameWithBranch("refs/remotes/origin/HEAD", "master"),
			false,
			10,
		),
		"ssh://user@hello.com:path/to/dir.git#ref=refs/remotes/origin/HEAD,branch=master,depth=10",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/file.bin",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeNone,
		),
		"path/to/file.bin",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/file.bin.gz",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeGzip,
		),
		"path/to/file.bin.gz",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatJSON,
			"path/to/file.json",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeNone,
		),
		"path/to/file.json",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatJSON,
			"path/to/file.json.gz",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeGzip,
		),
		"path/to/file.json.gz",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatJSON,
			"path/to/file.json.gz",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeNone,
		),
		"path/to/file.json.gz#compression=none",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatJSON,
			"path/to/file.json.gz",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeGzip,
		),
		"path/to/file.json.gz#compression=gzip",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"",
			fetch.FileSchemeStdio,
			fetch.CompressionTypeNone,
		),
		"-",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatJSON,
			"",
			fetch.FileSchemeStdio,
			fetch.CompressionTypeNone,
		),
		"-#format=json",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"",
			fetch.FileSchemeNull,
			fetch.CompressionTypeNone,
		),
		app.DevNullFilePath,
	)
	// TODO: this needs to be moved to a unix-only test
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"",
			fetch.FileSchemeStdin,
			fetch.CompressionTypeNone,
		),
		app.DevStdinFilePath,
	)
	// TODO: this needs to be moved to a unix-only test
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"",
			fetch.FileSchemeStdout,
			fetch.CompressionTypeNone,
		),
		app.DevStdoutFilePath,
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/dir",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeNone,
		),
		"path/to/dir#format=bin",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/dir",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeNone,
		),
		"path/to/dir#format=bin,compression=none",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/dir",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeGzip,
		),
		"path/to/dir#format=bin,compression=gzip",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"/path/to/dir",
			fetch.GitSchemeLocal,
			git.NewBranchName("master"),
			false,
			1,
		),
		"/path/to/dir#branch=master,format=git",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"/path/to/dir",
			fetch.GitSchemeLocal,
			git.NewBranchName("master/foo"),
			false,
			1,
		),
		"/path/to/dir#format=git,branch=master/foo",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewTagName("master/foo"),
			false,
			1,
		),
		"path/to/dir#tag=master/foo,format=git",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewTagName("master/foo"),
			false,
			1,
		),
		"path/to/dir#format=git,tag=master/foo",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewTagName("master/foo"),
			true,
			1,
		),
		"path/to/dir#format=git,tag=master/foo,recurse_submodules=true",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewTagName("master/foo"),
			false,
			1,
		),
		"path/to/dir#format=git,tag=master/foo,recurse_submodules=false",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewRefName("refs/remotes/origin/HEAD"),
			false,
			50,
		),
		"path/to/dir#format=git,ref=refs/remotes/origin/HEAD",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedGitRef(
			formatGit,
			"path/to/dir",
			fetch.GitSchemeLocal,
			git.NewRefName("refs/remotes/origin/HEAD"),
			false,
			10,
		),
		"path/to/dir#format=git,ref=refs/remotes/origin/HEAD,depth=10",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTargz,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			1,
		),
		"path/to/file#format=targz,strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			1,
		),
		"path/to/file#format=tar,strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeNone,
			1,
		),
		"path/to/file#format=tar,strip_components=1,compression=none",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeGzip,
			1,
		),
		"path/to/file#format=tar,strip_components=1,compression=gzip",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatZip,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeZip,
			fetch.CompressionTypeNone,
			1,
		),
		"path/to/file#format=zip,strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar.zst",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeZstd,
			0,
		),
		"path/to/file.tar.zst",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file.tar.zst",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeZstd,
			1,
		),
		"path/to/file.tar.zst#strip_components=1",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedArchiveRef(
			formatTar,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.ArchiveTypeTar,
			fetch.CompressionTypeZstd,
			1,
		),
		"path/to/file#format=tar,strip_components=1,compression=zstd",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/file",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeZstd,
		),
		"path/to/file#format=bin,compression=zstd",
	)
	testGetParsedRefSuccess(
		t,
		fetch.NewDirectParsedSingleRef(
			formatBin,
			"path/to/file.bin.zst",
			fetch.FileSchemeLocal,
			fetch.CompressionTypeZstd,
		),
		"path/to/file.bin.zst",
	)
}

func TestGetParsedRefError(t *testing.T) {
	testGetParsedRefError(
		t,
		fetch.NewValueEmptyError(),
		"",
	)
	testGetParsedRefError(
		t,
		fetch.NewValueMultipleHashtagsError("foo#format=git#branch=master"),
		"foo#format=git#branch=master",
	)
	testGetParsedRefError(
		t,
		fetch.NewValueStartsWithHashtagError("#path/to/dir"),
		"#path/to/dir",
	)
	testGetParsedRefError(
		t,
		fetch.NewValueEndsWithHashtagError("path/to/dir#"),
		"path/to/dir#",
	)
	testGetParsedRefError(
		t,
		fetch.NewInvalidDirPathError("-"),
		"-#format=dir",
	)
	testGetParsedRefError(
		t,
		fetch.NewInvalidGitPathError("-"),
		"-#format=git,branch=master",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyGitBranchAndTagError(),
		"path/to/foo#format=git,branch=foo,tag=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyGitBranchAndTagError(),
		"path/to/foo#format=git,branch=foo,tag=bar,ref=baz",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyTagWithRefError(),
		"path/to/foo#format=git,tag=foo,ref=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewDepthParseError("bar"),
		"path/to/foo#format=git,depth=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewDepthZeroError(),
		"path/to/foo#format=git,ref=foor,depth=0",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsDuplicateKeyError("branch"),
		"path/to/foo#format=git,branch=foo,branch=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewPathUnknownGzError("path/to/foo.gz"),
		"path/to/foo.gz",
	)
	testGetParsedRefError(
		t,
		fetch.NewPathUnknownGzError("path/to/foo.bar.gz"),
		"path/to/foo.bar.gz",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidError("bar"),
		"path/to/foo#bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidError("bar="),
		"path/to/foo#bar=",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidError("format=bin,bar="),
		"path/to/foo#format=bin,bar=",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidError("format=bin,=bar"),
		"path/to/foo#format=bin,=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewFormatOverrideNotAllowedForDevNullError(app.DevNullFilePath),
		fmt.Sprintf("%s#format=bin", app.DevNullFilePath),
	)
	testGetParsedRefError(
		t,
		fetch.NewFormatUnknownError("bar"),
		"path/to/foo#format=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsCouldNotParseStripComponentsError("foo"),
		"path/to/foo.tar.gz#strip_components=foo",
	)
	testGetParsedRefError(
		t,
		fetch.NewCompressionUnknownError("foo"),
		"path/to/foo.tar.gz#compression=foo",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidKeyError("foo"),
		"path/to/foo.tar.gz#foo=bar",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidForFormatError(formatTar, "path/to/foo.tar.gz#branch=master"),
		"path/to/foo.tar.gz#branch=master",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidForFormatError(formatDir, "path/to/foo#strip_components=1"),
		"path/to/foo#strip_components=1",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsDuplicateKeyError("strip_components"),
		"path/to/foo.tar#strip_components=0,strip_components=1",
	)
	testGetParsedRefError(
		t,
		fetch.NewOptionsInvalidForFormatError(formatDir, "path/to/foo#compression=none"),
		"path/to/foo#compression=none",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyCompressionForZipError(),
		"path/to/foo.zip#compression=none",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyCompressionForZipError(),
		"path/to/foo.zip#compression=gzip",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyCompressionForZipError(),
		"path/to/foo#format=zip,compression=none",
	)
	testGetParsedRefError(
		t,
		fetch.NewCannotSpecifyCompressionForZipError(),
		"path/to/foo#format=zip,compression=gzip",
	)
}

func testGetParsedRefSuccess(
	t *testing.T,
	expectedRef fetch.ParsedRef,
	value string,
) {
	testGetParsedRef(
		t,
		expectedRef,
		nil,
		value,
	)
}

func testGetParsedRefError(
	t *testing.T,
	expectedErr error,
	value string,
) {
	testGetParsedRef(
		t,
		nil,
		expectedErr,
		value,
	)
}

func testGetParsedRef(
	t *testing.T,
	expectedParsedRef fetch.ParsedRef,
	expectedErr error,
	value string,
) {
	t.Run(value, func(t *testing.T) {
		t.Parallel()
		parsedRef, err := newRefParser(zap.NewNop()).getParsedRef(
			context.Background(),
			value,
			testAllowedFormats,
		)
		if expectedErr != nil {
			assert.Equal(t, expectedErr, err)
		} else {
			assert.NoError(t, err)
			assert.Equal(t, expectedParsedRef, parsedRef)
		}
	})
}
