// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/resolve.proto

package registryv1alpha1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ========================
// ResolveService Interface
// ========================

// ResolveService is the resolve service.
//
// This is the public service.
type ResolveService interface {
	// GetModulePins finds all the latest digests and respective dependencies of
	// the provided module references and picks a set of distinct modules pins.
	//
	// Note that module references with commits should still be passed to this function
	// to make sure this function can do dependency resolution.
	//
	// This function also deals with tiebreaking what ModulePin wins for the same repository.
	GetModulePins(context.Context, *GetModulePinsRequest) (*GetModulePinsResponse, error)
}

// ==============================
// ResolveService Protobuf Client
// ==============================

type resolveServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewResolveServiceProtobufClient creates a Protobuf client that implements the ResolveService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewResolveServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) ResolveService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "ResolveService")
	urls := [1]string{
		serviceURL + "GetModulePins",
	}

	return &resolveServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *resolveServiceProtobufClient) GetModulePins(ctx context.Context, in *GetModulePinsRequest) (*GetModulePinsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "ResolveService")
	ctx = ctxsetters.WithMethodName(ctx, "GetModulePins")
	caller := c.callGetModulePins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetModulePinsRequest) (*GetModulePinsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModulePinsRequest) when calling interceptor")
					}
					return c.callGetModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *resolveServiceProtobufClient) callGetModulePins(ctx context.Context, in *GetModulePinsRequest) (*GetModulePinsResponse, error) {
	out := new(GetModulePinsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// ResolveService JSON Client
// ==========================

type resolveServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewResolveServiceJSONClient creates a JSON client that implements the ResolveService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewResolveServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) ResolveService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "ResolveService")
	urls := [1]string{
		serviceURL + "GetModulePins",
	}

	return &resolveServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *resolveServiceJSONClient) GetModulePins(ctx context.Context, in *GetModulePinsRequest) (*GetModulePinsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "ResolveService")
	ctx = ctxsetters.WithMethodName(ctx, "GetModulePins")
	caller := c.callGetModulePins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetModulePinsRequest) (*GetModulePinsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModulePinsRequest) when calling interceptor")
					}
					return c.callGetModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *resolveServiceJSONClient) callGetModulePins(ctx context.Context, in *GetModulePinsRequest) (*GetModulePinsResponse, error) {
	out := new(GetModulePinsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =============================
// ResolveService Server Handler
// =============================

type resolveServiceServer struct {
	ResolveService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewResolveServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewResolveServiceServer(svc ResolveService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &resolveServiceServer{
		ResolveService:   svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *resolveServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *resolveServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// ResolveServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const ResolveServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.ResolveService/"

func (s *resolveServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "ResolveService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.ResolveService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetModulePins":
		s.serveGetModulePins(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *resolveServiceServer) serveGetModulePins(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetModulePinsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetModulePinsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *resolveServiceServer) serveGetModulePinsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetModulePins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetModulePinsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.ResolveService.GetModulePins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetModulePinsRequest) (*GetModulePinsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModulePinsRequest) when calling interceptor")
					}
					return s.ResolveService.GetModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetModulePinsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetModulePinsResponse and nil error while calling GetModulePins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *resolveServiceServer) serveGetModulePinsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetModulePins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetModulePinsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.ResolveService.GetModulePins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetModulePinsRequest) (*GetModulePinsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetModulePinsRequest) when calling interceptor")
					}
					return s.ResolveService.GetModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetModulePinsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetModulePinsResponse and nil error while calling GetModulePins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *resolveServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor17, 0
}

func (s *resolveServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *resolveServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "ResolveService")
}

// =============================
// LocalResolveService Interface
// =============================

// LocalResolveService is the local resolve service.
//
// This is called by ResolveService implementations, and is enterprise.
type LocalResolveService interface {
	// GetLocalModulePins gets the latest pins for the specified local module references.
	// It also includes all of the modules transitive dependencies for the specified references.
	//
	// We want this for two reasons:
	//
	// 1. It makes it easy to say "we know we're looking for owner/repo on this specific remote".
	//    While we could just do this in GetModulePins by being aware of what our remote is
	//    (something we probably still need to know, DNS problems aside, which are more
	//    theoretical), this helps.
	// 2. Having a separate method makes us able to say "do not make decisions about what
	//    wins between competing pins for the same repo". This should only be done in
	//    GetModulePins, not in this function, i.e. only done at the top level.
	GetLocalModulePins(context.Context, *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error)
}

// ===================================
// LocalResolveService Protobuf Client
// ===================================

type localResolveServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewLocalResolveServiceProtobufClient creates a Protobuf client that implements the LocalResolveService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewLocalResolveServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) LocalResolveService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "LocalResolveService")
	urls := [1]string{
		serviceURL + "GetLocalModulePins",
	}

	return &localResolveServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *localResolveServiceProtobufClient) GetLocalModulePins(ctx context.Context, in *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "LocalResolveService")
	ctx = ctxsetters.WithMethodName(ctx, "GetLocalModulePins")
	caller := c.callGetLocalModulePins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetLocalModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetLocalModulePinsRequest) when calling interceptor")
					}
					return c.callGetLocalModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLocalModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLocalModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *localResolveServiceProtobufClient) callGetLocalModulePins(ctx context.Context, in *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
	out := new(GetLocalModulePinsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// LocalResolveService JSON Client
// ===============================

type localResolveServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewLocalResolveServiceJSONClient creates a JSON client that implements the LocalResolveService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewLocalResolveServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) LocalResolveService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "LocalResolveService")
	urls := [1]string{
		serviceURL + "GetLocalModulePins",
	}

	return &localResolveServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *localResolveServiceJSONClient) GetLocalModulePins(ctx context.Context, in *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "LocalResolveService")
	ctx = ctxsetters.WithMethodName(ctx, "GetLocalModulePins")
	caller := c.callGetLocalModulePins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetLocalModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetLocalModulePinsRequest) when calling interceptor")
					}
					return c.callGetLocalModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLocalModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLocalModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *localResolveServiceJSONClient) callGetLocalModulePins(ctx context.Context, in *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
	out := new(GetLocalModulePinsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================================
// LocalResolveService Server Handler
// ==================================

type localResolveServiceServer struct {
	LocalResolveService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewLocalResolveServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewLocalResolveServiceServer(svc LocalResolveService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &localResolveServiceServer{
		LocalResolveService: svc,
		hooks:               serverOpts.Hooks,
		interceptor:         twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:          pathPrefix,
		jsonSkipDefaults:    jsonSkipDefaults,
		jsonCamelCase:       jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *localResolveServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *localResolveServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// LocalResolveServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const LocalResolveServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.LocalResolveService/"

func (s *localResolveServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "LocalResolveService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.LocalResolveService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "GetLocalModulePins":
		s.serveGetLocalModulePins(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *localResolveServiceServer) serveGetLocalModulePins(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetLocalModulePinsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetLocalModulePinsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *localResolveServiceServer) serveGetLocalModulePinsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetLocalModulePins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetLocalModulePinsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.LocalResolveService.GetLocalModulePins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetLocalModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetLocalModulePinsRequest) when calling interceptor")
					}
					return s.LocalResolveService.GetLocalModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLocalModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLocalModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetLocalModulePinsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetLocalModulePinsResponse and nil error while calling GetLocalModulePins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *localResolveServiceServer) serveGetLocalModulePinsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetLocalModulePins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetLocalModulePinsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.LocalResolveService.GetLocalModulePins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetLocalModulePinsRequest) (*GetLocalModulePinsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetLocalModulePinsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetLocalModulePinsRequest) when calling interceptor")
					}
					return s.LocalResolveService.GetLocalModulePins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLocalModulePinsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLocalModulePinsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetLocalModulePinsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetLocalModulePinsResponse and nil error while calling GetLocalModulePins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *localResolveServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor17, 1
}

func (s *localResolveServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *localResolveServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "LocalResolveService")
}

var twirpFileDescriptor17 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xd9, 0x44, 0x42, 0x62, 0x5a, 0xaa, 0x74, 0x4b, 0xd4, 0x34, 0x45, 0xb4, 0x0a, 0x08,
	0x4a, 0x91, 0x6c, 0x35, 0x08, 0x38, 0x20, 0x0e, 0x49, 0xea, 0x7e, 0x48, 0xfd, 0x88, 0xb6, 0xa1,
	0x88, 0x1e, 0xb0, 0x62, 0x7b, 0x92, 0x1a, 0x39, 0x6b, 0xe3, 0xb5, 0x23, 0xf5, 0x01, 0x40, 0x3c,
	0x01, 0x37, 0x2e, 0xdc, 0xe0, 0xc2, 0x53, 0xf0, 0x1a, 0x3c, 0x0b, 0xf2, 0x57, 0x9d, 0xa4, 0x8e,
	0xdb, 0x70, 0x4a, 0x32, 0xfb, 0x9f, 0xdf, 0xfc, 0x3d, 0x33, 0x59, 0xc3, 0x53, 0xcd, 0xef, 0xc9,
	0x5d, 0xcb, 0x39, 0xef, 0xca, 0x2e, 0xf6, 0x4d, 0xe1, 0xb9, 0x17, 0xf2, 0x70, 0x2b, 0x0c, 0x6c,
	0xc9, 0x2e, 0x0a, 0xdb, 0x1a, 0xa2, 0xe4, 0xb8, 0xb6, 0x67, 0xd3, 0x55, 0xcd, 0xef, 0x49, 0xe1,
	0x89, 0x94, 0x48, 0xa5, 0x44, 0x5a, 0x7d, 0x9c, 0x72, 0x06, 0xb6, 0xe1, 0x5b, 0x98, 0x52, 0xa2,
	0xdf, 0x11, 0xa4, 0xba, 0x91, 0x57, 0x6f, 0x54, 0x59, 0xfb, 0x43, 0xe0, 0xde, 0x2e, 0x7a, 0x87,
	0x61, 0xac, 0x6d, 0x72, 0xc1, 0xf0, 0x93, 0x8f, 0xc2, 0xa3, 0xef, 0x60, 0x31, 0x12, 0xaa, 0x2e,
	0xf6, 0xd0, 0x45, 0xae, 0xa3, 0xa8, 0x90, 0xf5, 0xe2, 0xc6, 0x5c, 0x7d, 0x53, 0x4a, 0x3d, 0xc6,
	0xb0, 0x04, 0x2e, 0x45, 0x20, 0x96, 0xa4, 0xb0, 0xd2, 0x60, 0x3c, 0x20, 0x68, 0x07, 0x96, 0x74,
	0xdf, 0x75, 0x91, 0x7b, 0x6a, 0x5c, 0xc0, 0x31, 0xb9, 0xa8, 0x14, 0x42, 0xf4, 0xa3, 0x6b, 0xd1,
	0x6d, 0x93, 0xb3, 0xc5, 0x18, 0x90, 0xba, 0xae, 0x7d, 0x80, 0xf2, 0xc4, 0x63, 0x08, 0xc7, 0xe6,
	0x02, 0xa9, 0x02, 0x73, 0xa3, 0x65, 0xc8, 0x0c, 0x65, 0x60, 0x90, 0xf2, 0xbf, 0x10, 0x58, 0xd9,
	0x45, 0xef, 0xc0, 0xd6, 0xbb, 0xd6, 0xd5, 0x66, 0x99, 0xb0, 0x6c, 0x05, 0x27, 0xea, 0xb4, 0x96,
	0x6d, 0x49, 0x39, 0x63, 0x95, 0x46, 0xa8, 0x69, 0xe7, 0xca, 0x56, 0x46, 0x54, 0xd4, 0xbe, 0x15,
	0xa0, 0x32, 0xa6, 0x0f, 0x97, 0x87, 0xa1, 0xf0, 0x2d, 0x8f, 0x1e, 0xc3, 0x9d, 0xcb, 0xd2, 0x15,
	0xb2, 0x4e, 0xfe, 0xaf, 0x72, 0xca, 0xa0, 0x6f, 0xa0, 0xe8, 0x98, 0xbc, 0x52, 0x08, 0x51, 0xcf,
	0x6e, 0x8a, 0x0a, 0x9a, 0x17, 0xe4, 0xd1, 0x8f, 0xb0, 0x1c, 0x6f, 0xb7, 0x91, 0xf6, 0x44, 0xf5,
	0x2e, 0x1c, 0xac, 0x14, 0xd7, 0xc9, 0xc6, 0x42, 0xbd, 0x9e, 0x8b, 0x8c, 0x1f, 0xce, 0xb8, 0xb4,
	0xd6, 0xb9, 0x70, 0x90, 0x95, 0xdd, 0xac, 0x70, 0xed, 0x2f, 0x81, 0x6a, 0xd6, 0x84, 0xe2, 0x3d,
	0x18, 0xc2, 0xfd, 0x89, 0x11, 0x85, 0x90, 0xe0, 0xd3, 0xb7, 0xbc, 0x64, 0x4e, 0x2f, 0x6e, 0xde,
	0xad, 0x91, 0xbe, 0xb3, 0x15, 0x6b, 0xca, 0x89, 0xa0, 0x7b, 0x30, 0x6f, 0xa0, 0x83, 0xdc, 0x40,
	0xae, 0x9b, 0x38, 0xdb, 0x9e, 0x8f, 0x65, 0x6e, 0xfe, 0x24, 0x50, 0xce, 0xec, 0x08, 0x7d, 0x02,
	0x0f, 0x99, 0x72, 0x72, 0x7c, 0x70, 0xaa, 0x6c, 0xab, 0x4c, 0xd9, 0x51, 0x98, 0x72, 0xd4, 0x52,
	0xd4, 0xce, 0xfb, 0xb6, 0xa2, 0xbe, 0x3d, 0x3a, 0x69, 0x2b, 0xad, 0xfd, 0x9d, 0x7d, 0x65, 0xbb,
	0x74, 0x8b, 0xd6, 0xe0, 0xc1, 0x34, 0x61, 0xeb, 0xf8, 0xf0, 0x70, 0xbf, 0x53, 0x22, 0x79, 0x9a,
	0x26, 0x6b, 0x1c, 0xb5, 0xf6, 0x4a, 0x05, 0xba, 0x06, 0xab, 0xd3, 0x34, 0x9d, 0xc6, 0x6e, 0xa9,
	0x58, 0xff, 0x4a, 0x60, 0x21, 0xf6, 0x7a, 0x82, 0xee, 0xd0, 0xd4, 0x83, 0x01, 0xdc, 0x1d, 0xfb,
	0x87, 0xd2, 0xfc, 0xcd, 0xcc, 0xba, 0x94, 0xaa, 0xf5, 0x59, 0x52, 0xa2, 0xc1, 0xd7, 0xbf, 0x13,
	0x58, 0x0a, 0x07, 0x37, 0xe1, 0xe7, 0x33, 0x01, 0x7a, 0x75, 0x5f, 0xe8, 0xcb, 0xeb, 0x4a, 0x64,
	0x5f, 0x01, 0xd5, 0x57, 0x33, 0xe7, 0x45, 0xfe, 0x9a, 0xbf, 0x09, 0xac, 0xe9, 0xf6, 0x20, 0x2f,
	0xbd, 0x39, 0x1f, 0x7b, 0x6f, 0x07, 0x77, 0xf6, 0xd9, 0x59, 0xdf, 0xf4, 0xce, 0x7d, 0x4d, 0xd2,
	0xed, 0x81, 0xac, 0xf9, 0x3d, 0xcd, 0x37, 0x2d, 0x23, 0xf8, 0x22, 0x9b, 0xdc, 0x43, 0x97, 0x77,
	0x2d, 0xb9, 0x8f, 0x5c, 0x0e, 0xef, 0x77, 0xb9, 0x6f, 0xcb, 0x39, 0xef, 0x82, 0xd7, 0x49, 0x24,
	0x09, 0xfc, 0x28, 0x14, 0x9b, 0x0d, 0xf6, 0xab, 0xb0, 0xda, 0xf4, 0x7b, 0x52, 0x23, 0x74, 0xc3,
	0x12, 0x37, 0xa7, 0xb1, 0x46, 0xbb, 0x1d, 0xa2, 0x9f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x7d,
	0x3b, 0x0d, 0xc5, 0xd6, 0x06, 0x00, 0x00,
}
