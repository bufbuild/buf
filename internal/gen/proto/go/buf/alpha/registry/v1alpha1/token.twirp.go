// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/token.proto

package registryv1alpha1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ======================
// TokenService Interface
// ======================

// TokenService is the Token service.
type TokenService interface {
	// CreateToken creates a new token suitable for machine-to-machine authentication.
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)

	// GetToken gets the specific token for the user
	//
	// This method requires authentication.
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)

	// ListTokens lists the users active tokens
	//
	// This method requires authentication.
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)

	// DeleteToken deletes an existing token.
	//
	// This method requires authentication.
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
}

// ============================
// TokenService Protobuf Client
// ============================

type tokenServiceProtobufClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTokenServiceProtobufClient creates a Protobuf client that implements the TokenService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTokenServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TokenService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "TokenService")
	urls := [4]string{
		serviceURL + "CreateToken",
		serviceURL + "GetToken",
		serviceURL + "ListTokens",
		serviceURL + "DeleteToken",
	}

	return &tokenServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *tokenServiceProtobufClient) CreateToken(ctx context.Context, in *CreateTokenRequest) (*CreateTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateToken")
	caller := c.callCreateToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTokenRequest) (*CreateTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTokenRequest) when calling interceptor")
					}
					return c.callCreateToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceProtobufClient) callCreateToken(ctx context.Context, in *CreateTokenRequest) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceProtobufClient) GetToken(ctx context.Context, in *GetTokenRequest) (*GetTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "GetToken")
	caller := c.callGetToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTokenRequest) when calling interceptor")
					}
					return c.callGetToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceProtobufClient) callGetToken(ctx context.Context, in *GetTokenRequest) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceProtobufClient) ListTokens(ctx context.Context, in *ListTokensRequest) (*ListTokensResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTokens")
	caller := c.callListTokens
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTokensRequest) (*ListTokensResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTokensRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTokensRequest) when calling interceptor")
					}
					return c.callListTokens(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTokensResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTokensResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceProtobufClient) callListTokens(ctx context.Context, in *ListTokensRequest) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceProtobufClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteToken")
	caller := c.callDeleteToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTokenRequest) (*DeleteTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTokenRequest) when calling interceptor")
					}
					return c.callDeleteToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceProtobufClient) callDeleteToken(ctx context.Context, in *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// TokenService JSON Client
// ========================

type tokenServiceJSONClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTokenServiceJSONClient creates a JSON client that implements the TokenService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTokenServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TokenService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "TokenService")
	urls := [4]string{
		serviceURL + "CreateToken",
		serviceURL + "GetToken",
		serviceURL + "ListTokens",
		serviceURL + "DeleteToken",
	}

	return &tokenServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *tokenServiceJSONClient) CreateToken(ctx context.Context, in *CreateTokenRequest) (*CreateTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateToken")
	caller := c.callCreateToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTokenRequest) (*CreateTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTokenRequest) when calling interceptor")
					}
					return c.callCreateToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceJSONClient) callCreateToken(ctx context.Context, in *CreateTokenRequest) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceJSONClient) GetToken(ctx context.Context, in *GetTokenRequest) (*GetTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "GetToken")
	caller := c.callGetToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTokenRequest) when calling interceptor")
					}
					return c.callGetToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceJSONClient) callGetToken(ctx context.Context, in *GetTokenRequest) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceJSONClient) ListTokens(ctx context.Context, in *ListTokensRequest) (*ListTokensResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTokens")
	caller := c.callListTokens
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTokensRequest) (*ListTokensResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTokensRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTokensRequest) when calling interceptor")
					}
					return c.callListTokens(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTokensResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTokensResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceJSONClient) callListTokens(ctx context.Context, in *ListTokensRequest) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tokenServiceJSONClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteToken")
	caller := c.callDeleteToken
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTokenRequest) (*DeleteTokenResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTokenRequest) when calling interceptor")
					}
					return c.callDeleteToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tokenServiceJSONClient) callDeleteToken(ctx context.Context, in *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// TokenService Server Handler
// ===========================

type tokenServiceServer struct {
	TokenService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewTokenServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewTokenServiceServer(svc TokenService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &tokenServiceServer{
		TokenService:     svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *tokenServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *tokenServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// TokenServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const TokenServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.TokenService/"

func (s *tokenServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "TokenService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.TokenService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateToken":
		s.serveCreateToken(ctx, resp, req)
		return
	case "GetToken":
		s.serveGetToken(ctx, resp, req)
		return
	case "ListTokens":
		s.serveListTokens(ctx, resp, req)
		return
	case "DeleteToken":
		s.serveDeleteToken(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *tokenServiceServer) serveCreateToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tokenServiceServer) serveCreateTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateTokenRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TokenService.CreateToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTokenRequest) (*CreateTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTokenRequest) when calling interceptor")
					}
					return s.TokenService.CreateToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTokenResponse and nil error while calling CreateToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveCreateTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TokenService.CreateToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTokenRequest) (*CreateTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTokenRequest) when calling interceptor")
					}
					return s.TokenService.CreateToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTokenResponse and nil error while calling CreateToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveGetToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tokenServiceServer) serveGetTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetTokenRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TokenService.GetToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTokenRequest) when calling interceptor")
					}
					return s.TokenService.GetToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTokenResponse and nil error while calling GetToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveGetTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TokenService.GetToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTokenRequest) (*GetTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTokenRequest) when calling interceptor")
					}
					return s.TokenService.GetToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTokenResponse and nil error while calling GetToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveListTokens(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListTokensJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListTokensProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tokenServiceServer) serveListTokensJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListTokensRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TokenService.ListTokens
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTokensRequest) (*ListTokensResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTokensRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTokensRequest) when calling interceptor")
					}
					return s.TokenService.ListTokens(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTokensResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTokensResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTokensResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTokensResponse and nil error while calling ListTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveListTokensProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTokens")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListTokensRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TokenService.ListTokens
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTokensRequest) (*ListTokensResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTokensRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTokensRequest) when calling interceptor")
					}
					return s.TokenService.ListTokens(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTokensResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTokensResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTokensResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTokensResponse and nil error while calling ListTokens. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveDeleteToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tokenServiceServer) serveDeleteTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteTokenRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TokenService.DeleteToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTokenRequest) (*DeleteTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTokenRequest) when calling interceptor")
					}
					return s.TokenService.DeleteToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteTokenResponse and nil error while calling DeleteToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) serveDeleteTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TokenService.DeleteToken
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTokenRequest) (*DeleteTokenResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTokenRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTokenRequest) when calling interceptor")
					}
					return s.TokenService.DeleteToken(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTokenResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTokenResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteTokenResponse and nil error while calling DeleteToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tokenServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor20, 0
}

func (s *tokenServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *tokenServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "TokenService")
}

var twirpFileDescriptor20 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x49, 0x6f, 0xd3, 0x40,
	0x14, 0x96, 0x9d, 0x2e, 0xe9, 0x0b, 0xa5, 0x30, 0x05, 0x29, 0x24, 0x42, 0x8d, 0x7c, 0x80, 0x4a,
	0x94, 0x19, 0x1a, 0x2e, 0x88, 0x9e, 0x1a, 0x90, 0x10, 0x52, 0x0f, 0x95, 0x5b, 0x71, 0xe8, 0x25,
	0xb2, 0x93, 0x17, 0x77, 0x44, 0xbc, 0x60, 0x8f, 0xa3, 0xd0, 0x9f, 0x83, 0xc4, 0x05, 0x89, 0x3f,
	0xc2, 0xaf, 0x42, 0xb3, 0x35, 0x1b, 0x72, 0xc2, 0xcd, 0xf3, 0xfc, 0x6d, 0x7a, 0xdf, 0xd8, 0xf0,
	0x32, 0x2c, 0x47, 0x2c, 0x18, 0x67, 0xb7, 0x01, 0xcb, 0x31, 0xe2, 0x85, 0xc8, 0xbf, 0xb3, 0xc9,
	0xa9, 0x1a, 0x9c, 0x32, 0x91, 0x7e, 0xc5, 0x84, 0x66, 0x79, 0x2a, 0x52, 0xd2, 0x0e, 0xcb, 0x11,
	0x55, 0x73, 0x6a, 0x81, 0xd4, 0x02, 0x5b, 0x47, 0x51, 0x9a, 0x46, 0x63, 0x64, 0x0a, 0x2a, 0x15,
	0x05, 0x8f, 0xb1, 0x10, 0x41, 0x9c, 0x69, 0xb6, 0xf7, 0xd3, 0x81, 0xed, 0x6b, 0xa9, 0x46, 0x1e,
	0x82, 0xcb, 0x87, 0x4d, 0xa7, 0xe3, 0x1c, 0xef, 0xf9, 0x2e, 0x1f, 0x92, 0x33, 0x68, 0x0c, 0x72,
	0x0c, 0x04, 0xf6, 0x25, 0xa7, 0xe9, 0x76, 0x9c, 0xe3, 0x46, 0xb7, 0x45, 0xb5, 0x20, 0xb5, 0x82,
	0xf4, 0xda, 0x0a, 0xfa, 0xa0, 0xe1, 0x72, 0x20, 0xc9, 0x38, 0xcd, 0x78, 0x6e, 0xc8, 0xb5, 0xf5,
	0x64, 0x0d, 0x57, 0x64, 0x02, 0x5b, 0x49, 0x2a, 0xb0, 0xb9, 0xa5, 0xb2, 0xa8, 0x67, 0x0f, 0x81,
	0x7c, 0xd0, 0xf2, 0x32, 0xac, 0x8f, 0xdf, 0x4a, 0x2c, 0xc4, 0x3d, 0xd2, 0x99, 0x21, 0x97, 0xad,
	0xdd, 0xff, 0xb1, 0xf6, 0x5e, 0xc1, 0xe1, 0x82, 0x4d, 0x91, 0xa5, 0x49, 0x81, 0xe4, 0x09, 0x6c,
	0xab, 0x95, 0x1b, 0x23, 0x7d, 0xf0, 0x4e, 0xe0, 0xe0, 0x13, 0x8a, 0x85, 0x40, 0xcf, 0xa0, 0xae,
	0xde, 0xf5, 0xef, 0x57, 0xb9, 0xab, 0xce, 0x9f, 0x87, 0xde, 0x05, 0x3c, 0x9a, 0xa1, 0x8d, 0xee,
	0xbb, 0x79, 0xdd, 0x46, 0xd7, 0xa3, 0x15, 0x5d, 0x52, 0x4d, 0x35, 0xde, 0x1c, 0x1e, 0x5f, 0xf0,
	0x42, 0xcb, 0x15, 0xd6, 0xbd, 0x0d, 0x7b, 0x59, 0x10, 0x61, 0xbf, 0xe0, 0x77, 0x7a, 0x27, 0xfb,
	0x7e, 0x5d, 0x0e, 0xae, 0xf8, 0x1d, 0x92, 0xe7, 0x00, 0xea, 0xa5, 0x36, 0x74, 0x55, 0x38, 0x05,
	0xd7, 0xf5, 0x37, 0x61, 0x37, 0xc7, 0x09, 0xe6, 0x85, 0x6e, 0xab, 0xee, 0xdb, 0xa3, 0x37, 0x05,
	0x32, 0x6f, 0x65, 0xa2, 0xbf, 0x87, 0x1d, 0xa5, 0x54, 0x34, 0x9d, 0x4e, 0x6d, 0xc3, 0xec, 0x86,
	0x41, 0x5e, 0xc0, 0x41, 0x82, 0x53, 0xd1, 0x5f, 0xc9, 0xb3, 0x2f, 0xc7, 0x97, 0x36, 0x93, 0xc7,
	0x80, 0x7c, 0xc4, 0x31, 0x2e, 0x95, 0x5e, 0xb1, 0xe3, 0xa7, 0x70, 0xb8, 0x40, 0xd0, 0x59, 0xbb,
	0x7f, 0x6a, 0xf0, 0x40, 0x4d, 0xae, 0x30, 0x9f, 0xf0, 0x01, 0x92, 0x0c, 0x1a, 0x73, 0x35, 0x13,
	0x56, 0x99, 0x7d, 0xf5, 0xde, 0xb5, 0xde, 0x6c, 0x4e, 0x30, 0xeb, 0x8a, 0xa0, 0x6e, 0xdb, 0x27,
	0x27, 0x95, 0xec, 0xa5, 0x2b, 0xd5, 0x7a, 0xbd, 0x21, 0xda, 0x18, 0xc5, 0x00, 0xb3, 0xb6, 0x08,
	0xad, 0x24, 0xaf, 0xdc, 0xa0, 0x16, 0xdb, 0x18, 0x6f, 0xec, 0x32, 0x68, 0xcc, 0x6d, 0x7c, 0xcd,
	0x26, 0x57, 0xcb, 0x5c, 0xb3, 0xc9, 0x7f, 0x94, 0xd9, 0xfb, 0xed, 0xc0, 0xd1, 0x20, 0x8d, 0xab,
	0x78, 0x3d, 0x50, 0x94, 0x4b, 0xf9, 0xad, 0xdf, 0xdc, 0x44, 0x5c, 0xdc, 0x96, 0x21, 0x1d, 0xa4,
	0x31, 0x0b, 0xcb, 0x51, 0x58, 0xf2, 0xf1, 0x50, 0x3e, 0x30, 0x9e, 0x08, 0xcc, 0x93, 0x60, 0xcc,
	0x22, 0x4c, 0xf4, 0x0f, 0x92, 0x45, 0x29, 0xab, 0xf8, 0xed, 0x9e, 0xd9, 0x89, 0x1d, 0xfc, 0x70,
	0x6b, 0xbd, 0x73, 0xff, 0x97, 0xdb, 0xee, 0x95, 0x23, 0x7a, 0xae, 0xb2, 0xf8, 0x36, 0xcb, 0x17,
	0x83, 0x09, 0x77, 0x94, 0xf4, 0xdb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x34, 0x37, 0xa7,
	0xd1, 0x05, 0x00, 0x00,
}
