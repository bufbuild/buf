// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/plugin.proto

package registryv1alpha1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =======================
// PluginService Interface
// =======================

// PluginService manages plugins.
type PluginService interface {
	// ListPlugins returns all the plugins available to the user. This includes
	// public plugins, those uploaded to organizations the user is part of,
	// and any plugins uploaded directly by the user.
	ListPlugins(context.Context, *ListPluginsRequest) (*ListPluginsResponse, error)

	// ListUserPlugins lists all plugins belonging to a user.
	ListUserPlugins(context.Context, *ListUserPluginsRequest) (*ListUserPluginsResponse, error)

	// ListOrganizationPlugins lists all plugins for an organization.
	ListOrganizationPlugins(context.Context, *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error)

	// ListPluginVersions lists all the versions available for the specified plugin.
	ListPluginVersions(context.Context, *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error)

	// CreatePlugin creates a new plugin.
	CreatePlugin(context.Context, *CreatePluginRequest) (*CreatePluginResponse, error)

	// GetPlugin returns the plugin, if found.
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)

	// DeletePlugin deletes the plugin, if it exists. Note that deleting
	// a plugin may cause breaking changes for templates using that plugin,
	// and should be done with extreme care.
	DeletePlugin(context.Context, *DeletePluginRequest) (*DeletePluginResponse, error)

	// GetTemplate returns the template, if found.
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)

	// ListTemplates returns all the templates available to the user. This includes
	// public templates, those owned by organizations the user is part of,
	// and any created directly by the user.
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)

	// ListUserPlugins lists all templates belonging to a user.
	ListUserTemplates(context.Context, *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error)

	// ListOrganizationTemplates lists all templates for an organization.
	ListOrganizationTemplates(context.Context, *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error)

	// GetTemplateVersion returns the template version, if found.
	GetTemplateVersion(context.Context, *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error)

	// ListTemplateVersions lists all the template versions available for the specified template.
	ListTemplateVersions(context.Context, *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error)

	// CreateTemplate creates a new template.
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error)

	// DeleteTemplate deletes the template, if it exists.
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)

	// CreateTemplateVersion creates a new template version.
	CreateTemplateVersion(context.Context, *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error)
}

// =============================
// PluginService Protobuf Client
// =============================

type pluginServiceProtobufClient struct {
	client      HTTPClient
	urls        [16]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPluginServiceProtobufClient creates a Protobuf client that implements the PluginService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPluginServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PluginService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "PluginService")
	urls := [16]string{
		serviceURL + "ListPlugins",
		serviceURL + "ListUserPlugins",
		serviceURL + "ListOrganizationPlugins",
		serviceURL + "ListPluginVersions",
		serviceURL + "CreatePlugin",
		serviceURL + "GetPlugin",
		serviceURL + "DeletePlugin",
		serviceURL + "GetTemplate",
		serviceURL + "ListTemplates",
		serviceURL + "ListUserTemplates",
		serviceURL + "ListOrganizationTemplates",
		serviceURL + "GetTemplateVersion",
		serviceURL + "ListTemplateVersions",
		serviceURL + "CreateTemplate",
		serviceURL + "DeleteTemplate",
		serviceURL + "CreateTemplateVersion",
	}

	return &pluginServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *pluginServiceProtobufClient) ListPlugins(ctx context.Context, in *ListPluginsRequest) (*ListPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPlugins")
	caller := c.callListPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPluginsRequest) (*ListPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginsRequest) when calling interceptor")
					}
					return c.callListPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListPlugins(ctx context.Context, in *ListPluginsRequest) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListUserPlugins(ctx context.Context, in *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserPlugins")
	caller := c.callListUserPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserPluginsRequest) when calling interceptor")
					}
					return c.callListUserPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListUserPlugins(ctx context.Context, in *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
	out := new(ListUserPluginsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListOrganizationPlugins(ctx context.Context, in *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationPlugins")
	caller := c.callListOrganizationPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationPluginsRequest) when calling interceptor")
					}
					return c.callListOrganizationPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListOrganizationPlugins(ctx context.Context, in *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
	out := new(ListOrganizationPluginsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListPluginVersions(ctx context.Context, in *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPluginVersions")
	caller := c.callListPluginVersions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginVersionsRequest) when calling interceptor")
					}
					return c.callListPluginVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListPluginVersions(ctx context.Context, in *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
	out := new(ListPluginVersionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) CreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePlugin")
	caller := c.callCreatePlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreatePluginRequest) (*CreatePluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePluginRequest) when calling interceptor")
					}
					return c.callCreatePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callCreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error) {
	out := new(CreatePluginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) GetPlugin(ctx context.Context, in *GetPluginRequest) (*GetPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPlugin")
	caller := c.callGetPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPluginRequest) (*GetPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPluginRequest) when calling interceptor")
					}
					return c.callGetPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callGetPlugin(ctx context.Context, in *GetPluginRequest) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) DeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePlugin")
	caller := c.callDeletePlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePluginRequest) (*DeletePluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePluginRequest) when calling interceptor")
					}
					return c.callDeletePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callDeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error) {
	out := new(DeletePluginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) GetTemplate(ctx context.Context, in *GetTemplateRequest) (*GetTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	caller := c.callGetTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateRequest) when calling interceptor")
					}
					return c.callGetTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callGetTemplate(ctx context.Context, in *GetTemplateRequest) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplates")
	caller := c.callListTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTemplatesRequest) (*ListTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplatesRequest) when calling interceptor")
					}
					return c.callListTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListTemplates(ctx context.Context, in *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListUserTemplates(ctx context.Context, in *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserTemplates")
	caller := c.callListUserTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserTemplatesRequest) when calling interceptor")
					}
					return c.callListUserTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListUserTemplates(ctx context.Context, in *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
	out := new(ListUserTemplatesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListOrganizationTemplates(ctx context.Context, in *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationTemplates")
	caller := c.callListOrganizationTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationTemplatesRequest) when calling interceptor")
					}
					return c.callListOrganizationTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListOrganizationTemplates(ctx context.Context, in *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
	out := new(ListOrganizationTemplatesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) GetTemplateVersion(ctx context.Context, in *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplateVersion")
	caller := c.callGetTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateVersionRequest) when calling interceptor")
					}
					return c.callGetTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callGetTemplateVersion(ctx context.Context, in *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
	out := new(GetTemplateVersionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) ListTemplateVersions(ctx context.Context, in *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplateVersions")
	caller := c.callListTemplateVersions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplateVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplateVersionsRequest) when calling interceptor")
					}
					return c.callListTemplateVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplateVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplateVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callListTemplateVersions(ctx context.Context, in *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
	out := new(ListTemplateVersionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplate")
	caller := c.callCreateTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTemplateRequest) (*CreateTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateRequest) when calling interceptor")
					}
					return c.callCreateTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callCreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	out := new(CreateTemplateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTemplate")
	caller := c.callDeleteTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTemplateRequest) when calling interceptor")
					}
					return c.callDeleteTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callDeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceProtobufClient) CreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplateVersion")
	caller := c.callCreateTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateVersionRequest) when calling interceptor")
					}
					return c.callCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceProtobufClient) callCreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
	out := new(CreateTemplateVersionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =========================
// PluginService JSON Client
// =========================

type pluginServiceJSONClient struct {
	client      HTTPClient
	urls        [16]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPluginServiceJSONClient creates a JSON client that implements the PluginService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPluginServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PluginService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "PluginService")
	urls := [16]string{
		serviceURL + "ListPlugins",
		serviceURL + "ListUserPlugins",
		serviceURL + "ListOrganizationPlugins",
		serviceURL + "ListPluginVersions",
		serviceURL + "CreatePlugin",
		serviceURL + "GetPlugin",
		serviceURL + "DeletePlugin",
		serviceURL + "GetTemplate",
		serviceURL + "ListTemplates",
		serviceURL + "ListUserTemplates",
		serviceURL + "ListOrganizationTemplates",
		serviceURL + "GetTemplateVersion",
		serviceURL + "ListTemplateVersions",
		serviceURL + "CreateTemplate",
		serviceURL + "DeleteTemplate",
		serviceURL + "CreateTemplateVersion",
	}

	return &pluginServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *pluginServiceJSONClient) ListPlugins(ctx context.Context, in *ListPluginsRequest) (*ListPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPlugins")
	caller := c.callListPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPluginsRequest) (*ListPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginsRequest) when calling interceptor")
					}
					return c.callListPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListPlugins(ctx context.Context, in *ListPluginsRequest) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListUserPlugins(ctx context.Context, in *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserPlugins")
	caller := c.callListUserPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserPluginsRequest) when calling interceptor")
					}
					return c.callListUserPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListUserPlugins(ctx context.Context, in *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
	out := new(ListUserPluginsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListOrganizationPlugins(ctx context.Context, in *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationPlugins")
	caller := c.callListOrganizationPlugins
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationPluginsRequest) when calling interceptor")
					}
					return c.callListOrganizationPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListOrganizationPlugins(ctx context.Context, in *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
	out := new(ListOrganizationPluginsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListPluginVersions(ctx context.Context, in *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPluginVersions")
	caller := c.callListPluginVersions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginVersionsRequest) when calling interceptor")
					}
					return c.callListPluginVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListPluginVersions(ctx context.Context, in *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
	out := new(ListPluginVersionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) CreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePlugin")
	caller := c.callCreatePlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreatePluginRequest) (*CreatePluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePluginRequest) when calling interceptor")
					}
					return c.callCreatePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callCreatePlugin(ctx context.Context, in *CreatePluginRequest) (*CreatePluginResponse, error) {
	out := new(CreatePluginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) GetPlugin(ctx context.Context, in *GetPluginRequest) (*GetPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPlugin")
	caller := c.callGetPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPluginRequest) (*GetPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPluginRequest) when calling interceptor")
					}
					return c.callGetPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callGetPlugin(ctx context.Context, in *GetPluginRequest) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) DeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "DeletePlugin")
	caller := c.callDeletePlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeletePluginRequest) (*DeletePluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePluginRequest) when calling interceptor")
					}
					return c.callDeletePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callDeletePlugin(ctx context.Context, in *DeletePluginRequest) (*DeletePluginResponse, error) {
	out := new(DeletePluginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) GetTemplate(ctx context.Context, in *GetTemplateRequest) (*GetTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	caller := c.callGetTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateRequest) when calling interceptor")
					}
					return c.callGetTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callGetTemplate(ctx context.Context, in *GetTemplateRequest) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplates")
	caller := c.callListTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTemplatesRequest) (*ListTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplatesRequest) when calling interceptor")
					}
					return c.callListTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListTemplates(ctx context.Context, in *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListUserTemplates(ctx context.Context, in *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListUserTemplates")
	caller := c.callListUserTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserTemplatesRequest) when calling interceptor")
					}
					return c.callListUserTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListUserTemplates(ctx context.Context, in *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
	out := new(ListUserTemplatesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListOrganizationTemplates(ctx context.Context, in *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationTemplates")
	caller := c.callListOrganizationTemplates
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationTemplatesRequest) when calling interceptor")
					}
					return c.callListOrganizationTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListOrganizationTemplates(ctx context.Context, in *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
	out := new(ListOrganizationTemplatesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) GetTemplateVersion(ctx context.Context, in *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplateVersion")
	caller := c.callGetTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateVersionRequest) when calling interceptor")
					}
					return c.callGetTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callGetTemplateVersion(ctx context.Context, in *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
	out := new(GetTemplateVersionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) ListTemplateVersions(ctx context.Context, in *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplateVersions")
	caller := c.callListTemplateVersions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplateVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplateVersionsRequest) when calling interceptor")
					}
					return c.callListTemplateVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplateVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplateVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callListTemplateVersions(ctx context.Context, in *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
	out := new(ListTemplateVersionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplate")
	caller := c.callCreateTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTemplateRequest) (*CreateTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateRequest) when calling interceptor")
					}
					return c.callCreateTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callCreateTemplate(ctx context.Context, in *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	out := new(CreateTemplateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTemplate")
	caller := c.callDeleteTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTemplateRequest) when calling interceptor")
					}
					return c.callDeleteTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callDeleteTemplate(ctx context.Context, in *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *pluginServiceJSONClient) CreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplateVersion")
	caller := c.callCreateTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateVersionRequest) when calling interceptor")
					}
					return c.callCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pluginServiceJSONClient) callCreateTemplateVersion(ctx context.Context, in *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
	out := new(CreateTemplateVersionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// PluginService Server Handler
// ============================

type pluginServiceServer struct {
	PluginService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewPluginServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPluginServiceServer(svc PluginService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &pluginServiceServer{
		PluginService:    svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *pluginServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *pluginServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PluginServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PluginServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.PluginService/"

func (s *pluginServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PluginService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.PluginService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ListPlugins":
		s.serveListPlugins(ctx, resp, req)
		return
	case "ListUserPlugins":
		s.serveListUserPlugins(ctx, resp, req)
		return
	case "ListOrganizationPlugins":
		s.serveListOrganizationPlugins(ctx, resp, req)
		return
	case "ListPluginVersions":
		s.serveListPluginVersions(ctx, resp, req)
		return
	case "CreatePlugin":
		s.serveCreatePlugin(ctx, resp, req)
		return
	case "GetPlugin":
		s.serveGetPlugin(ctx, resp, req)
		return
	case "DeletePlugin":
		s.serveDeletePlugin(ctx, resp, req)
		return
	case "GetTemplate":
		s.serveGetTemplate(ctx, resp, req)
		return
	case "ListTemplates":
		s.serveListTemplates(ctx, resp, req)
		return
	case "ListUserTemplates":
		s.serveListUserTemplates(ctx, resp, req)
		return
	case "ListOrganizationTemplates":
		s.serveListOrganizationTemplates(ctx, resp, req)
		return
	case "GetTemplateVersion":
		s.serveGetTemplateVersion(ctx, resp, req)
		return
	case "ListTemplateVersions":
		s.serveListTemplateVersions(ctx, resp, req)
		return
	case "CreateTemplate":
		s.serveCreateTemplate(ctx, resp, req)
		return
	case "DeleteTemplate":
		s.serveDeleteTemplate(ctx, resp, req)
		return
	case "CreateTemplateVersion":
		s.serveCreateTemplateVersion(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *pluginServiceServer) serveListPlugins(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListPluginsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListPluginsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListPluginsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListPluginsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPluginsRequest) (*ListPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPluginsResponse and nil error while calling ListPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListPluginsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListPluginsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPluginsRequest) (*ListPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPluginsResponse and nil error while calling ListPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListUserPlugins(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListUserPluginsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListUserPluginsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListUserPluginsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListUserPluginsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListUserPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListUserPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserPluginsResponse and nil error while calling ListUserPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListUserPluginsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListUserPluginsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListUserPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListUserPluginsRequest) (*ListUserPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListUserPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserPluginsResponse and nil error while calling ListUserPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListOrganizationPlugins(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListOrganizationPluginsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListOrganizationPluginsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListOrganizationPluginsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListOrganizationPluginsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListOrganizationPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListOrganizationPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrganizationPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrganizationPluginsResponse and nil error while calling ListOrganizationPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListOrganizationPluginsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationPlugins")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListOrganizationPluginsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListOrganizationPlugins
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrganizationPluginsRequest) (*ListOrganizationPluginsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationPluginsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationPluginsRequest) when calling interceptor")
					}
					return s.PluginService.ListOrganizationPlugins(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationPluginsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationPluginsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrganizationPluginsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrganizationPluginsResponse and nil error while calling ListOrganizationPlugins. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListPluginVersions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListPluginVersionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListPluginVersionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListPluginVersionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPluginVersions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListPluginVersionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListPluginVersions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginVersionsRequest) when calling interceptor")
					}
					return s.PluginService.ListPluginVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPluginVersionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPluginVersionsResponse and nil error while calling ListPluginVersions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListPluginVersionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPluginVersions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListPluginVersionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListPluginVersions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPluginVersionsRequest) (*ListPluginVersionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPluginVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPluginVersionsRequest) when calling interceptor")
					}
					return s.PluginService.ListPluginVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPluginVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPluginVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPluginVersionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPluginVersionsResponse and nil error while calling ListPluginVersions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreatePlugin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreatePluginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreatePluginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveCreatePluginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreatePluginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.CreatePlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreatePluginRequest) (*CreatePluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePluginRequest) when calling interceptor")
					}
					return s.PluginService.CreatePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreatePluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreatePluginResponse and nil error while calling CreatePlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreatePluginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreatePluginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.CreatePlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreatePluginRequest) (*CreatePluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreatePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreatePluginRequest) when calling interceptor")
					}
					return s.PluginService.CreatePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreatePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreatePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreatePluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreatePluginResponse and nil error while calling CreatePlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetPlugin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPluginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPluginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveGetPluginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetPluginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.GetPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPluginRequest) (*GetPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPluginRequest) when calling interceptor")
					}
					return s.PluginService.GetPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPluginResponse and nil error while calling GetPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetPluginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetPluginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.GetPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPluginRequest) (*GetPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPluginRequest) when calling interceptor")
					}
					return s.PluginService.GetPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPluginResponse and nil error while calling GetPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveDeletePlugin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeletePluginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeletePluginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveDeletePluginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeletePluginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.DeletePlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePluginRequest) (*DeletePluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePluginRequest) when calling interceptor")
					}
					return s.PluginService.DeletePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeletePluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeletePluginResponse and nil error while calling DeletePlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveDeletePluginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeletePlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeletePluginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.DeletePlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeletePluginRequest) (*DeletePluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeletePluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeletePluginRequest) when calling interceptor")
					}
					return s.PluginService.DeletePlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeletePluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeletePluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeletePluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeletePluginResponse and nil error while calling DeletePlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetTemplate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTemplateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTemplateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveGetTemplateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetTemplateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.GetTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateRequest) when calling interceptor")
					}
					return s.PluginService.GetTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTemplateResponse and nil error while calling GetTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetTemplateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetTemplateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.GetTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateRequest) when calling interceptor")
					}
					return s.PluginService.GetTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTemplateResponse and nil error while calling GetTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListTemplates(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListTemplatesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListTemplatesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListTemplatesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListTemplatesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTemplatesRequest) (*ListTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTemplatesResponse and nil error while calling ListTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListTemplatesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListTemplatesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTemplatesRequest) (*ListTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTemplatesResponse and nil error while calling ListTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListUserTemplates(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListUserTemplatesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListUserTemplatesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListUserTemplatesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListUserTemplatesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListUserTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListUserTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserTemplatesResponse and nil error while calling ListUserTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListUserTemplatesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListUserTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListUserTemplatesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListUserTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListUserTemplatesRequest) (*ListUserTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListUserTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListUserTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListUserTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListUserTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListUserTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListUserTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListUserTemplatesResponse and nil error while calling ListUserTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListOrganizationTemplates(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListOrganizationTemplatesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListOrganizationTemplatesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListOrganizationTemplatesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListOrganizationTemplatesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListOrganizationTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListOrganizationTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrganizationTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrganizationTemplatesResponse and nil error while calling ListOrganizationTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListOrganizationTemplatesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrganizationTemplates")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListOrganizationTemplatesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListOrganizationTemplates
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrganizationTemplatesRequest) (*ListOrganizationTemplatesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrganizationTemplatesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrganizationTemplatesRequest) when calling interceptor")
					}
					return s.PluginService.ListOrganizationTemplates(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrganizationTemplatesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrganizationTemplatesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrganizationTemplatesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrganizationTemplatesResponse and nil error while calling ListOrganizationTemplates. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetTemplateVersion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTemplateVersionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTemplateVersionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveGetTemplateVersionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetTemplateVersionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.GetTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateVersionRequest) when calling interceptor")
					}
					return s.PluginService.GetTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTemplateVersionResponse and nil error while calling GetTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveGetTemplateVersionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetTemplateVersionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.GetTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetTemplateVersionRequest) (*GetTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetTemplateVersionRequest) when calling interceptor")
					}
					return s.PluginService.GetTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTemplateVersionResponse and nil error while calling GetTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListTemplateVersions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListTemplateVersionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListTemplateVersionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveListTemplateVersionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplateVersions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListTemplateVersionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.ListTemplateVersions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplateVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplateVersionsRequest) when calling interceptor")
					}
					return s.PluginService.ListTemplateVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplateVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplateVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTemplateVersionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTemplateVersionsResponse and nil error while calling ListTemplateVersions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveListTemplateVersionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListTemplateVersions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListTemplateVersionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.ListTemplateVersions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListTemplateVersionsRequest) (*ListTemplateVersionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListTemplateVersionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListTemplateVersionsRequest) when calling interceptor")
					}
					return s.PluginService.ListTemplateVersions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListTemplateVersionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListTemplateVersionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListTemplateVersionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListTemplateVersionsResponse and nil error while calling ListTemplateVersions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreateTemplate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateTemplateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateTemplateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveCreateTemplateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateTemplateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.CreateTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTemplateRequest) (*CreateTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateRequest) when calling interceptor")
					}
					return s.PluginService.CreateTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTemplateResponse and nil error while calling CreateTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreateTemplateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateTemplateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.CreateTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTemplateRequest) (*CreateTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateRequest) when calling interceptor")
					}
					return s.PluginService.CreateTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTemplateResponse and nil error while calling CreateTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveDeleteTemplate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteTemplateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteTemplateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveDeleteTemplateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteTemplateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.DeleteTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTemplateRequest) when calling interceptor")
					}
					return s.PluginService.DeleteTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteTemplateResponse and nil error while calling DeleteTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveDeleteTemplateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteTemplateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.DeleteTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteTemplateRequest) when calling interceptor")
					}
					return s.PluginService.DeleteTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteTemplateResponse and nil error while calling DeleteTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreateTemplateVersion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateTemplateVersionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateTemplateVersionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pluginServiceServer) serveCreateTemplateVersionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateTemplateVersionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PluginService.CreateTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateVersionRequest) when calling interceptor")
					}
					return s.PluginService.CreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTemplateVersionResponse and nil error while calling CreateTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) serveCreateTemplateVersionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateTemplateVersionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PluginService.CreateTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateTemplateVersionRequest) (*CreateTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateTemplateVersionRequest) when calling interceptor")
					}
					return s.PluginService.CreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateTemplateVersionResponse and nil error while calling CreateTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pluginServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *pluginServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *pluginServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "PluginService")
}

var twirpFileDescriptor4 = []byte{
	// 1446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x67, 0x6d, 0xa7, 0x4d, 0x26, 0x71, 0xe2, 0x6e, 0xd2, 0x70, 0x75, 0x9a, 0x36, 0xbd, 0xaa,
	0x28, 0x54, 0x60, 0x93, 0x14, 0x0a, 0x75, 0xff, 0xa0, 0x38, 0x2d, 0x95, 0xa5, 0xb4, 0xb5, 0xce,
	0x49, 0xa0, 0xc5, 0x92, 0x75, 0x4e, 0xd6, 0xee, 0x15, 0xe7, 0xce, 0xdc, 0x9d, 0xd3, 0x3f, 0xea,
	0x03, 0x42, 0x05, 0x55, 0x02, 0x55, 0x20, 0xf1, 0x42, 0xa1, 0x0f, 0xf0, 0xc8, 0x47, 0xe1, 0x23,
	0x20, 0xf1, 0x82, 0xc4, 0x0b, 0x8f, 0x7c, 0x02, 0x74, 0x7b, 0xbb, 0xce, 0xfd, 0xcb, 0xf9, 0xce,
	0x71, 0x12, 0xde, 0x72, 0xb3, 0x33, 0x3b, 0xbf, 0xf9, 0xed, 0xce, 0xcc, 0x4e, 0x0c, 0xf3, 0xf5,
	0x4e, 0x23, 0x2f, 0xb7, 0xda, 0xf7, 0xe5, 0xbc, 0x4e, 0x9a, 0x8a, 0x61, 0xea, 0x8f, 0xf3, 0xdb,
	0x0b, 0x54, 0xb0, 0x90, 0x6f, 0xb7, 0x3a, 0x4d, 0x45, 0xcd, 0xb5, 0x75, 0xcd, 0xd4, 0xf0, 0x4c,
	0xbd, 0xd3, 0xc8, 0xd1, 0x85, 0x1c, 0xd7, 0xcc, 0x71, 0x4d, 0xf1, 0x7b, 0x04, 0x47, 0xca, 0x54,
	0x1b, 0x8f, 0x43, 0x42, 0xd9, 0x14, 0xd0, 0x1c, 0x9a, 0x1f, 0x91, 0x12, 0xca, 0x26, 0xc6, 0x90,
	0x52, 0xe5, 0x2d, 0x22, 0x24, 0xa8, 0x84, 0xfe, 0x8d, 0xa7, 0x60, 0x48, 0x7b, 0xa8, 0x12, 0x5d,
	0x48, 0x52, 0xa1, 0xfd, 0x81, 0x6f, 0x01, 0x6c, 0x2b, 0x86, 0x52, 0x57, 0x5a, 0x8a, 0xf9, 0x58,
	0x48, 0xcd, 0xa1, 0xf9, 0xf1, 0xc5, 0xb7, 0x73, 0x21, 0x6e, 0x73, 0xb6, 0xcb, 0xf5, 0xae, 0x91,
	0xe4, 0xd8, 0x40, 0x7c, 0x08, 0x69, 0xb6, 0x4e, 0x74, 0x43, 0xd1, 0xa2, 0x21, 0x3b, 0x0d, 0xa3,
	0x76, 0xd4, 0x35, 0xba, 0x64, 0xe3, 0x03, 0x5b, 0x74, 0xdb, 0x52, 0x38, 0x03, 0x63, 0x4c, 0xc1,
	0x8e, 0x20, 0x45, 0x35, 0x98, 0xd1, 0x1d, 0x4b, 0x24, 0xfe, 0x8d, 0x60, 0x78, 0x95, 0x6c, 0xb5,
	0x5b, 0xb2, 0x49, 0xf6, 0x40, 0x47, 0x19, 0xc6, 0x99, 0xa7, 0x0d, 0x4d, 0x6d, 0x28, 0x4d, 0x43,
	0x48, 0xcd, 0x25, 0xe7, 0x47, 0x17, 0xdf, 0x8c, 0x40, 0xc9, 0x32, 0xb5, 0x90, 0xd2, 0x6d, 0xc7,
	0x97, 0xe1, 0x21, 0x78, 0x68, 0xaf, 0x04, 0x7f, 0x8b, 0x60, 0xcc, 0xe9, 0xce, 0xc7, 0x0d, 0xf2,
	0x71, 0xe3, 0xe5, 0x37, 0xe1, 0xe3, 0xf7, 0x14, 0x40, 0x5b, 0xd6, 0xe5, 0x2d, 0x62, 0x12, 0xdd,
	0x10, 0x92, 0x73, 0x49, 0xba, 0xde, 0x95, 0x60, 0x01, 0x8e, 0x6e, 0x92, 0x16, 0x31, 0xc9, 0x26,
	0xa5, 0x7e, 0x58, 0xe2, 0x9f, 0xe2, 0x9f, 0x08, 0x26, 0x38, 0xed, 0x71, 0x8e, 0xfc, 0x1c, 0x8c,
	0x9b, 0xcc, 0xac, 0xe6, 0x3c, 0x86, 0x34, 0x97, 0xda, 0xc8, 0xcf, 0x42, 0x57, 0x60, 0x63, 0xb7,
	0x4f, 0x7e, 0x8c, 0x0b, 0x29, 0xfa, 0x7b, 0x30, 0xc1, 0xc2, 0xdb, 0xb6, 0x11, 0x18, 0xc2, 0x10,
	0x3d, 0xb4, 0x85, 0x28, 0x34, 0xdb, 0x26, 0xb7, 0xe4, 0x76, 0x5b, 0x51, 0x9b, 0x12, 0x3b, 0x7d,
	0x26, 0x35, 0xc4, 0x17, 0x08, 0xa6, 0x82, 0x14, 0x07, 0x42, 0xbb, 0x00, 0x47, 0x19, 0x62, 0x16,
	0x3d, 0xff, 0x0c, 0x21, 0xfc, 0x01, 0xe0, 0x15, 0xc5, 0x30, 0x6d, 0x4c, 0x86, 0x44, 0x3e, 0xef,
	0x10, 0xc3, 0xc4, 0x33, 0x30, 0xd2, 0x96, 0x9b, 0xa4, 0x66, 0x28, 0x4f, 0x08, 0x85, 0x92, 0x96,
	0x86, 0x2d, 0x41, 0x45, 0x79, 0x42, 0xf0, 0xac, 0x75, 0xba, 0x4d, 0x52, 0x33, 0xb5, 0xcf, 0x88,
	0xca, 0x60, 0x50, 0xf5, 0x55, 0x4b, 0x60, 0xf9, 0xd2, 0x89, 0xe5, 0xd8, 0xce, 0xbc, 0x61, 0x89,
	0x7f, 0x8a, 0x4f, 0x61, 0xd2, 0xe5, 0xcb, 0x68, 0x6b, 0xaa, 0x41, 0xf0, 0x55, 0x38, 0x6a, 0x07,
	0x61, 0x08, 0x88, 0xf2, 0x7c, 0x36, 0x02, 0xcf, 0x12, 0xb7, 0xc1, 0x6f, 0xc0, 0x84, 0x4a, 0x1e,
	0x99, 0x35, 0x1f, 0xa6, 0xb4, 0x25, 0x2e, 0x73, 0x5c, 0xe2, 0x33, 0x04, 0xd3, 0x96, 0xfb, 0x35,
	0x83, 0xe8, 0x9e, 0x70, 0xbb, 0xb9, 0x8b, 0x9c, 0xb9, 0xeb, 0x22, 0x21, 0x11, 0x4a, 0x42, 0x32,
	0x84, 0x84, 0x94, 0x9b, 0x84, 0x2f, 0x10, 0xbc, 0xee, 0x83, 0x71, 0xb0, 0x4c, 0xbc, 0x44, 0x70,
	0xca, 0x82, 0x70, 0x47, 0x6f, 0xca, 0xaa, 0xf2, 0x44, 0x36, 0x15, 0x4d, 0xf5, 0x30, 0x22, 0xc2,
	0x98, 0xe6, 0x58, 0x65, 0xc4, 0xb8, 0x64, 0xfb, 0xc4, 0xcf, 0x73, 0x04, 0xa7, 0x77, 0x05, 0x77,
	0xb0, 0x3c, 0xfd, 0x84, 0xe0, 0xc4, 0xce, 0x85, 0xe5, 0x39, 0x1c, 0x7e, 0x69, 0x82, 0x8a, 0x93,
	0x8b, 0xa8, 0x64, 0x28, 0x51, 0xa9, 0x10, 0xa2, 0x86, 0xdc, 0x44, 0xfd, 0x88, 0x20, 0x1b, 0x84,
	0x8e, 0x71, 0x54, 0xf1, 0x57, 0x31, 0x9b, 0xab, 0xf3, 0xd1, 0xab, 0x98, 0xb7, 0x7c, 0x45, 0x66,
	0xee, 0x05, 0x82, 0xc9, 0x65, 0x9d, 0xc8, 0x26, 0x61, 0xdc, 0xc7, 0xe6, 0xcc, 0xdd, 0xe6, 0x92,
	0x7b, 0x6d, 0x73, 0x15, 0x98, 0x72, 0xe3, 0x61, 0x2c, 0x5d, 0x86, 0x23, 0x76, 0x88, 0x14, 0x51,
	0xc4, 0x8b, 0xc4, 0x4c, 0xc4, 0x2b, 0x90, 0xb9, 0x49, 0xcc, 0x3e, 0x23, 0x14, 0xcb, 0x70, 0xcc,
	0x61, 0x3d, 0x08, 0x3c, 0x1f, 0xc2, 0xe4, 0x75, 0x5a, 0xd6, 0xfb, 0x85, 0x34, 0x0d, 0x53, 0xee,
	0x0d, 0x6c, 0x54, 0xe2, 0x35, 0xc0, 0x37, 0x89, 0xc9, 0xfb, 0x72, 0xfc, 0x7d, 0x3f, 0x81, 0x49,
	0x97, 0x3d, 0x0b, 0x76, 0x09, 0x86, 0x79, 0xe3, 0x65, 0xe1, 0x9e, 0x0b, 0x0d, 0xb7, 0xbb, 0x41,
	0xd7, 0x4c, 0x6c, 0xc1, 0x94, 0x95, 0x03, 0x7c, 0x65, 0x9f, 0x1b, 0xd8, 0x33, 0x04, 0xc7, 0x3d,
	0xee, 0x58, 0x28, 0xcb, 0x30, 0xc2, 0x31, 0xf1, 0x3c, 0x8b, 0x18, 0xcb, 0x8e, 0x5d, 0xe4, 0xec,
	0xfa, 0x1a, 0x81, 0xc0, 0x5b, 0x88, 0x2f, 0xf2, 0x83, 0xec, 0x65, 0xcf, 0x59, 0x81, 0xf4, 0x00,
	0x39, 0x0c, 0x4e, 0x6a, 0x70, 0xc2, 0x71, 0xc5, 0x78, 0xfd, 0x8a, 0x5d, 0x76, 0x76, 0x7d, 0x42,
	0x89, 0x3f, 0x23, 0x98, 0xf3, 0xf6, 0x25, 0x1f, 0xf9, 0x87, 0xd7, 0x36, 0xbf, 0x43, 0x70, 0x26,
	0x04, 0xde, 0x61, 0x1c, 0x49, 0x07, 0xb2, 0x41, 0x47, 0xc2, 0xa0, 0x7c, 0x0c, 0x99, 0xee, 0x53,
	0x9c, 0x53, 0x6e, 0x17, 0x81, 0xb7, 0x22, 0x21, 0xe2, 0xfb, 0x4d, 0x98, 0x6e, 0x81, 0xf8, 0x0a,
	0xc1, 0x8c, 0x33, 0x49, 0xff, 0x6f, 0x7d, 0xfb, 0x17, 0x04, 0x27, 0x83, 0xf1, 0x31, 0x66, 0xee,
	0xc2, 0x31, 0x2f, 0x33, 0xfc, 0xb0, 0xe2, 0x51, 0x93, 0xf1, 0x50, 0x13, 0xfd, 0xe8, 0xfe, 0x42,
	0x70, 0xdc, 0xee, 0x97, 0x7d, 0x17, 0xfd, 0x01, 0x77, 0xf0, 0xc1, 0x4f, 0xd2, 0xe2, 0xa7, 0x30,
	0xed, 0x8d, 0x71, 0x70, 0x8d, 0x69, 0x09, 0x8e, 0xdb, 0xad, 0xb4, 0xff, 0xae, 0x29, 0xc0, 0xb4,
	0x77, 0x0b, 0xd6, 0x8f, 0xff, 0x40, 0x70, 0xd2, 0x0d, 0xdd, 0x53, 0xf0, 0xf8, 0x76, 0x28, 0x74,
	0x44, 0x4e, 0x44, 0x1a, 0x91, 0x93, 0xd1, 0x46, 0xe4, 0xd4, 0xa0, 0x46, 0xe4, 0x47, 0x30, 0xbb,
	0x4b, 0x6c, 0xfb, 0x5c, 0x39, 0xce, 0xeb, 0x90, 0xf1, 0x5e, 0x41, 0x7c, 0x06, 0x66, 0xcb, 0x2b,
	0x6b, 0x37, 0x4b, 0xb7, 0x6b, 0xeb, 0xa5, 0x4a, 0xa9, 0x58, 0x5a, 0x29, 0xad, 0xde, 0xad, 0xad,
	0xdd, 0xae, 0x94, 0x6f, 0x2c, 0x97, 0x3e, 0x2a, 0xdd, 0xb8, 0x9e, 0x79, 0x0d, 0x9f, 0x04, 0xc1,
	0xaf, 0x52, 0x5e, 0x2b, 0xae, 0x94, 0x96, 0x33, 0x08, 0xcf, 0xc2, 0x89, 0x80, 0x55, 0xa9, 0xb4,
	0xbe, 0xb4, 0x7a, 0x23, 0x93, 0x58, 0x7c, 0x95, 0xe1, 0xff, 0xe1, 0xaa, 0x10, 0x7d, 0x5b, 0xd9,
	0x20, 0xb8, 0x0d, 0xa3, 0x8e, 0x29, 0x19, 0xe7, 0x43, 0x63, 0xf2, 0xcf, 0xee, 0xd9, 0x77, 0xa2,
	0x1b, 0x30, 0x42, 0x9f, 0xc2, 0x84, 0x67, 0x22, 0xc5, 0x17, 0x7a, 0x6e, 0xe2, 0x1f, 0xa3, 0xb3,
	0xef, 0xc6, 0x33, 0x62, 0xde, 0x7f, 0x60, 0x03, 0x71, 0xc0, 0xc0, 0x87, 0x2f, 0xf7, 0xdc, 0x71,
	0xf7, 0x19, 0x36, 0x7b, 0xa5, 0x3f, 0x63, 0x06, 0xeb, 0x2b, 0xe4, 0xfc, 0xcf, 0x48, 0xb7, 0x82,
	0x5e, 0x8c, 0xc8, 0xae, 0xa7, 0xeb, 0x64, 0xdf, 0x8f, 0x6d, 0xc7, 0x70, 0x18, 0x30, 0xe6, 0x9c,
	0x5c, 0x70, 0xf8, 0xf1, 0x06, 0x0c, 0x5d, 0xd9, 0x85, 0x18, 0x16, 0xcc, 0xe9, 0x03, 0x18, 0xe9,
	0xce, 0x26, 0x38, 0xbc, 0x68, 0x7b, 0x27, 0xa0, 0x6c, 0x2e, 0xaa, 0xfa, 0x4e, 0x80, 0xce, 0xa1,
	0xa3, 0x47, 0x80, 0x01, 0x03, 0x4e, 0x8f, 0x00, 0x83, 0x26, 0x1a, 0x2b, 0xc9, 0x1c, 0x6f, 0x93,
	0x1e, 0x49, 0xe6, 0x9f, 0x7d, 0x7a, 0x24, 0x59, 0xd0, 0xb0, 0xb3, 0x0d, 0x69, 0xd7, 0xe8, 0x80,
	0x17, 0x7a, 0xde, 0x08, 0xef, 0xf3, 0x32, 0xbb, 0x18, 0xc7, 0x84, 0xf9, 0xfd, 0x12, 0xc1, 0x31,
	0xdf, 0x1b, 0x1d, 0xbf, 0x17, 0x29, 0x55, 0x7d, 0x00, 0x2e, 0xc6, 0x35, 0x63, 0x20, 0x5e, 0xb2,
	0x41, 0x21, 0xf0, 0x75, 0x8a, 0xaf, 0xc6, 0x4a, 0x54, 0x1f, 0xa8, 0x6b, 0xfd, 0x9a, 0x3b, 0x32,
	0xdd, 0xff, 0x50, 0xed, 0x91, 0xe9, 0xbb, 0x0e, 0x1b, 0x3d, 0x32, 0x3d, 0xe4, 0x45, 0xfc, 0x0d,
	0x72, 0x0f, 0xb3, 0xdd, 0x9a, 0xf3, 0x41, 0xe4, 0x63, 0xf7, 0x56, 0x9d, 0x4b, 0x7d, 0x58, 0x32,
	0x34, 0x8f, 0x61, 0xdc, 0xdd, 0x86, 0xf1, 0x62, 0x84, 0x3a, 0xe2, 0xcd, 0x93, 0x0b, 0xb1, 0x6c,
	0x76, 0x5c, 0xbb, 0x1f, 0x3e, 0x3d, 0x5c, 0x07, 0x3e, 0xb4, 0x7a, 0xb8, 0x0e, 0x7e, 0x59, 0xe1,
	0x17, 0xbe, 0x87, 0x2f, 0xbf, 0x0e, 0x97, 0x62, 0x44, 0xe2, 0xb9, 0x11, 0x85, 0x7e, 0x4c, 0x6d,
	0x40, 0xc5, 0x7f, 0x11, 0x9c, 0xde, 0xd0, 0xb6, 0xc2, 0x76, 0x28, 0x8e, 0xda, 0xc5, 0xad, 0xac,
	0x6b, 0xa6, 0x56, 0x46, 0xf7, 0xee, 0x35, 0x15, 0xf3, 0x7e, 0xa7, 0x9e, 0xdb, 0xd0, 0xb6, 0xf2,
	0xf5, 0x4e, 0xa3, 0xde, 0x51, 0x5a, 0x9b, 0xd6, 0x1f, 0x79, 0x45, 0x35, 0x89, 0xae, 0xca, 0xad,
	0x7c, 0x93, 0xa8, 0x79, 0xfa, 0x83, 0x60, 0xbe, 0xa9, 0xe5, 0x43, 0x7e, 0x3c, 0xbc, 0xcc, 0x25,
	0x5c, 0xf0, 0x6b, 0x22, 0x59, 0x5c, 0x92, 0x7e, 0x4b, 0xcc, 0x14, 0x3b, 0x8d, 0xdc, 0x12, 0x85,
	0x23, 0x71, 0x38, 0xeb, 0x4c, 0xe7, 0xf7, 0xc4, 0xa9, 0x62, 0xa7, 0x51, 0xad, 0xd2, 0xe5, 0x6a,
	0x95, 0xaf, 0x57, 0xab, 0x5c, 0xe1, 0x1f, 0xaa, 0x50, 0x28, 0x50, 0x85, 0x42, 0x81, 0x2b, 0x14,
	0x0a, 0x5c, 0xa1, 0x7e, 0x84, 0x82, 0xbb, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x86,
	0x9e, 0x3a, 0xd9, 0x1c, 0x00, 0x00,
}
