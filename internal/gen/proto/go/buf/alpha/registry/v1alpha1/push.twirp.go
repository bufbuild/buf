// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v7.1.1, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/push.proto

package registryv1alpha1

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// =====================
// PushService Interface
// =====================

// PushService is the Push service.
type PushService interface {
	// Push pushes.
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

// ===========================
// PushService Protobuf Client
// ===========================

type pushServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPushServiceProtobufClient creates a Protobuf client that implements the PushService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPushServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PushService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "buf.alpha.registry.v1alpha1", "PushService")
	urls := [1]string{
		serviceURL + "Push",
	}

	return &pushServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *pushServiceProtobufClient) Push(ctx context.Context, in *PushRequest) (*PushResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PushService")
	ctx = ctxsetters.WithMethodName(ctx, "Push")
	caller := c.callPush
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PushRequest) (*PushResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PushRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PushRequest) when calling interceptor")
					}
					return c.callPush(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PushResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PushResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pushServiceProtobufClient) callPush(ctx context.Context, in *PushRequest) (*PushResponse, error) {
	out := new(PushResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// PushService JSON Client
// =======================

type pushServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPushServiceJSONClient creates a JSON client that implements the PushService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPushServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PushService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "buf.alpha.registry.v1alpha1", "PushService")
	urls := [1]string{
		serviceURL + "Push",
	}

	return &pushServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *pushServiceJSONClient) Push(ctx context.Context, in *PushRequest) (*PushResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PushService")
	ctx = ctxsetters.WithMethodName(ctx, "Push")
	caller := c.callPush
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PushRequest) (*PushResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PushRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PushRequest) when calling interceptor")
					}
					return c.callPush(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PushResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PushResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *pushServiceJSONClient) callPush(ctx context.Context, in *PushRequest) (*PushResponse, error) {
	out := new(PushResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// PushService Server Handler
// ==========================

type pushServiceServer struct {
	PushService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewPushServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPushServiceServer(svc PushService, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewPushServiceServer", o))
		}
	}

	return &pushServiceServer{
		PushService:      svc,
		pathPrefix:       serverOpts.PathPrefix(),
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:            serverOpts.Hooks,
		jsonSkipDefaults: serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *pushServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// PushServicePathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PushServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.PushService/"

func (s *pushServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "PushService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.PushService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Push":
		s.servePush(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *pushServiceServer) servePush(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePushJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePushProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *pushServiceServer) servePushJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Push")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(PushRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.PushService.Push
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PushRequest) (*PushResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PushRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PushRequest) when calling interceptor")
					}
					return s.PushService.Push(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PushResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PushResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PushResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PushResponse and nil error while calling Push. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pushServiceServer) servePushProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Push")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(PushRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PushService.Push
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PushRequest) (*PushResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PushRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PushRequest) when calling interceptor")
					}
					return s.PushService.Push(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PushResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PushResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PushResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PushResponse and nil error while calling Push. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *pushServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *pushServiceServer) ProtocGenTwirpVersion() string {
	return "v7.1.1"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *pushServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "PushService")
}

var twirpFileDescriptor2 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0xa5, 0x5b, 0x37, 0x58, 0x26, 0x22, 0x41, 0xa4, 0x4c, 0x90, 0xda, 0x83, 0x54, 0x84, 0x84,
	0xcd, 0x93, 0x78, 0xf3, 0xac, 0x30, 0x2a, 0x5e, 0x86, 0x30, 0xd2, 0x2e, 0x6b, 0x03, 0x5d, 0x12,
	0x93, 0x66, 0xb2, 0x7f, 0xe0, 0x3f, 0xf0, 0x3f, 0xf8, 0x2b, 0x65, 0x49, 0x4b, 0xeb, 0xa5, 0x78,
	0xcb, 0x7b, 0x79, 0x2f, 0xef, 0xe5, 0xfb, 0xc0, 0x4d, 0x6a, 0xb6, 0x98, 0x94, 0xb2, 0x20, 0x58,
	0xd1, 0x9c, 0xe9, 0x4a, 0x1d, 0xf0, 0x7e, 0x6e, 0x89, 0x39, 0x96, 0x46, 0x17, 0x48, 0x2a, 0x51,
	0x09, 0x78, 0x99, 0x9a, 0x2d, 0xb2, 0x34, 0x6a, 0x74, 0xa8, 0xd1, 0xcd, 0xc2, 0xf6, 0x11, 0x22,
	0x59, 0xeb, 0x27, 0x92, 0x39, 0xfb, 0xac, 0x13, 0xb3, 0x13, 0x1b, 0x53, 0xd2, 0x56, 0xe4, 0x70,
	0xad, 0x8b, 0xfb, 0xea, 0x74, 0x95, 0xd1, 0x8f, 0x07, 0xa6, 0x4b, 0xa3, 0x8b, 0x84, 0x7e, 0x18,
	0xaa, 0x2b, 0x78, 0x0e, 0x46, 0xe2, 0x93, 0x53, 0x15, 0x78, 0xa1, 0x17, 0x4f, 0x12, 0x07, 0xe0,
	0x15, 0x00, 0x8a, 0x4a, 0xa1, 0x59, 0x25, 0xd4, 0x21, 0x18, 0xd8, 0xab, 0x0e, 0x03, 0x2f, 0xc0,
	0x38, 0x55, 0x84, 0x67, 0x45, 0x30, 0xb4, 0x77, 0x35, 0x82, 0x0f, 0x60, 0xec, 0xd2, 0x02, 0x3f,
	0xf4, 0xe2, 0xe9, 0xe2, 0x1a, 0xb5, 0xff, 0xaf, 0x6b, 0x34, 0xb5, 0xd0, 0x8b, 0xc5, 0x49, 0x6d,
	0x80, 0x10, 0xf8, 0x15, 0xc9, 0x75, 0x30, 0x0a, 0x87, 0xf1, 0x24, 0xb1, 0xe7, 0x88, 0x82, 0x13,
	0xd7, 0x55, 0x4b, 0xc1, 0x35, 0x85, 0x6f, 0xe0, 0xac, 0x14, 0x19, 0x29, 0xd7, 0xce, 0xb3, 0x96,
	0x8c, 0x07, 0x23, 0x1b, 0x74, 0x87, 0x7a, 0x06, 0x8d, 0x9e, 0x8f, 0x26, 0x97, 0xb7, 0x64, 0x3c,
	0x39, 0x2d, 0xff, 0xe0, 0x85, 0x74, 0x23, 0x79, 0xa5, 0x6a, 0xcf, 0x32, 0x0a, 0x09, 0xf0, 0x8f,
	0x10, 0xc6, 0xbd, 0x6f, 0x76, 0x86, 0x38, 0xbb, 0xfd, 0x87, 0xd2, 0x7d, 0x21, 0xf2, 0xbf, 0xbe,
	0xa3, 0xc1, 0xd3, 0xfb, 0x6a, 0x95, 0xb3, 0xaa, 0x30, 0x29, 0xca, 0xc4, 0x0e, 0xa7, 0x66, 0x9b,
	0x1a, 0x56, 0x6e, 0x8e, 0x07, 0xcc, 0x78, 0x45, 0x15, 0x27, 0x25, 0xce, 0x29, 0xc7, 0x76, 0x67,
	0x38, 0x17, 0xb8, 0x67, 0xbf, 0x8f, 0x0d, 0xd3, 0x10, 0xe9, 0xd8, 0xda, 0xee, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x32, 0xb9, 0xa7, 0x00, 0xa5, 0x02, 0x00, 0x00,
}
