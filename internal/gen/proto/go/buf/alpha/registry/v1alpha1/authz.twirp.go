// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/authz.proto

package registryv1alpha1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ======================
// AuthzService Interface
// ======================

// AuthzService supplies authorization helpers.
type AuthzService interface {
	// UserCanAddUserOrganizationScopes returns whether the user is authorized
	// to remove user scopes from an organization.
	UserCanAddUserOrganizationScopes(context.Context, *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error)

	// UserCanRemoveUserOrganizationScopes returns whether the user is authorized
	// to remove user scopes from an organization.
	UserCanRemoveUserOrganizationScopes(context.Context, *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error)

	// UserCanCreateOrganizationRepository returns whether the user is authorized
	// to create repositories in an organization.
	UserCanCreateOrganizationRepository(context.Context, *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error)

	// UserCanCreateOrganizationTeam returns whether the user is authorized
	// to create teams in an organization.
	UserCanCreateOrganizationTeam(context.Context, *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error)

	// UserCanListOrganizationTeams returns whether the user is authorized
	// to list teams in an organization.
	UserCanListOrganizationTeams(context.Context, *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error)

	// UserCanSeeRepositorySettings returns whether the user is authorized
	// to see repository settings.
	UserCanSeeRepositorySettings(context.Context, *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error)

	// UserCanSeeOrganizationSettings returns whether the user is authorized
	// to see organization settings.
	UserCanSeeOrganizationSettings(context.Context, *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error)

	// UserCanReadPlugin returns whether the user has read access to the specified plugin.
	UserCanReadPlugin(context.Context, *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error)

	// UserCanCreatePluginVersion returns whether the user is authorized
	// to create a plugin version under the specified plugin.
	UserCanCreatePluginVersion(context.Context, *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error)

	// UserCanCreateTemplateVersion returns whether the user is authorized
	// to create a template version under the specified template.
	UserCanCreateTemplateVersion(context.Context, *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error)

	// UserCanCreateOrganizationPlugin returns whether the user is authorized to create
	// a plugin in an organization.
	UserCanCreateOrganizationPlugin(context.Context, *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error)

	// UserCanCreateOrganizationPlugin returns whether the user is authorized to create
	// a template in an organization.
	UserCanCreateOrganizationTemplate(context.Context, *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error)

	// UserCanSeePluginSettings returns whether the user is authorized
	// to see plugin settings.
	UserCanSeePluginSettings(context.Context, *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error)

	// UserCanSeeTemplateSettings returns whether the user is authorized
	// to see template settings.
	UserCanSeeTemplateSettings(context.Context, *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error)
}

// ============================
// AuthzService Protobuf Client
// ============================

type authzServiceProtobufClient struct {
	client      HTTPClient
	urls        [14]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAuthzServiceProtobufClient creates a Protobuf client that implements the AuthzService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAuthzServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AuthzService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "AuthzService")
	urls := [14]string{
		serviceURL + "UserCanAddUserOrganizationScopes",
		serviceURL + "UserCanRemoveUserOrganizationScopes",
		serviceURL + "UserCanCreateOrganizationRepository",
		serviceURL + "UserCanCreateOrganizationTeam",
		serviceURL + "UserCanListOrganizationTeams",
		serviceURL + "UserCanSeeRepositorySettings",
		serviceURL + "UserCanSeeOrganizationSettings",
		serviceURL + "UserCanReadPlugin",
		serviceURL + "UserCanCreatePluginVersion",
		serviceURL + "UserCanCreateTemplateVersion",
		serviceURL + "UserCanCreateOrganizationPlugin",
		serviceURL + "UserCanCreateOrganizationTemplate",
		serviceURL + "UserCanSeePluginSettings",
		serviceURL + "UserCanSeeTemplateSettings",
	}

	return &authzServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *authzServiceProtobufClient) UserCanAddUserOrganizationScopes(ctx context.Context, in *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanAddUserOrganizationScopes")
	caller := c.callUserCanAddUserOrganizationScopes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanAddUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanAddUserOrganizationScopesRequest) when calling interceptor")
					}
					return c.callUserCanAddUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanAddUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanAddUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanAddUserOrganizationScopes(ctx context.Context, in *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
	out := new(UserCanAddUserOrganizationScopesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanRemoveUserOrganizationScopes(ctx context.Context, in *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanRemoveUserOrganizationScopes")
	caller := c.callUserCanRemoveUserOrganizationScopes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanRemoveUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanRemoveUserOrganizationScopesRequest) when calling interceptor")
					}
					return c.callUserCanRemoveUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanRemoveUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanRemoveUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanRemoveUserOrganizationScopes(ctx context.Context, in *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
	out := new(UserCanRemoveUserOrganizationScopesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreateOrganizationRepository(ctx context.Context, in *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationRepository")
	caller := c.callUserCanCreateOrganizationRepository
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationRepositoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationRepositoryRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationRepository(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationRepositoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationRepositoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreateOrganizationRepository(ctx context.Context, in *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
	out := new(UserCanCreateOrganizationRepositoryResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreateOrganizationTeam(ctx context.Context, in *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTeam")
	caller := c.callUserCanCreateOrganizationTeam
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTeamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTeamRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationTeam(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTeamResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTeamResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreateOrganizationTeam(ctx context.Context, in *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
	out := new(UserCanCreateOrganizationTeamResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanListOrganizationTeams(ctx context.Context, in *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanListOrganizationTeams")
	caller := c.callUserCanListOrganizationTeams
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanListOrganizationTeamsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanListOrganizationTeamsRequest) when calling interceptor")
					}
					return c.callUserCanListOrganizationTeams(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanListOrganizationTeamsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanListOrganizationTeamsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanListOrganizationTeams(ctx context.Context, in *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
	out := new(UserCanListOrganizationTeamsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanSeeRepositorySettings(ctx context.Context, in *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeRepositorySettings")
	caller := c.callUserCanSeeRepositorySettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeRepositorySettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeRepositorySettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeRepositorySettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeRepositorySettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeRepositorySettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanSeeRepositorySettings(ctx context.Context, in *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
	out := new(UserCanSeeRepositorySettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanSeeOrganizationSettings(ctx context.Context, in *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeOrganizationSettings")
	caller := c.callUserCanSeeOrganizationSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeOrganizationSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeOrganizationSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeOrganizationSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeOrganizationSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeOrganizationSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanSeeOrganizationSettings(ctx context.Context, in *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
	out := new(UserCanSeeOrganizationSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanReadPlugin(ctx context.Context, in *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanReadPlugin")
	caller := c.callUserCanReadPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanReadPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanReadPluginRequest) when calling interceptor")
					}
					return c.callUserCanReadPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanReadPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanReadPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanReadPlugin(ctx context.Context, in *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
	out := new(UserCanReadPluginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreatePluginVersion(ctx context.Context, in *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreatePluginVersion")
	caller := c.callUserCanCreatePluginVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreatePluginVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreatePluginVersionRequest) when calling interceptor")
					}
					return c.callUserCanCreatePluginVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreatePluginVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreatePluginVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreatePluginVersion(ctx context.Context, in *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
	out := new(UserCanCreatePluginVersionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreateTemplateVersion(ctx context.Context, in *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateTemplateVersion")
	caller := c.callUserCanCreateTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateTemplateVersionRequest) when calling interceptor")
					}
					return c.callUserCanCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreateTemplateVersion(ctx context.Context, in *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
	out := new(UserCanCreateTemplateVersionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreateOrganizationPlugin(ctx context.Context, in *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationPlugin")
	caller := c.callUserCanCreateOrganizationPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationPluginRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreateOrganizationPlugin(ctx context.Context, in *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
	out := new(UserCanCreateOrganizationPluginResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanCreateOrganizationTemplate(ctx context.Context, in *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTemplate")
	caller := c.callUserCanCreateOrganizationTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTemplateRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanCreateOrganizationTemplate(ctx context.Context, in *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
	out := new(UserCanCreateOrganizationTemplateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanSeePluginSettings(ctx context.Context, in *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeePluginSettings")
	caller := c.callUserCanSeePluginSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeePluginSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeePluginSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeePluginSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeePluginSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeePluginSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanSeePluginSettings(ctx context.Context, in *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
	out := new(UserCanSeePluginSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceProtobufClient) UserCanSeeTemplateSettings(ctx context.Context, in *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeTemplateSettings")
	caller := c.callUserCanSeeTemplateSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeTemplateSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeTemplateSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeTemplateSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeTemplateSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeTemplateSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceProtobufClient) callUserCanSeeTemplateSettings(ctx context.Context, in *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
	out := new(UserCanSeeTemplateSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// AuthzService JSON Client
// ========================

type authzServiceJSONClient struct {
	client      HTTPClient
	urls        [14]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewAuthzServiceJSONClient creates a JSON client that implements the AuthzService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAuthzServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) AuthzService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "AuthzService")
	urls := [14]string{
		serviceURL + "UserCanAddUserOrganizationScopes",
		serviceURL + "UserCanRemoveUserOrganizationScopes",
		serviceURL + "UserCanCreateOrganizationRepository",
		serviceURL + "UserCanCreateOrganizationTeam",
		serviceURL + "UserCanListOrganizationTeams",
		serviceURL + "UserCanSeeRepositorySettings",
		serviceURL + "UserCanSeeOrganizationSettings",
		serviceURL + "UserCanReadPlugin",
		serviceURL + "UserCanCreatePluginVersion",
		serviceURL + "UserCanCreateTemplateVersion",
		serviceURL + "UserCanCreateOrganizationPlugin",
		serviceURL + "UserCanCreateOrganizationTemplate",
		serviceURL + "UserCanSeePluginSettings",
		serviceURL + "UserCanSeeTemplateSettings",
	}

	return &authzServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *authzServiceJSONClient) UserCanAddUserOrganizationScopes(ctx context.Context, in *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanAddUserOrganizationScopes")
	caller := c.callUserCanAddUserOrganizationScopes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanAddUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanAddUserOrganizationScopesRequest) when calling interceptor")
					}
					return c.callUserCanAddUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanAddUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanAddUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanAddUserOrganizationScopes(ctx context.Context, in *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
	out := new(UserCanAddUserOrganizationScopesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanRemoveUserOrganizationScopes(ctx context.Context, in *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanRemoveUserOrganizationScopes")
	caller := c.callUserCanRemoveUserOrganizationScopes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanRemoveUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanRemoveUserOrganizationScopesRequest) when calling interceptor")
					}
					return c.callUserCanRemoveUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanRemoveUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanRemoveUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanRemoveUserOrganizationScopes(ctx context.Context, in *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
	out := new(UserCanRemoveUserOrganizationScopesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreateOrganizationRepository(ctx context.Context, in *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationRepository")
	caller := c.callUserCanCreateOrganizationRepository
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationRepositoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationRepositoryRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationRepository(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationRepositoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationRepositoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreateOrganizationRepository(ctx context.Context, in *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
	out := new(UserCanCreateOrganizationRepositoryResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreateOrganizationTeam(ctx context.Context, in *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTeam")
	caller := c.callUserCanCreateOrganizationTeam
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTeamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTeamRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationTeam(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTeamResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTeamResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreateOrganizationTeam(ctx context.Context, in *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
	out := new(UserCanCreateOrganizationTeamResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanListOrganizationTeams(ctx context.Context, in *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanListOrganizationTeams")
	caller := c.callUserCanListOrganizationTeams
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanListOrganizationTeamsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanListOrganizationTeamsRequest) when calling interceptor")
					}
					return c.callUserCanListOrganizationTeams(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanListOrganizationTeamsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanListOrganizationTeamsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanListOrganizationTeams(ctx context.Context, in *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
	out := new(UserCanListOrganizationTeamsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanSeeRepositorySettings(ctx context.Context, in *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeRepositorySettings")
	caller := c.callUserCanSeeRepositorySettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeRepositorySettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeRepositorySettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeRepositorySettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeRepositorySettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeRepositorySettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanSeeRepositorySettings(ctx context.Context, in *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
	out := new(UserCanSeeRepositorySettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanSeeOrganizationSettings(ctx context.Context, in *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeOrganizationSettings")
	caller := c.callUserCanSeeOrganizationSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeOrganizationSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeOrganizationSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeOrganizationSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeOrganizationSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeOrganizationSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanSeeOrganizationSettings(ctx context.Context, in *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
	out := new(UserCanSeeOrganizationSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanReadPlugin(ctx context.Context, in *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanReadPlugin")
	caller := c.callUserCanReadPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanReadPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanReadPluginRequest) when calling interceptor")
					}
					return c.callUserCanReadPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanReadPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanReadPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanReadPlugin(ctx context.Context, in *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
	out := new(UserCanReadPluginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreatePluginVersion(ctx context.Context, in *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreatePluginVersion")
	caller := c.callUserCanCreatePluginVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreatePluginVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreatePluginVersionRequest) when calling interceptor")
					}
					return c.callUserCanCreatePluginVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreatePluginVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreatePluginVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreatePluginVersion(ctx context.Context, in *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
	out := new(UserCanCreatePluginVersionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreateTemplateVersion(ctx context.Context, in *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateTemplateVersion")
	caller := c.callUserCanCreateTemplateVersion
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateTemplateVersionRequest) when calling interceptor")
					}
					return c.callUserCanCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreateTemplateVersion(ctx context.Context, in *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
	out := new(UserCanCreateTemplateVersionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreateOrganizationPlugin(ctx context.Context, in *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationPlugin")
	caller := c.callUserCanCreateOrganizationPlugin
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationPluginRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreateOrganizationPlugin(ctx context.Context, in *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
	out := new(UserCanCreateOrganizationPluginResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanCreateOrganizationTemplate(ctx context.Context, in *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTemplate")
	caller := c.callUserCanCreateOrganizationTemplate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTemplateRequest) when calling interceptor")
					}
					return c.callUserCanCreateOrganizationTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanCreateOrganizationTemplate(ctx context.Context, in *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
	out := new(UserCanCreateOrganizationTemplateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanSeePluginSettings(ctx context.Context, in *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeePluginSettings")
	caller := c.callUserCanSeePluginSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeePluginSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeePluginSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeePluginSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeePluginSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeePluginSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanSeePluginSettings(ctx context.Context, in *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
	out := new(UserCanSeePluginSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *authzServiceJSONClient) UserCanSeeTemplateSettings(ctx context.Context, in *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeTemplateSettings")
	caller := c.callUserCanSeeTemplateSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeTemplateSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeTemplateSettingsRequest) when calling interceptor")
					}
					return c.callUserCanSeeTemplateSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeTemplateSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeTemplateSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *authzServiceJSONClient) callUserCanSeeTemplateSettings(ctx context.Context, in *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
	out := new(UserCanSeeTemplateSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===========================
// AuthzService Server Handler
// ===========================

type authzServiceServer struct {
	AuthzService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewAuthzServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewAuthzServiceServer(svc AuthzService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &authzServiceServer{
		AuthzService:     svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *authzServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *authzServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// AuthzServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const AuthzServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.AuthzService/"

func (s *authzServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "AuthzService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.AuthzService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "UserCanAddUserOrganizationScopes":
		s.serveUserCanAddUserOrganizationScopes(ctx, resp, req)
		return
	case "UserCanRemoveUserOrganizationScopes":
		s.serveUserCanRemoveUserOrganizationScopes(ctx, resp, req)
		return
	case "UserCanCreateOrganizationRepository":
		s.serveUserCanCreateOrganizationRepository(ctx, resp, req)
		return
	case "UserCanCreateOrganizationTeam":
		s.serveUserCanCreateOrganizationTeam(ctx, resp, req)
		return
	case "UserCanListOrganizationTeams":
		s.serveUserCanListOrganizationTeams(ctx, resp, req)
		return
	case "UserCanSeeRepositorySettings":
		s.serveUserCanSeeRepositorySettings(ctx, resp, req)
		return
	case "UserCanSeeOrganizationSettings":
		s.serveUserCanSeeOrganizationSettings(ctx, resp, req)
		return
	case "UserCanReadPlugin":
		s.serveUserCanReadPlugin(ctx, resp, req)
		return
	case "UserCanCreatePluginVersion":
		s.serveUserCanCreatePluginVersion(ctx, resp, req)
		return
	case "UserCanCreateTemplateVersion":
		s.serveUserCanCreateTemplateVersion(ctx, resp, req)
		return
	case "UserCanCreateOrganizationPlugin":
		s.serveUserCanCreateOrganizationPlugin(ctx, resp, req)
		return
	case "UserCanCreateOrganizationTemplate":
		s.serveUserCanCreateOrganizationTemplate(ctx, resp, req)
		return
	case "UserCanSeePluginSettings":
		s.serveUserCanSeePluginSettings(ctx, resp, req)
		return
	case "UserCanSeeTemplateSettings":
		s.serveUserCanSeeTemplateSettings(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *authzServiceServer) serveUserCanAddUserOrganizationScopes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanAddUserOrganizationScopesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanAddUserOrganizationScopesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanAddUserOrganizationScopesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanAddUserOrganizationScopes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanAddUserOrganizationScopesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanAddUserOrganizationScopes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanAddUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanAddUserOrganizationScopesRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanAddUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanAddUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanAddUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanAddUserOrganizationScopesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanAddUserOrganizationScopesResponse and nil error while calling UserCanAddUserOrganizationScopes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanAddUserOrganizationScopesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanAddUserOrganizationScopes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanAddUserOrganizationScopesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanAddUserOrganizationScopes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanAddUserOrganizationScopesRequest) (*UserCanAddUserOrganizationScopesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanAddUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanAddUserOrganizationScopesRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanAddUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanAddUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanAddUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanAddUserOrganizationScopesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanAddUserOrganizationScopesResponse and nil error while calling UserCanAddUserOrganizationScopes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanRemoveUserOrganizationScopes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanRemoveUserOrganizationScopesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanRemoveUserOrganizationScopesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanRemoveUserOrganizationScopesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanRemoveUserOrganizationScopes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanRemoveUserOrganizationScopesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanRemoveUserOrganizationScopes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanRemoveUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanRemoveUserOrganizationScopesRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanRemoveUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanRemoveUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanRemoveUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanRemoveUserOrganizationScopesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanRemoveUserOrganizationScopesResponse and nil error while calling UserCanRemoveUserOrganizationScopes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanRemoveUserOrganizationScopesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanRemoveUserOrganizationScopes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanRemoveUserOrganizationScopesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanRemoveUserOrganizationScopes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanRemoveUserOrganizationScopesRequest) (*UserCanRemoveUserOrganizationScopesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanRemoveUserOrganizationScopesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanRemoveUserOrganizationScopesRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanRemoveUserOrganizationScopes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanRemoveUserOrganizationScopesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanRemoveUserOrganizationScopesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanRemoveUserOrganizationScopesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanRemoveUserOrganizationScopesResponse and nil error while calling UserCanRemoveUserOrganizationScopes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationRepository(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreateOrganizationRepositoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreateOrganizationRepositoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreateOrganizationRepositoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationRepository")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationRepositoryRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationRepository
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationRepositoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationRepositoryRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationRepository(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationRepositoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationRepositoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationRepositoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationRepositoryResponse and nil error while calling UserCanCreateOrganizationRepository. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationRepositoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationRepository")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationRepositoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationRepository
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationRepositoryRequest) (*UserCanCreateOrganizationRepositoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationRepositoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationRepositoryRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationRepository(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationRepositoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationRepositoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationRepositoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationRepositoryResponse and nil error while calling UserCanCreateOrganizationRepository. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTeam(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreateOrganizationTeamJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreateOrganizationTeamProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTeamJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTeam")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationTeamRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationTeam
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTeamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTeamRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationTeam(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTeamResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTeamResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationTeamResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationTeamResponse and nil error while calling UserCanCreateOrganizationTeam. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTeamProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTeam")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationTeamRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationTeam
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationTeamRequest) (*UserCanCreateOrganizationTeamResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTeamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTeamRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationTeam(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTeamResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTeamResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationTeamResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationTeamResponse and nil error while calling UserCanCreateOrganizationTeam. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanListOrganizationTeams(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanListOrganizationTeamsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanListOrganizationTeamsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanListOrganizationTeamsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanListOrganizationTeams")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanListOrganizationTeamsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanListOrganizationTeams
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanListOrganizationTeamsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanListOrganizationTeamsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanListOrganizationTeams(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanListOrganizationTeamsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanListOrganizationTeamsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanListOrganizationTeamsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanListOrganizationTeamsResponse and nil error while calling UserCanListOrganizationTeams. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanListOrganizationTeamsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanListOrganizationTeams")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanListOrganizationTeamsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanListOrganizationTeams
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanListOrganizationTeamsRequest) (*UserCanListOrganizationTeamsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanListOrganizationTeamsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanListOrganizationTeamsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanListOrganizationTeams(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanListOrganizationTeamsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanListOrganizationTeamsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanListOrganizationTeamsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanListOrganizationTeamsResponse and nil error while calling UserCanListOrganizationTeams. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeRepositorySettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanSeeRepositorySettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanSeeRepositorySettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanSeeRepositorySettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeRepositorySettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanSeeRepositorySettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanSeeRepositorySettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeRepositorySettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeRepositorySettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeRepositorySettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeRepositorySettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeRepositorySettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeRepositorySettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeRepositorySettingsResponse and nil error while calling UserCanSeeRepositorySettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeRepositorySettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeRepositorySettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanSeeRepositorySettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanSeeRepositorySettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeRepositorySettingsRequest) (*UserCanSeeRepositorySettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeRepositorySettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeRepositorySettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeRepositorySettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeRepositorySettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeRepositorySettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeRepositorySettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeRepositorySettingsResponse and nil error while calling UserCanSeeRepositorySettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeOrganizationSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanSeeOrganizationSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanSeeOrganizationSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanSeeOrganizationSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeOrganizationSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanSeeOrganizationSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanSeeOrganizationSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeOrganizationSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeOrganizationSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeOrganizationSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeOrganizationSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeOrganizationSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeOrganizationSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeOrganizationSettingsResponse and nil error while calling UserCanSeeOrganizationSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeOrganizationSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeOrganizationSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanSeeOrganizationSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanSeeOrganizationSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeOrganizationSettingsRequest) (*UserCanSeeOrganizationSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeOrganizationSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeOrganizationSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeOrganizationSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeOrganizationSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeOrganizationSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeOrganizationSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeOrganizationSettingsResponse and nil error while calling UserCanSeeOrganizationSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanReadPlugin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanReadPluginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanReadPluginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanReadPluginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanReadPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanReadPluginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanReadPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanReadPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanReadPluginRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanReadPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanReadPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanReadPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanReadPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanReadPluginResponse and nil error while calling UserCanReadPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanReadPluginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanReadPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanReadPluginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanReadPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanReadPluginRequest) (*UserCanReadPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanReadPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanReadPluginRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanReadPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanReadPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanReadPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanReadPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanReadPluginResponse and nil error while calling UserCanReadPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreatePluginVersion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreatePluginVersionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreatePluginVersionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreatePluginVersionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreatePluginVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreatePluginVersionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreatePluginVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreatePluginVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreatePluginVersionRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreatePluginVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreatePluginVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreatePluginVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreatePluginVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreatePluginVersionResponse and nil error while calling UserCanCreatePluginVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreatePluginVersionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreatePluginVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreatePluginVersionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreatePluginVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreatePluginVersionRequest) (*UserCanCreatePluginVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreatePluginVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreatePluginVersionRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreatePluginVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreatePluginVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreatePluginVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreatePluginVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreatePluginVersionResponse and nil error while calling UserCanCreatePluginVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateTemplateVersion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreateTemplateVersionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreateTemplateVersionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreateTemplateVersionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreateTemplateVersionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreateTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateTemplateVersionRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateTemplateVersionResponse and nil error while calling UserCanCreateTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateTemplateVersionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateTemplateVersion")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreateTemplateVersionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreateTemplateVersion
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateTemplateVersionRequest) (*UserCanCreateTemplateVersionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateTemplateVersionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateTemplateVersionRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateTemplateVersion(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateTemplateVersionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateTemplateVersionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateTemplateVersionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateTemplateVersionResponse and nil error while calling UserCanCreateTemplateVersion. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationPlugin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreateOrganizationPluginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreateOrganizationPluginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreateOrganizationPluginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationPluginRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationPluginRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationPluginResponse and nil error while calling UserCanCreateOrganizationPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationPluginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationPlugin")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationPluginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationPlugin
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationPluginRequest) (*UserCanCreateOrganizationPluginResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationPluginRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationPluginRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationPlugin(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationPluginResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationPluginResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationPluginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationPluginResponse and nil error while calling UserCanCreateOrganizationPlugin. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTemplate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanCreateOrganizationTemplateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanCreateOrganizationTemplateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTemplateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationTemplateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTemplateRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationTemplateResponse and nil error while calling UserCanCreateOrganizationTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanCreateOrganizationTemplateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanCreateOrganizationTemplate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanCreateOrganizationTemplateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanCreateOrganizationTemplate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanCreateOrganizationTemplateRequest) (*UserCanCreateOrganizationTemplateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanCreateOrganizationTemplateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanCreateOrganizationTemplateRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanCreateOrganizationTemplate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanCreateOrganizationTemplateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanCreateOrganizationTemplateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanCreateOrganizationTemplateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanCreateOrganizationTemplateResponse and nil error while calling UserCanCreateOrganizationTemplate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeePluginSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanSeePluginSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanSeePluginSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanSeePluginSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeePluginSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanSeePluginSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanSeePluginSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeePluginSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeePluginSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeePluginSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeePluginSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeePluginSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeePluginSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeePluginSettingsResponse and nil error while calling UserCanSeePluginSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeePluginSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeePluginSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanSeePluginSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanSeePluginSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeePluginSettingsRequest) (*UserCanSeePluginSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeePluginSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeePluginSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeePluginSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeePluginSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeePluginSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeePluginSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeePluginSettingsResponse and nil error while calling UserCanSeePluginSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeTemplateSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUserCanSeeTemplateSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUserCanSeeTemplateSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authzServiceServer) serveUserCanSeeTemplateSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeTemplateSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UserCanSeeTemplateSettingsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.AuthzService.UserCanSeeTemplateSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeTemplateSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeTemplateSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeTemplateSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeTemplateSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeTemplateSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeTemplateSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeTemplateSettingsResponse and nil error while calling UserCanSeeTemplateSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) serveUserCanSeeTemplateSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UserCanSeeTemplateSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UserCanSeeTemplateSettingsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.AuthzService.UserCanSeeTemplateSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UserCanSeeTemplateSettingsRequest) (*UserCanSeeTemplateSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UserCanSeeTemplateSettingsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UserCanSeeTemplateSettingsRequest) when calling interceptor")
					}
					return s.AuthzService.UserCanSeeTemplateSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UserCanSeeTemplateSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UserCanSeeTemplateSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UserCanSeeTemplateSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserCanSeeTemplateSettingsResponse and nil error while calling UserCanSeeTemplateSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authzServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *authzServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *authzServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "AuthzService")
}

var twirpFileDescriptor2 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcb, 0x6e, 0xd3, 0x4e,
	0x14, 0x87, 0xe5, 0xfe, 0x2f, 0x82, 0xa3, 0x02, 0x62, 0xc4, 0xa2, 0xb8, 0xd0, 0x96, 0x14, 0x68,
	0x01, 0xc9, 0x56, 0x41, 0xb0, 0x29, 0xb7, 0x5c, 0x7a, 0xa7, 0xb4, 0x38, 0x6d, 0x17, 0xdd, 0x20,
	0x27, 0x99, 0xa4, 0x96, 0x12, 0x4f, 0x18, 0x8f, 0x8b, 0xda, 0x25, 0x2f, 0xc1, 0x8a, 0x0d, 0x48,
	0x48, 0x20, 0x10, 0x12, 0x2b, 0x96, 0x3c, 0x1a, 0x8a, 0xe3, 0x4c, 0x2e, 0xb6, 0xa7, 0x27, 0x36,
	0x3b, 0x77, 0x62, 0xff, 0xfc, 0xcd, 0xcc, 0x39, 0xf6, 0x57, 0xc3, 0x42, 0xc5, 0xaf, 0x9b, 0x76,
	0xb3, 0x7d, 0x64, 0x9b, 0x9c, 0x36, 0x1c, 0x4f, 0xf0, 0x13, 0xf3, 0x78, 0x29, 0x18, 0x58, 0x32,
	0x6d, 0x5f, 0x1c, 0x9d, 0x1a, 0x6d, 0xce, 0x04, 0x23, 0xd3, 0x15, 0xbf, 0x6e, 0x04, 0xe3, 0x46,
	0xef, 0x44, 0xa3, 0x77, 0x62, 0xce, 0x82, 0x85, 0x7d, 0x8f, 0xf2, 0xa2, 0xed, 0xe6, 0x6b, 0xb5,
	0xce, 0xd1, 0x0e, 0x6f, 0xd8, 0xae, 0x73, 0x6a, 0x0b, 0x87, 0xb9, 0xe5, 0x2a, 0x6b, 0x53, 0xcf,
	0xa2, 0x6f, 0x7c, 0xea, 0x09, 0xb2, 0x00, 0x97, 0xd8, 0xc0, 0x8f, 0xaf, 0x9d, 0xda, 0x94, 0x36,
	0xa7, 0x2d, 0x9e, 0xb7, 0x2e, 0x0e, 0x0e, 0x6f, 0xd4, 0x72, 0x9b, 0xb0, 0x78, 0x76, 0xa6, 0xd7,
	0x66, 0xae, 0x47, 0xc9, 0x0c, 0x40, 0x87, 0x95, 0x71, 0xe7, 0x94, 0x76, 0xf3, 0xce, 0x59, 0x03,
	0x23, 0xb9, 0x7d, 0xb8, 0x1b, 0x66, 0x59, 0xb4, 0xc5, 0x8e, 0xe9, 0x5f, 0x42, 0xdc, 0x86, 0x7b,
	0xa8, 0xd8, 0xb1, 0x29, 0x8b, 0x9c, 0xda, 0x82, 0x0e, 0x46, 0x59, 0xb4, 0xcd, 0x3c, 0x47, 0x30,
	0x7e, 0x92, 0x81, 0x52, 0x1d, 0x8b, 0xa4, 0xdc, 0x81, 0x9b, 0x89, 0x71, 0x7b, 0xd4, 0x6e, 0x8d,
	0xcd, 0xb7, 0x06, 0xb7, 0xce, 0x08, 0x44, 0x92, 0xbd, 0x84, 0xf9, 0x30, 0xe8, 0x85, 0xe3, 0x89,
	0xd1, 0x98, 0xf1, 0xb7, 0x77, 0x55, 0xce, 0x34, 0x21, 0x0f, 0xc9, 0xb5, 0x29, 0xb9, 0xca, 0x94,
	0xf6, 0x57, 0xbc, 0x4c, 0x85, 0x70, 0xdc, 0x86, 0xe4, 0x9a, 0x87, 0x0b, 0x5c, 0xfe, 0xd8, 0xa7,
	0x9a, 0xec, 0x0f, 0x0e, 0x31, 0x25, 0x64, 0x21, 0x99, 0x76, 0xe5, 0xa2, 0x97, 0xe9, 0xd0, 0x8a,
	0x8f, 0x52, 0xa1, 0x57, 0x6b, 0x1d, 0x6e, 0x9f, 0x95, 0x88, 0x64, 0x2b, 0xc1, 0x94, 0x6c, 0x2b,
	0xbb, 0xb6, 0xdb, 0xf4, 0x1b, 0x8e, 0xdb, 0xc3, 0xb9, 0x02, 0xff, 0xb1, 0xb7, 0x2e, 0xe5, 0x21,
	0x44, 0xf7, 0x0f, 0x42, 0xe0, 0x5f, 0xd7, 0x6e, 0xd1, 0xa9, 0x89, 0x60, 0x30, 0x38, 0xce, 0x2d,
	0xc3, 0xd5, 0x98, 0x14, 0x24, 0xc2, 0x36, 0xdc, 0x18, 0xaa, 0xc9, 0xee, 0xe5, 0x07, 0x94, 0x7b,
	0x41, 0xd3, 0x8c, 0xcb, 0x52, 0x82, 0x9c, 0x2a, 0x0e, 0xdd, 0x79, 0xf3, 0x43, 0x29, 0x7b, 0xb4,
	0xd5, 0x6e, 0xda, 0x82, 0xa6, 0xc6, 0x5a, 0x1d, 0x69, 0xe5, 0x48, 0x20, 0x12, 0xec, 0x95, 0xdc,
	0xfa, 0x68, 0x07, 0x0f, 0x6f, 0x1f, 0xba, 0x9a, 0x36, 0xe4, 0x1b, 0x25, 0x39, 0x12, 0x49, 0x57,
	0x96, 0x2f, 0x92, 0xb8, 0xe7, 0x4b, 0x77, 0xc6, 0x63, 0xf3, 0x6d, 0xc1, 0x1d, 0x44, 0x28, 0x92,
	0x70, 0x0b, 0x66, 0xfb, 0xad, 0xd3, 0x9d, 0xdd, 0x68, 0x1b, 0xe2, 0x37, 0xb5, 0x00, 0x73, 0xc9,
	0x61, 0x63, 0x97, 0x7f, 0x99, 0xca, 0xaa, 0x48, 0x8f, 0xd4, 0x2f, 0xff, 0xd8, 0x38, 0x1c, 0xd4,
	0xfd, 0xdf, 0x04, 0x26, 0xf3, 0x1d, 0x23, 0x29, 0x53, 0x7e, 0xec, 0x54, 0x29, 0xf9, 0xa1, 0xc9,
	0xa9, 0x26, 0x2a, 0x02, 0x29, 0x19, 0x0a, 0x71, 0x31, 0x90, 0xd6, 0xa2, 0xaf, 0x64, 0x4c, 0x09,
	0xa7, 0xf8, 0x4b, 0x93, 0x2d, 0xac, 0x32, 0x06, 0xb2, 0x86, 0xb9, 0x1d, 0x42, 0x65, 0xf4, 0xf5,
	0xec, 0x41, 0x51, 0x74, 0x95, 0x46, 0xe0, 0xd0, 0x11, 0x7e, 0x83, 0x43, 0x47, 0x19, 0xcd, 0x67,
	0x0d, 0xae, 0x2b, 0x0d, 0x83, 0xe4, 0xd3, 0xdd, 0x6b, 0x40, 0x77, 0xf4, 0x42, 0x96, 0x88, 0x10,
	0xf4, 0x93, 0x06, 0xd7, 0x54, 0xc6, 0x41, 0x9e, 0x63, 0x6e, 0xa2, 0x92, 0x1f, 0x3d, 0x9f, 0x21,
	0x21, 0x4a, 0x19, 0xeb, 0x20, 0x38, 0x4a, 0x95, 0x0a, 0xe1, 0x28, 0xd5, 0x02, 0xf4, 0x45, 0x83,
	0x19, 0xb5, 0x8f, 0x90, 0x02, 0xf2, 0x2e, 0x0a, 0x3d, 0xd2, 0x8b, 0x99, 0x32, 0x42, 0xd6, 0x77,
	0x1a, 0x5c, 0x8e, 0xb8, 0x0a, 0x79, 0x88, 0xeb, 0xdd, 0x11, 0x43, 0xd2, 0x1f, 0x8d, 0x7b, 0x59,
	0x08, 0xf1, 0x41, 0x03, 0x3d, 0x59, 0x52, 0xc8, 0x53, 0x7c, 0x7d, 0xc7, 0xc9, 0x92, 0xfe, 0x2c,
	0xf5, 0xf5, 0xd1, 0xb2, 0x8b, 0xb5, 0x15, 0x5c, 0xd9, 0xa9, 0xcc, 0x49, 0xcf, 0x67, 0x48, 0x08,
	0x29, 0xbf, 0x69, 0xf2, 0x5d, 0x9e, 0x24, 0x2e, 0xa4, 0x98, 0xee, 0x51, 0x31, 0xbc, 0xcd, 0xa5,
	0x6c, 0x21, 0x21, 0xee, 0x4f, 0x6d, 0x44, 0x74, 0xe3, 0x3c, 0x86, 0xac, 0xa4, 0x7d, 0xb6, 0x0d,
	0xc9, 0x95, 0xbe, 0x9a, 0x35, 0x26, 0x84, 0x7e, 0xaf, 0xc9, 0x7f, 0x10, 0x22, 0x8a, 0x43, 0x1e,
	0x23, 0x1b, 0x32, 0x56, 0xb3, 0xf4, 0x27, 0x29, 0xaf, 0x8e, 0xf6, 0x50, 0x8c, 0xe9, 0xe0, 0x7a,
	0x28, 0xd9, 0xb8, 0x70, 0x3d, 0xa4, 0x50, 0xac, 0xc2, 0x77, 0x0d, 0x66, 0xab, 0xac, 0xa5, 0x8a,
	0x29, 0x40, 0xe0, 0x58, 0xbb, 0x9c, 0x09, 0x76, 0x78, 0xd8, 0x70, 0xc4, 0x91, 0x5f, 0x31, 0xaa,
	0xac, 0x65, 0x56, 0xfc, 0x7a, 0xc5, 0x77, 0x9a, 0xb5, 0xce, 0x81, 0xe9, 0xb8, 0x82, 0x72, 0xd7,
	0x6e, 0x9a, 0x0d, 0xea, 0x9a, 0xc1, 0x07, 0x22, 0xb3, 0xc1, 0x4c, 0xc5, 0xb7, 0xa4, 0xe5, 0xde,
	0x48, 0x6f, 0xe0, 0xe3, 0xc4, 0x3f, 0x85, 0xbc, 0xf5, 0x75, 0x62, 0xba, 0xe0, 0xd7, 0x8d, 0x7c,
	0xc0, 0x62, 0xf5, 0x58, 0x0e, 0xc2, 0x73, 0x2a, 0xff, 0x07, 0xd1, 0x0f, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0x10, 0x22, 0x43, 0xa6, 0x12, 0x00, 0x00,
}
