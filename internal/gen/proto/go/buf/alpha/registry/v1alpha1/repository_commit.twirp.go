// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/repository_commit.proto

package registryv1alpha1

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =================================
// RepositoryCommitService Interface
// =================================

// RepositoryCommitService is the Repository commit service.
type RepositoryCommitService interface {
	// ListRepositoryCommitsByBranch lists the repository commits associated
	// with a repository branch on a repository, ordered by their create time.
	ListRepositoryCommitsByBranch(context.Context, *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error)

	// ListRepositoryCommitsByReference returns repository commits up-to and including
	// the provided reference.
	ListRepositoryCommitsByReference(context.Context, *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error)

	// GetRepositoryCommitByReference returns the repository commit matching
	// the provided reference, if it exists.
	GetRepositoryCommitByReference(context.Context, *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error)

	// GetRepositoryCommitBySequenceID returns the repository commit matching
	// the provided sequence ID and branch, if it exists.
	GetRepositoryCommitBySequenceID(context.Context, *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error)
}

// =======================================
// RepositoryCommitService Protobuf Client
// =======================================

type repositoryCommitServiceProtobufClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRepositoryCommitServiceProtobufClient creates a Protobuf client that implements the RepositoryCommitService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRepositoryCommitServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RepositoryCommitService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
	urls := [4]string{
		serviceURL + "ListRepositoryCommitsByBranch",
		serviceURL + "ListRepositoryCommitsByReference",
		serviceURL + "GetRepositoryCommitByReference",
		serviceURL + "GetRepositoryCommitBySequenceID",
	}

	return &repositoryCommitServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *repositoryCommitServiceProtobufClient) ListRepositoryCommitsByBranch(ctx context.Context, in *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByBranch")
	caller := c.callListRepositoryCommitsByBranch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByBranchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByBranchRequest) when calling interceptor")
					}
					return c.callListRepositoryCommitsByBranch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByBranchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByBranchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceProtobufClient) callListRepositoryCommitsByBranch(ctx context.Context, in *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
	out := new(ListRepositoryCommitsByBranchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceProtobufClient) ListRepositoryCommitsByReference(ctx context.Context, in *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByReference")
	caller := c.callListRepositoryCommitsByReference
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByReferenceRequest) when calling interceptor")
					}
					return c.callListRepositoryCommitsByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceProtobufClient) callListRepositoryCommitsByReference(ctx context.Context, in *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
	out := new(ListRepositoryCommitsByReferenceResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceProtobufClient) GetRepositoryCommitByReference(ctx context.Context, in *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitByReference")
	caller := c.callGetRepositoryCommitByReference
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitByReferenceRequest) when calling interceptor")
					}
					return c.callGetRepositoryCommitByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceProtobufClient) callGetRepositoryCommitByReference(ctx context.Context, in *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
	out := new(GetRepositoryCommitByReferenceResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceProtobufClient) GetRepositoryCommitBySequenceID(ctx context.Context, in *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitBySequenceID")
	caller := c.callGetRepositoryCommitBySequenceID
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitBySequenceIDRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitBySequenceIDRequest) when calling interceptor")
					}
					return c.callGetRepositoryCommitBySequenceID(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitBySequenceIDResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitBySequenceIDResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceProtobufClient) callGetRepositoryCommitBySequenceID(ctx context.Context, in *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
	out := new(GetRepositoryCommitBySequenceIDResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===================================
// RepositoryCommitService JSON Client
// ===================================

type repositoryCommitServiceJSONClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRepositoryCommitServiceJSONClient creates a JSON client that implements the RepositoryCommitService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRepositoryCommitServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RepositoryCommitService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
	urls := [4]string{
		serviceURL + "ListRepositoryCommitsByBranch",
		serviceURL + "ListRepositoryCommitsByReference",
		serviceURL + "GetRepositoryCommitByReference",
		serviceURL + "GetRepositoryCommitBySequenceID",
	}

	return &repositoryCommitServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *repositoryCommitServiceJSONClient) ListRepositoryCommitsByBranch(ctx context.Context, in *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByBranch")
	caller := c.callListRepositoryCommitsByBranch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByBranchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByBranchRequest) when calling interceptor")
					}
					return c.callListRepositoryCommitsByBranch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByBranchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByBranchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceJSONClient) callListRepositoryCommitsByBranch(ctx context.Context, in *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
	out := new(ListRepositoryCommitsByBranchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceJSONClient) ListRepositoryCommitsByReference(ctx context.Context, in *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByReference")
	caller := c.callListRepositoryCommitsByReference
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByReferenceRequest) when calling interceptor")
					}
					return c.callListRepositoryCommitsByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceJSONClient) callListRepositoryCommitsByReference(ctx context.Context, in *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
	out := new(ListRepositoryCommitsByReferenceResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceJSONClient) GetRepositoryCommitByReference(ctx context.Context, in *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitByReference")
	caller := c.callGetRepositoryCommitByReference
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitByReferenceRequest) when calling interceptor")
					}
					return c.callGetRepositoryCommitByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceJSONClient) callGetRepositoryCommitByReference(ctx context.Context, in *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
	out := new(GetRepositoryCommitByReferenceResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *repositoryCommitServiceJSONClient) GetRepositoryCommitBySequenceID(ctx context.Context, in *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitBySequenceID")
	caller := c.callGetRepositoryCommitBySequenceID
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitBySequenceIDRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitBySequenceIDRequest) when calling interceptor")
					}
					return c.callGetRepositoryCommitBySequenceID(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitBySequenceIDResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitBySequenceIDResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceJSONClient) callGetRepositoryCommitBySequenceID(ctx context.Context, in *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
	out := new(GetRepositoryCommitBySequenceIDResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ======================================
// RepositoryCommitService Server Handler
// ======================================

type repositoryCommitServiceServer struct {
	RepositoryCommitService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewRepositoryCommitServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewRepositoryCommitServiceServer(svc RepositoryCommitService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &repositoryCommitServiceServer{
		RepositoryCommitService: svc,
		hooks:                   serverOpts.Hooks,
		interceptor:             twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:              pathPrefix,
		jsonSkipDefaults:        jsonSkipDefaults,
		jsonCamelCase:           jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *repositoryCommitServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *repositoryCommitServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// RepositoryCommitServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const RepositoryCommitServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.RepositoryCommitService/"

func (s *repositoryCommitServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.RepositoryCommitService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ListRepositoryCommitsByBranch":
		s.serveListRepositoryCommitsByBranch(ctx, resp, req)
		return
	case "ListRepositoryCommitsByReference":
		s.serveListRepositoryCommitsByReference(ctx, resp, req)
		return
	case "GetRepositoryCommitByReference":
		s.serveGetRepositoryCommitByReference(ctx, resp, req)
		return
	case "GetRepositoryCommitBySequenceID":
		s.serveGetRepositoryCommitBySequenceID(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByBranch(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListRepositoryCommitsByBranchJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListRepositoryCommitsByBranchProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByBranchJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByBranch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListRepositoryCommitsByBranchRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommitsByBranch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByBranchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByBranchRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommitsByBranch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByBranchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByBranchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsByBranchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsByBranchResponse and nil error while calling ListRepositoryCommitsByBranch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByBranchProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByBranch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListRepositoryCommitsByBranchRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommitsByBranch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsByBranchRequest) (*ListRepositoryCommitsByBranchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByBranchRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByBranchRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommitsByBranch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByBranchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByBranchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsByBranchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsByBranchResponse and nil error while calling ListRepositoryCommitsByBranch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByReference(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListRepositoryCommitsByReferenceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListRepositoryCommitsByReferenceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByReferenceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByReference")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListRepositoryCommitsByReferenceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommitsByReference
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByReferenceRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommitsByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsByReferenceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsByReferenceResponse and nil error while calling ListRepositoryCommitsByReference. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsByReferenceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommitsByReference")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListRepositoryCommitsByReferenceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommitsByReference
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsByReferenceRequest) (*ListRepositoryCommitsByReferenceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsByReferenceRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommitsByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsByReferenceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsByReferenceResponse and nil error while calling ListRepositoryCommitsByReference. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitByReference(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRepositoryCommitByReferenceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRepositoryCommitByReferenceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitByReferenceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitByReference")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetRepositoryCommitByReferenceRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RepositoryCommitService.GetRepositoryCommitByReference
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitByReferenceRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.GetRepositoryCommitByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRepositoryCommitByReferenceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRepositoryCommitByReferenceResponse and nil error while calling GetRepositoryCommitByReference. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitByReferenceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitByReference")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetRepositoryCommitByReferenceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.GetRepositoryCommitByReference
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRepositoryCommitByReferenceRequest) (*GetRepositoryCommitByReferenceResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitByReferenceRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitByReferenceRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.GetRepositoryCommitByReference(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitByReferenceResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitByReferenceResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRepositoryCommitByReferenceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRepositoryCommitByReferenceResponse and nil error while calling GetRepositoryCommitByReference. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitBySequenceID(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRepositoryCommitBySequenceIDJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRepositoryCommitBySequenceIDProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitBySequenceIDJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitBySequenceID")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetRepositoryCommitBySequenceIDRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RepositoryCommitService.GetRepositoryCommitBySequenceID
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitBySequenceIDRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitBySequenceIDRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.GetRepositoryCommitBySequenceID(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitBySequenceIDResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitBySequenceIDResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRepositoryCommitBySequenceIDResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRepositoryCommitBySequenceIDResponse and nil error while calling GetRepositoryCommitBySequenceID. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveGetRepositoryCommitBySequenceIDProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRepositoryCommitBySequenceID")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetRepositoryCommitBySequenceIDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.GetRepositoryCommitBySequenceID
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRepositoryCommitBySequenceIDRequest) (*GetRepositoryCommitBySequenceIDResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRepositoryCommitBySequenceIDRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRepositoryCommitBySequenceIDRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.GetRepositoryCommitBySequenceID(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRepositoryCommitBySequenceIDResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRepositoryCommitBySequenceIDResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRepositoryCommitBySequenceIDResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRepositoryCommitBySequenceIDResponse and nil error while calling GetRepositoryCommitBySequenceID. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor14, 0
}

func (s *repositoryCommitServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *repositoryCommitServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
}

var twirpFileDescriptor14 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdf, 0x4e, 0x13, 0x4d,
	0x14, 0xcf, 0x6c, 0xcb, 0xbf, 0x43, 0x80, 0x32, 0xf9, 0x3e, 0xbe, 0x4d, 0xf9, 0x90, 0xa6, 0x11,
	0xa8, 0x46, 0x77, 0x05, 0xbc, 0x23, 0x31, 0xa1, 0x60, 0x8c, 0x89, 0x51, 0xb2, 0x10, 0x2f, 0x88,
	0x49, 0xb3, 0x6d, 0xa7, 0xdb, 0x89, 0xed, 0x4e, 0x9d, 0x99, 0x45, 0xe1, 0x5a, 0x7d, 0x07, 0x6f,
	0xbd, 0x30, 0xc1, 0x68, 0xf4, 0xd2, 0xb7, 0xf0, 0x15, 0x7c, 0x05, 0xdf, 0xc0, 0xcc, 0xcc, 0x2e,
	0x6d, 0x5a, 0x68, 0x2b, 0x0d, 0x09, 0x77, 0x3b, 0xbf, 0x39, 0xe7, 0x37, 0xbf, 0xf9, 0x9d, 0x99,
	0xb3, 0x03, 0x9b, 0xe5, 0xa8, 0xe6, 0xfa, 0x8d, 0x56, 0xdd, 0x77, 0x39, 0x09, 0xa8, 0x90, 0xfc,
	0xd8, 0x3d, 0x5a, 0xd7, 0xc0, 0xba, 0xcb, 0x49, 0x8b, 0x09, 0x2a, 0x19, 0x3f, 0x2e, 0x55, 0x58,
	0xb3, 0x49, 0xa5, 0xd3, 0xe2, 0x4c, 0x32, 0xbc, 0x58, 0x8e, 0x6a, 0x8e, 0x8e, 0x71, 0x92, 0x24,
	0x27, 0x49, 0xca, 0xde, 0x1b, 0x92, 0x51, 0xfa, 0x81, 0xa1, 0xcb, 0x2e, 0x07, 0x8c, 0x05, 0x0d,
	0xe2, 0xea, 0x91, 0xca, 0x96, 0xb4, 0x49, 0x84, 0xf4, 0x9b, 0x2d, 0x13, 0x90, 0x3f, 0xb5, 0x20,
	0xe3, 0x9d, 0x65, 0xee, 0x68, 0x29, 0x78, 0x16, 0x2c, 0x5a, 0xb5, 0x51, 0x0e, 0x15, 0xa6, 0x3c,
	0x8b, 0x56, 0xf1, 0x16, 0x4c, 0x57, 0x38, 0xf1, 0x25, 0x29, 0xa9, 0x74, 0xdb, 0xca, 0xa1, 0xc2,
	0xf4, 0x46, 0xd6, 0x31, 0xdc, 0x4e, 0xc2, 0xed, 0x1c, 0x24, 0xdc, 0x1e, 0x98, 0x70, 0x05, 0xe0,
	0x05, 0x18, 0xaf, 0xd2, 0x80, 0x08, 0x69, 0xa7, 0x34, 0x61, 0x3c, 0xc2, 0x18, 0xd2, 0xa1, 0xdf,
	0x24, 0x76, 0x5a, 0xa3, 0xfa, 0x5b, 0xc5, 0x96, 0xb9, 0x1f, 0x56, 0xea, 0xf6, 0x98, 0x89, 0x35,
	0x23, 0x7c, 0x07, 0xb0, 0x71, 0xa9, 0x24, 0xc8, 0xab, 0x88, 0x84, 0x15, 0x52, 0xa2, 0x55, 0x7b,
	0x3c, 0x87, 0x0a, 0x29, 0x2f, 0x63, 0x66, 0xf6, 0xe3, 0x89, 0xc7, 0x55, 0xc5, 0xe2, 0x47, 0xb2,
	0xce, 0xb8, 0x3d, 0x61, 0x58, 0xcc, 0x08, 0x3f, 0x80, 0xb4, 0xf4, 0x03, 0x61, 0x4f, 0xe6, 0x52,
	0x85, 0xe9, 0x8d, 0xdb, 0x4e, 0x1f, 0xab, 0x9d, 0xb6, 0x27, 0x07, 0x7e, 0xe0, 0xe9, 0xbc, 0xfc,
	0x7b, 0x0b, 0x6e, 0x3e, 0xa1, 0x42, 0x76, 0xfb, 0x25, 0x8a, 0xc7, 0x45, 0xad, 0xd3, 0x53, 0x1a,
	0x84, 0xc4, 0xb7, 0x20, 0xd3, 0x51, 0x0d, 0xf6, 0x3a, 0x24, 0x3c, 0x76, 0x73, 0xae, 0x8d, 0x3f,
	0x53, 0x30, 0x5e, 0x83, 0x0e, 0xa8, 0xa4, 0x0d, 0xb1, 0x74, 0xe4, 0x6c, 0x1b, 0x7e, 0xaa, 0xac,
	0xb9, 0x0f, 0x0b, 0x1d, 0x81, 0xc6, 0x17, 0x13, 0x6f, 0x6c, 0xfd, 0xa7, 0x3d, 0x6b, 0xc4, 0xe8,
	0xac, 0x45, 0x98, 0x6a, 0xf9, 0x01, 0x29, 0x09, 0x7a, 0x62, 0x9c, 0x9e, 0xf1, 0x26, 0x15, 0xb0,
	0x4f, 0x4f, 0x08, 0x5e, 0x02, 0xd0, 0x93, 0x92, 0xbd, 0x24, 0x61, 0xec, 0xb8, 0x0e, 0x3f, 0x50,
	0x00, 0xb6, 0x61, 0x82, 0x93, 0x23, 0xc2, 0x05, 0xd1, 0x4e, 0x4f, 0x7a, 0xc9, 0x30, 0xff, 0x15,
	0xc1, 0xca, 0x00, 0x23, 0x44, 0x8b, 0x85, 0x82, 0xe0, 0x17, 0x80, 0x7b, 0x4e, 0xba, 0xb0, 0x91,
	0x2e, 0xc0, 0xdd, 0x21, 0x0b, 0x60, 0xb8, 0xbd, 0x79, 0xde, 0xbd, 0x1a, 0x5e, 0x85, 0xb9, 0x90,
	0xbc, 0x91, 0xa5, 0x8e, 0x5d, 0x18, 0xf3, 0x66, 0x14, 0xbc, 0x97, 0xec, 0x24, 0xff, 0x1b, 0xc1,
	0xda, 0x05, 0x7a, 0x3d, 0x52, 0x23, 0x5c, 0x9d, 0x9b, 0xab, 0xac, 0xdd, 0xff, 0x30, 0xc5, 0x93,
	0x75, 0xe2, 0x72, 0xb5, 0x81, 0x2b, 0xaa, 0xd1, 0x77, 0x04, 0x85, 0xc1, 0x7b, 0xbe, 0x56, 0x65,
	0xfa, 0x80, 0x60, 0xe5, 0x11, 0xe9, 0x51, 0x7c, 0x1d, 0x8a, 0x94, 0x7f, 0x8b, 0x60, 0x75, 0x90,
	0xb6, 0xd8, 0xcc, 0x43, 0x98, 0xef, 0x31, 0x53, 0xab, 0xfb, 0x6b, 0x2f, 0x33, 0xdd, 0x5e, 0xe6,
	0x7f, 0x5d, 0x24, 0xe3, 0xac, 0xfd, 0xed, 0x5e, 0xbf, 0x26, 0x74, 0x7e, 0xf7, 0x4e, 0x9f, 0xdf,
	0xbd, 0xf3, 0xef, 0x10, 0xac, 0x0d, 0xdc, 0xe2, 0xd5, 0x5b, 0xbd, 0xf1, 0x73, 0x0c, 0xfe, 0xeb,
	0x0e, 0xdb, 0x27, 0xfc, 0x88, 0x56, 0x08, 0xfe, 0x84, 0x60, 0xa9, 0x6f, 0x03, 0xc4, 0xdb, 0x7d,
	0x97, 0x1f, 0xe6, 0x2f, 0x92, 0x2d, 0x8e, 0x42, 0x11, 0x1b, 0xf4, 0x0d, 0x41, 0x6e, 0x50, 0x17,
	0xc0, 0xbb, 0x97, 0x59, 0xa8, 0xfb, 0x4e, 0x66, 0x1f, 0x8e, 0xc8, 0x12, 0x2b, 0x3e, 0x45, 0x70,
	0xa3, 0xff, 0x45, 0xc3, 0xfd, 0x8d, 0x19, 0xaa, 0x83, 0x64, 0x77, 0x46, 0xe2, 0x88, 0xb5, 0x7e,
	0x41, 0xb0, 0x3c, 0xe0, 0xa8, 0xe2, 0x4b, 0x2c, 0xd4, 0x73, 0x97, 0xb3, 0xbb, 0xa3, 0x91, 0x18,
	0xb9, 0xc5, 0x1f, 0x08, 0x96, 0x2b, 0xac, 0xd9, 0x8f, 0xab, 0xf8, 0x6f, 0x37, 0xd3, 0x9e, 0x7a,
	0xdd, 0x1d, 0x1e, 0x06, 0x54, 0xd6, 0xa3, 0xb2, 0x53, 0x61, 0x4d, 0xb7, 0x1c, 0xd5, 0xca, 0x11,
	0x6d, 0x54, 0xd5, 0x87, 0x4b, 0x43, 0x49, 0x78, 0xe8, 0x37, 0xdc, 0x80, 0x84, 0xe6, 0x95, 0xe9,
	0x06, 0xcc, 0xed, 0xf3, 0x4e, 0xdd, 0x4a, 0x90, 0x04, 0xf8, 0x68, 0xa5, 0x8a, 0xdb, 0xde, 0x67,
	0x6b, 0xb1, 0x18, 0xd5, 0x9c, 0x6d, 0x2d, 0xcb, 0x4b, 0x64, 0x3d, 0x8f, 0x63, 0xca, 0xe3, 0x9a,
	0x7a, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x9e, 0xf7, 0x49, 0x54, 0x0b, 0x00, 0x00,
}
