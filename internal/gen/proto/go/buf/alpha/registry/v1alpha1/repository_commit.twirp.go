// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-twirp v7.1.0, DO NOT EDIT.
// source: buf/alpha/registry/v1alpha1/repository_commit.proto

package registryv1alpha1

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// =================================
// RepositoryCommitService Interface
// =================================

// RepositoryCommitService is the Repository commit service.
// All methods on the Repository commit service require authentication.
type RepositoryCommitService interface {
	// ListRepositoryCommits lists the repository commits associated with a repository branch.
	ListRepositoryCommits(context.Context, *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error)
}

// =======================================
// RepositoryCommitService Protobuf Client
// =======================================

type repositoryCommitServiceProtobufClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRepositoryCommitServiceProtobufClient creates a Protobuf client that implements the RepositoryCommitService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRepositoryCommitServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RepositoryCommitService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
	urls := [1]string{
		serviceURL + "ListRepositoryCommits",
	}

	return &repositoryCommitServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *repositoryCommitServiceProtobufClient) ListRepositoryCommits(ctx context.Context, in *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommits")
	caller := c.callListRepositoryCommits
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsRequest) when calling interceptor")
					}
					return c.callListRepositoryCommits(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceProtobufClient) callListRepositoryCommits(ctx context.Context, in *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
	out := new(ListRepositoryCommitsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===================================
// RepositoryCommitService JSON Client
// ===================================

type repositoryCommitServiceJSONClient struct {
	client      HTTPClient
	urls        [1]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRepositoryCommitServiceJSONClient creates a JSON client that implements the RepositoryCommitService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRepositoryCommitServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RepositoryCommitService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
	urls := [1]string{
		serviceURL + "ListRepositoryCommits",
	}

	return &repositoryCommitServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *repositoryCommitServiceJSONClient) ListRepositoryCommits(ctx context.Context, in *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommits")
	caller := c.callListRepositoryCommits
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsRequest) when calling interceptor")
					}
					return c.callListRepositoryCommits(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *repositoryCommitServiceJSONClient) callListRepositoryCommits(ctx context.Context, in *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
	out := new(ListRepositoryCommitsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ======================================
// RepositoryCommitService Server Handler
// ======================================

type repositoryCommitServiceServer struct {
	RepositoryCommitService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewRepositoryCommitServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewRepositoryCommitServiceServer(svc RepositoryCommitService, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewRepositoryCommitServiceServer", o))
		}
	}

	return &repositoryCommitServiceServer{
		RepositoryCommitService: svc,
		pathPrefix:              serverOpts.PathPrefix(),
		interceptor:             twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:                   serverOpts.Hooks,
		jsonSkipDefaults:        serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *repositoryCommitServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// RepositoryCommitServicePathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const RepositoryCommitServicePathPrefix = "/twirp/buf.alpha.registry.v1alpha1.RepositoryCommitService/"

func (s *repositoryCommitServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "buf.alpha.registry.v1alpha1")
	ctx = ctxsetters.WithServiceName(ctx, "RepositoryCommitService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "buf.alpha.registry.v1alpha1.RepositoryCommitService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ListRepositoryCommits":
		s.serveListRepositoryCommits(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommits(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListRepositoryCommitsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListRepositoryCommitsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommits")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ListRepositoryCommitsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommits
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommits(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsResponse and nil error while calling ListRepositoryCommits. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) serveListRepositoryCommitsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRepositoryCommits")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ListRepositoryCommitsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RepositoryCommitService.ListRepositoryCommits
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRepositoryCommitsRequest) (*ListRepositoryCommitsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRepositoryCommitsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRepositoryCommitsRequest) when calling interceptor")
					}
					return s.RepositoryCommitService.ListRepositoryCommits(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRepositoryCommitsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRepositoryCommitsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRepositoryCommitsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRepositoryCommitsResponse and nil error while calling ListRepositoryCommits. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *repositoryCommitServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor5, 0
}

func (s *repositoryCommitServiceServer) ProtocGenTwirpVersion() string {
	return "v7.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *repositoryCommitServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "buf.alpha.registry.v1alpha1", "RepositoryCommitService")
}

var twirpFileDescriptor5 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x95, 0xbb, 0x32, 0xb6, 0x5b, 0xca, 0x87, 0x05, 0x23, 0xea, 0x98, 0x88, 0x82, 0x84, 0xfa,
	0x82, 0xad, 0x75, 0xbc, 0xc0, 0xde, 0xc6, 0x13, 0x12, 0x42, 0x28, 0xdb, 0xd3, 0x34, 0x29, 0x72,
	0x92, 0xdb, 0xd4, 0xa2, 0x89, 0x83, 0xed, 0x54, 0x6c, 0xbf, 0x00, 0x89, 0x57, 0x24, 0x7e, 0x01,
	0xef, 0xfc, 0x13, 0xfe, 0x12, 0x8a, 0x33, 0xaf, 0x55, 0x81, 0x3e, 0xf0, 0x66, 0x1f, 0x9f, 0x73,
	0xee, 0xb9, 0xf7, 0x26, 0x70, 0x94, 0x36, 0x53, 0x2e, 0xe6, 0xf5, 0x4c, 0x70, 0x8d, 0x85, 0x34,
	0x56, 0x5f, 0xf2, 0xc5, 0xa1, 0x03, 0x0e, 0xb9, 0xc6, 0x5a, 0x19, 0x69, 0x95, 0xbe, 0x4c, 0x32,
	0x55, 0x96, 0xd2, 0xb2, 0x5a, 0x2b, 0xab, 0xe8, 0x7e, 0xda, 0x4c, 0x99, 0xe3, 0x30, 0x2f, 0x62,
	0x5e, 0x34, 0x0a, 0x97, 0x8e, 0xa2, 0x96, 0x4b, 0x33, 0x51, 0xcb, 0x4e, 0x3e, 0x7a, 0x5a, 0x28,
	0x55, 0xcc, 0x91, 0xbb, 0x5b, 0xcb, 0xb6, 0xb2, 0x44, 0x63, 0x45, 0x59, 0x77, 0x84, 0xe8, 0x2b,
	0x81, 0xfb, 0xf1, 0x4d, 0xed, 0x37, 0xae, 0x34, 0xbd, 0x0b, 0x3d, 0x99, 0x07, 0x24, 0x24, 0xe3,
	0xdd, 0xb8, 0x27, 0x73, 0x7a, 0x0c, 0x83, 0x4c, 0xa3, 0xb0, 0x98, 0xb4, 0xf2, 0xa0, 0x17, 0x92,
	0xf1, 0x60, 0x32, 0x62, 0x9d, 0x37, 0xf3, 0xde, 0xec, 0xcc, 0x7b, 0xc7, 0xd0, 0xd1, 0x5b, 0x80,
	0xee, 0xc1, 0x76, 0x2e, 0x0b, 0x34, 0x36, 0xd8, 0x72, 0x86, 0xd7, 0x37, 0x4a, 0xa1, 0x5f, 0x89,
	0x12, 0x83, 0xbe, 0x43, 0xdd, 0x39, 0xfa, 0x45, 0xe0, 0xc9, 0x3b, 0x69, 0xec, 0x7a, 0x22, 0x13,
	0xe3, 0xa7, 0xa6, 0x15, 0x3d, 0x83, 0xe1, 0xca, 0xa4, 0x6e, 0x42, 0xde, 0x59, 0x82, 0x6f, 0x73,
	0xfa, 0x12, 0xf6, 0x56, 0x48, 0xa9, 0x16, 0x55, 0x36, 0x4b, 0x5c, 0xad, 0x9e, 0x63, 0x3f, 0x5c,
	0xbe, 0x9e, 0xb8, 0xc7, 0xf7, 0xa2, 0x44, 0xba, 0x0f, 0xbb, 0xb5, 0x28, 0x30, 0x31, 0xf2, 0x0a,
	0x5d, 0xd4, 0x61, 0xbc, 0xd3, 0x02, 0xa7, 0xf2, 0x0a, 0xe9, 0x01, 0x80, 0x7b, 0xb4, 0xea, 0x23,
	0x56, 0xd7, 0x91, 0x1d, 0xfd, 0xac, 0x05, 0x68, 0x00, 0xb7, 0x35, 0x2e, 0x50, 0x1b, 0x0c, 0x6e,
	0x85, 0x64, 0xbc, 0x13, 0xfb, 0x6b, 0xf4, 0x83, 0xc0, 0xc1, 0x3f, 0x3a, 0x32, 0xb5, 0xaa, 0x0c,
	0xd2, 0x0b, 0xa0, 0x7f, 0x2c, 0xdf, 0x04, 0x24, 0xdc, 0x1a, 0x0f, 0x26, 0x2f, 0xd8, 0x86, 0xf5,
	0xb3, 0x75, 0xcf, 0xf8, 0x81, 0x5e, 0xaf, 0x42, 0x9f, 0xc3, 0xbd, 0x0a, 0x3f, 0xdb, 0x64, 0x25,
	0x7d, 0x37, 0x84, 0x61, 0x0b, 0x7f, 0xf0, 0x1d, 0x4c, 0x7e, 0x12, 0x78, 0xbc, 0xee, 0x77, 0x8a,
	0x7a, 0x21, 0x33, 0xa4, 0xdf, 0x08, 0x3c, 0xfa, 0x6b, 0x0f, 0xf4, 0xd5, 0xc6, 0x7c, 0x9b, 0x36,
	0x39, 0x7a, 0xfd, 0x3f, 0xd2, 0x6e, 0x64, 0x51, 0xff, 0xcb, 0xf7, 0x88, 0x9c, 0x5c, 0x9c, 0x9f,
	0x17, 0xd2, 0xce, 0x9a, 0x94, 0x65, 0xaa, 0xe4, 0x69, 0x33, 0x4d, 0x1b, 0x39, 0xcf, 0xdb, 0x03,
	0x97, 0x95, 0x45, 0x5d, 0x89, 0x39, 0x2f, 0xb0, 0xea, 0xbe, 0x7d, 0x5e, 0x28, 0xbe, 0xe1, 0xff,
	0x3b, 0xf6, 0x88, 0x07, 0xd2, 0x6d, 0x27, 0x3b, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x98,
	0x07, 0x49, 0xb6, 0x03, 0x00, 0x00,
}
