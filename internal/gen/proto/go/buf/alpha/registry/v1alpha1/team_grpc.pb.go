// Copyright 2020-2021 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: buf/alpha/registry/v1alpha1/team.proto

package registryv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	// GetTeam gets a team by ID.
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	// GetTeamByName gets a team by the combination of its name and organization.
	GetTeamByName(ctx context.Context, in *GetTeamByNameRequest, opts ...grpc.CallOption) (*GetTeamByNameResponse, error)
	// ListOrganizationTeams lists all teams belonging to an organization.
	ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error)
	// CreateTeam creates a new team within an organization.
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	// CreateTeamByName creates a new team within an organization, looking up the organization by name.
	CreateTeamByName(ctx context.Context, in *CreateTeamByNameRequest, opts ...grpc.CallOption) (*CreateTeamByNameResponse, error)
	// UpdateTeamName updates a team's name.
	UpdateTeamName(ctx context.Context, in *UpdateTeamNameRequest, opts ...grpc.CallOption) (*UpdateTeamNameResponse, error)
	// AddUserToTeam adds a user to a team by their respective IDs.
	AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*AddUserToTeamResponse, error)
	// AddUserToTeamByName adds a user to a team, looking up the entities by user, team, and organization names.
	AddUserToTeamByName(ctx context.Context, in *AddUserToTeamByNameRequest, opts ...grpc.CallOption) (*AddUserToTeamByNameResponse, error)
	// RemoveUserFromTeam removes a user from a team by their respective IDs.
	RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*RemoveUserFromTeamResponse, error)
	// RemoveUserFromTeamByName removes a user from a team, looking up the entities by user, team, and organization names.
	RemoveUserFromTeamByName(ctx context.Context, in *RemoveUserFromTeamByNameRequest, opts ...grpc.CallOption) (*RemoveUserFromTeamByNameResponse, error)
	// DeleteTeam deletes a team by ID.
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	// DeleteTeamByName deletes a team by the combination of its name and organization.
	DeleteTeamByName(ctx context.Context, in *DeleteTeamByNameRequest, opts ...grpc.CallOption) (*DeleteTeamByNameResponse, error)
	// AddTeamOrganizationScope adds an organization scope to a team by ID.
	AddTeamOrganizationScope(ctx context.Context, in *AddTeamOrganizationScopeRequest, opts ...grpc.CallOption) (*AddTeamOrganizationScopeResponse, error)
	// AddTeamOrganizationScopeByName adds an organization scope to a team by name.
	AddTeamOrganizationScopeByName(ctx context.Context, in *AddTeamOrganizationScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamOrganizationScopeByNameResponse, error)
	// RemoveTeamOrganizationScope removes an organization scope from a team by ID.
	RemoveTeamOrganizationScope(ctx context.Context, in *RemoveTeamOrganizationScopeRequest, opts ...grpc.CallOption) (*RemoveTeamOrganizationScopeResponse, error)
	// RemoveTeamOrganizationScopeByName removes an organization scope from a team by name.
	RemoveTeamOrganizationScopeByName(ctx context.Context, in *RemoveTeamOrganizationScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamOrganizationScopeByNameResponse, error)
	// AddTeamBaseRepositoryScope adds a base repository scope to a team by ID.
	AddTeamBaseRepositoryScope(ctx context.Context, in *AddTeamBaseRepositoryScopeRequest, opts ...grpc.CallOption) (*AddTeamBaseRepositoryScopeResponse, error)
	// AddTeamBaseRepositoryScopeByName adds a base repository scope to a team by name.
	AddTeamBaseRepositoryScopeByName(ctx context.Context, in *AddTeamBaseRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamBaseRepositoryScopeByNameResponse, error)
	// RemoveTeamBaseRepositoryScope removes a base repository scope from a team by ID.
	RemoveTeamBaseRepositoryScope(ctx context.Context, in *RemoveTeamBaseRepositoryScopeRequest, opts ...grpc.CallOption) (*RemoveTeamBaseRepositoryScopeResponse, error)
	// RemoveTeamBaseRepositoryScopeByName removes a base repository scope from a team by name.
	RemoveTeamBaseRepositoryScopeByName(ctx context.Context, in *RemoveTeamBaseRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamBaseRepositoryScopeByNameResponse, error)
	// AddTeamRepositoryScope adds a repository scope for a specific repository to a team by ID.
	AddTeamRepositoryScope(ctx context.Context, in *AddTeamRepositoryScopeRequest, opts ...grpc.CallOption) (*AddTeamRepositoryScopeResponse, error)
	// AddTeamRepositoryScopeByName adds a repository scope for a specific repository to a team by name.
	AddTeamRepositoryScopeByName(ctx context.Context, in *AddTeamRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamRepositoryScopeByNameResponse, error)
	// RemoveTeamRepositoryScope removes a repository scope for a specific repository from a team by ID.
	RemoveTeamRepositoryScope(ctx context.Context, in *RemoveTeamRepositoryScopeRequest, opts ...grpc.CallOption) (*RemoveTeamRepositoryScopeResponse, error)
	// RemoveTeamRepositoryScopeByName removes a repository scope for a specific repository from a team by name.
	RemoveTeamRepositoryScopeByName(ctx context.Context, in *RemoveTeamRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamRepositoryScopeByNameResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeamByName(ctx context.Context, in *GetTeamByNameRequest, opts ...grpc.CallOption) (*GetTeamByNameResponse, error) {
	out := new(GetTeamByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/GetTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error) {
	out := new(ListOrganizationTeamsResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/ListOrganizationTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateTeamByName(ctx context.Context, in *CreateTeamByNameRequest, opts ...grpc.CallOption) (*CreateTeamByNameResponse, error) {
	out := new(CreateTeamByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/CreateTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateTeamName(ctx context.Context, in *UpdateTeamNameRequest, opts ...grpc.CallOption) (*UpdateTeamNameResponse, error) {
	out := new(UpdateTeamNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/UpdateTeamName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*AddUserToTeamResponse, error) {
	out := new(AddUserToTeamResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddUserToTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddUserToTeamByName(ctx context.Context, in *AddUserToTeamByNameRequest, opts ...grpc.CallOption) (*AddUserToTeamByNameResponse, error) {
	out := new(AddUserToTeamByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddUserToTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveUserFromTeam(ctx context.Context, in *RemoveUserFromTeamRequest, opts ...grpc.CallOption) (*RemoveUserFromTeamResponse, error) {
	out := new(RemoveUserFromTeamResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveUserFromTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveUserFromTeamByName(ctx context.Context, in *RemoveUserFromTeamByNameRequest, opts ...grpc.CallOption) (*RemoveUserFromTeamByNameResponse, error) {
	out := new(RemoveUserFromTeamByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveUserFromTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteTeamByName(ctx context.Context, in *DeleteTeamByNameRequest, opts ...grpc.CallOption) (*DeleteTeamByNameResponse, error) {
	out := new(DeleteTeamByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/DeleteTeamByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamOrganizationScope(ctx context.Context, in *AddTeamOrganizationScopeRequest, opts ...grpc.CallOption) (*AddTeamOrganizationScopeResponse, error) {
	out := new(AddTeamOrganizationScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamOrganizationScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamOrganizationScopeByName(ctx context.Context, in *AddTeamOrganizationScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamOrganizationScopeByNameResponse, error) {
	out := new(AddTeamOrganizationScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamOrganizationScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamOrganizationScope(ctx context.Context, in *RemoveTeamOrganizationScopeRequest, opts ...grpc.CallOption) (*RemoveTeamOrganizationScopeResponse, error) {
	out := new(RemoveTeamOrganizationScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamOrganizationScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamOrganizationScopeByName(ctx context.Context, in *RemoveTeamOrganizationScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamOrganizationScopeByNameResponse, error) {
	out := new(RemoveTeamOrganizationScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamOrganizationScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamBaseRepositoryScope(ctx context.Context, in *AddTeamBaseRepositoryScopeRequest, opts ...grpc.CallOption) (*AddTeamBaseRepositoryScopeResponse, error) {
	out := new(AddTeamBaseRepositoryScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamBaseRepositoryScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamBaseRepositoryScopeByName(ctx context.Context, in *AddTeamBaseRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamBaseRepositoryScopeByNameResponse, error) {
	out := new(AddTeamBaseRepositoryScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamBaseRepositoryScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamBaseRepositoryScope(ctx context.Context, in *RemoveTeamBaseRepositoryScopeRequest, opts ...grpc.CallOption) (*RemoveTeamBaseRepositoryScopeResponse, error) {
	out := new(RemoveTeamBaseRepositoryScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamBaseRepositoryScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamBaseRepositoryScopeByName(ctx context.Context, in *RemoveTeamBaseRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamBaseRepositoryScopeByNameResponse, error) {
	out := new(RemoveTeamBaseRepositoryScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamBaseRepositoryScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamRepositoryScope(ctx context.Context, in *AddTeamRepositoryScopeRequest, opts ...grpc.CallOption) (*AddTeamRepositoryScopeResponse, error) {
	out := new(AddTeamRepositoryScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamRepositoryScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) AddTeamRepositoryScopeByName(ctx context.Context, in *AddTeamRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*AddTeamRepositoryScopeByNameResponse, error) {
	out := new(AddTeamRepositoryScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/AddTeamRepositoryScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamRepositoryScope(ctx context.Context, in *RemoveTeamRepositoryScopeRequest, opts ...grpc.CallOption) (*RemoveTeamRepositoryScopeResponse, error) {
	out := new(RemoveTeamRepositoryScopeResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamRepositoryScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) RemoveTeamRepositoryScopeByName(ctx context.Context, in *RemoveTeamRepositoryScopeByNameRequest, opts ...grpc.CallOption) (*RemoveTeamRepositoryScopeByNameResponse, error) {
	out := new(RemoveTeamRepositoryScopeByNameResponse)
	err := c.cc.Invoke(ctx, "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamRepositoryScopeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations should embed UnimplementedTeamServiceServer
// for forward compatibility
type TeamServiceServer interface {
	// GetTeam gets a team by ID.
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	// GetTeamByName gets a team by the combination of its name and organization.
	GetTeamByName(context.Context, *GetTeamByNameRequest) (*GetTeamByNameResponse, error)
	// ListOrganizationTeams lists all teams belonging to an organization.
	ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error)
	// CreateTeam creates a new team within an organization.
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	// CreateTeamByName creates a new team within an organization, looking up the organization by name.
	CreateTeamByName(context.Context, *CreateTeamByNameRequest) (*CreateTeamByNameResponse, error)
	// UpdateTeamName updates a team's name.
	UpdateTeamName(context.Context, *UpdateTeamNameRequest) (*UpdateTeamNameResponse, error)
	// AddUserToTeam adds a user to a team by their respective IDs.
	AddUserToTeam(context.Context, *AddUserToTeamRequest) (*AddUserToTeamResponse, error)
	// AddUserToTeamByName adds a user to a team, looking up the entities by user, team, and organization names.
	AddUserToTeamByName(context.Context, *AddUserToTeamByNameRequest) (*AddUserToTeamByNameResponse, error)
	// RemoveUserFromTeam removes a user from a team by their respective IDs.
	RemoveUserFromTeam(context.Context, *RemoveUserFromTeamRequest) (*RemoveUserFromTeamResponse, error)
	// RemoveUserFromTeamByName removes a user from a team, looking up the entities by user, team, and organization names.
	RemoveUserFromTeamByName(context.Context, *RemoveUserFromTeamByNameRequest) (*RemoveUserFromTeamByNameResponse, error)
	// DeleteTeam deletes a team by ID.
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	// DeleteTeamByName deletes a team by the combination of its name and organization.
	DeleteTeamByName(context.Context, *DeleteTeamByNameRequest) (*DeleteTeamByNameResponse, error)
	// AddTeamOrganizationScope adds an organization scope to a team by ID.
	AddTeamOrganizationScope(context.Context, *AddTeamOrganizationScopeRequest) (*AddTeamOrganizationScopeResponse, error)
	// AddTeamOrganizationScopeByName adds an organization scope to a team by name.
	AddTeamOrganizationScopeByName(context.Context, *AddTeamOrganizationScopeByNameRequest) (*AddTeamOrganizationScopeByNameResponse, error)
	// RemoveTeamOrganizationScope removes an organization scope from a team by ID.
	RemoveTeamOrganizationScope(context.Context, *RemoveTeamOrganizationScopeRequest) (*RemoveTeamOrganizationScopeResponse, error)
	// RemoveTeamOrganizationScopeByName removes an organization scope from a team by name.
	RemoveTeamOrganizationScopeByName(context.Context, *RemoveTeamOrganizationScopeByNameRequest) (*RemoveTeamOrganizationScopeByNameResponse, error)
	// AddTeamBaseRepositoryScope adds a base repository scope to a team by ID.
	AddTeamBaseRepositoryScope(context.Context, *AddTeamBaseRepositoryScopeRequest) (*AddTeamBaseRepositoryScopeResponse, error)
	// AddTeamBaseRepositoryScopeByName adds a base repository scope to a team by name.
	AddTeamBaseRepositoryScopeByName(context.Context, *AddTeamBaseRepositoryScopeByNameRequest) (*AddTeamBaseRepositoryScopeByNameResponse, error)
	// RemoveTeamBaseRepositoryScope removes a base repository scope from a team by ID.
	RemoveTeamBaseRepositoryScope(context.Context, *RemoveTeamBaseRepositoryScopeRequest) (*RemoveTeamBaseRepositoryScopeResponse, error)
	// RemoveTeamBaseRepositoryScopeByName removes a base repository scope from a team by name.
	RemoveTeamBaseRepositoryScopeByName(context.Context, *RemoveTeamBaseRepositoryScopeByNameRequest) (*RemoveTeamBaseRepositoryScopeByNameResponse, error)
	// AddTeamRepositoryScope adds a repository scope for a specific repository to a team by ID.
	AddTeamRepositoryScope(context.Context, *AddTeamRepositoryScopeRequest) (*AddTeamRepositoryScopeResponse, error)
	// AddTeamRepositoryScopeByName adds a repository scope for a specific repository to a team by name.
	AddTeamRepositoryScopeByName(context.Context, *AddTeamRepositoryScopeByNameRequest) (*AddTeamRepositoryScopeByNameResponse, error)
	// RemoveTeamRepositoryScope removes a repository scope for a specific repository from a team by ID.
	RemoveTeamRepositoryScope(context.Context, *RemoveTeamRepositoryScopeRequest) (*RemoveTeamRepositoryScopeResponse, error)
	// RemoveTeamRepositoryScopeByName removes a repository scope for a specific repository from a team by name.
	RemoveTeamRepositoryScopeByName(context.Context, *RemoveTeamRepositoryScopeByNameRequest) (*RemoveTeamRepositoryScopeByNameResponse, error)
}

// UnimplementedTeamServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTeamServiceServer struct {
}

func (UnimplementedTeamServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedTeamServiceServer) GetTeamByName(context.Context, *GetTeamByNameRequest) (*GetTeamByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationTeams not implemented")
}
func (UnimplementedTeamServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServiceServer) CreateTeamByName(context.Context, *CreateTeamByNameRequest) (*CreateTeamByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) UpdateTeamName(context.Context, *UpdateTeamNameRequest) (*UpdateTeamNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamName not implemented")
}
func (UnimplementedTeamServiceServer) AddUserToTeam(context.Context, *AddUserToTeamRequest) (*AddUserToTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToTeam not implemented")
}
func (UnimplementedTeamServiceServer) AddUserToTeamByName(context.Context, *AddUserToTeamByNameRequest) (*AddUserToTeamByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) RemoveUserFromTeam(context.Context, *RemoveUserFromTeamRequest) (*RemoveUserFromTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromTeam not implemented")
}
func (UnimplementedTeamServiceServer) RemoveUserFromTeamByName(context.Context, *RemoveUserFromTeamByNameRequest) (*RemoveUserFromTeamByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedTeamServiceServer) DeleteTeamByName(context.Context, *DeleteTeamByNameRequest) (*DeleteTeamByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamByName not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamOrganizationScope(context.Context, *AddTeamOrganizationScopeRequest) (*AddTeamOrganizationScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamOrganizationScope not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamOrganizationScopeByName(context.Context, *AddTeamOrganizationScopeByNameRequest) (*AddTeamOrganizationScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamOrganizationScopeByName not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamOrganizationScope(context.Context, *RemoveTeamOrganizationScopeRequest) (*RemoveTeamOrganizationScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamOrganizationScope not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamOrganizationScopeByName(context.Context, *RemoveTeamOrganizationScopeByNameRequest) (*RemoveTeamOrganizationScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamOrganizationScopeByName not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamBaseRepositoryScope(context.Context, *AddTeamBaseRepositoryScopeRequest) (*AddTeamBaseRepositoryScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamBaseRepositoryScope not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamBaseRepositoryScopeByName(context.Context, *AddTeamBaseRepositoryScopeByNameRequest) (*AddTeamBaseRepositoryScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamBaseRepositoryScopeByName not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamBaseRepositoryScope(context.Context, *RemoveTeamBaseRepositoryScopeRequest) (*RemoveTeamBaseRepositoryScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamBaseRepositoryScope not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamBaseRepositoryScopeByName(context.Context, *RemoveTeamBaseRepositoryScopeByNameRequest) (*RemoveTeamBaseRepositoryScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamBaseRepositoryScopeByName not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamRepositoryScope(context.Context, *AddTeamRepositoryScopeRequest) (*AddTeamRepositoryScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamRepositoryScope not implemented")
}
func (UnimplementedTeamServiceServer) AddTeamRepositoryScopeByName(context.Context, *AddTeamRepositoryScopeByNameRequest) (*AddTeamRepositoryScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamRepositoryScopeByName not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamRepositoryScope(context.Context, *RemoveTeamRepositoryScopeRequest) (*RemoveTeamRepositoryScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamRepositoryScope not implemented")
}
func (UnimplementedTeamServiceServer) RemoveTeamRepositoryScopeByName(context.Context, *RemoveTeamRepositoryScopeByNameRequest) (*RemoveTeamRepositoryScopeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamRepositoryScopeByName not implemented")
}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/GetTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeamByName(ctx, req.(*GetTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListOrganizationTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListOrganizationTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/ListOrganizationTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListOrganizationTeams(ctx, req.(*ListOrganizationTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/CreateTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeamByName(ctx, req.(*CreateTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateTeamName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateTeamName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/UpdateTeamName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateTeamName(ctx, req.(*UpdateTeamNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddUserToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddUserToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddUserToTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddUserToTeam(ctx, req.(*AddUserToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddUserToTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddUserToTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddUserToTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddUserToTeamByName(ctx, req.(*AddUserToTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveUserFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveUserFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveUserFromTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveUserFromTeam(ctx, req.(*RemoveUserFromTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveUserFromTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveUserFromTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveUserFromTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveUserFromTeamByName(ctx, req.(*RemoveUserFromTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteTeamByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteTeamByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/DeleteTeamByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteTeamByName(ctx, req.(*DeleteTeamByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamOrganizationScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamOrganizationScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamOrganizationScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamOrganizationScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamOrganizationScope(ctx, req.(*AddTeamOrganizationScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamOrganizationScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamOrganizationScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamOrganizationScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamOrganizationScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamOrganizationScopeByName(ctx, req.(*AddTeamOrganizationScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamOrganizationScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamOrganizationScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamOrganizationScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamOrganizationScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamOrganizationScope(ctx, req.(*RemoveTeamOrganizationScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamOrganizationScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamOrganizationScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamOrganizationScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamOrganizationScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamOrganizationScopeByName(ctx, req.(*RemoveTeamOrganizationScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamBaseRepositoryScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamBaseRepositoryScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamBaseRepositoryScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamBaseRepositoryScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamBaseRepositoryScope(ctx, req.(*AddTeamBaseRepositoryScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamBaseRepositoryScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamBaseRepositoryScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamBaseRepositoryScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamBaseRepositoryScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamBaseRepositoryScopeByName(ctx, req.(*AddTeamBaseRepositoryScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamBaseRepositoryScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamBaseRepositoryScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamBaseRepositoryScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamBaseRepositoryScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamBaseRepositoryScope(ctx, req.(*RemoveTeamBaseRepositoryScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamBaseRepositoryScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamBaseRepositoryScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamBaseRepositoryScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamBaseRepositoryScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamBaseRepositoryScopeByName(ctx, req.(*RemoveTeamBaseRepositoryScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamRepositoryScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamRepositoryScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamRepositoryScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamRepositoryScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamRepositoryScope(ctx, req.(*AddTeamRepositoryScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_AddTeamRepositoryScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamRepositoryScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).AddTeamRepositoryScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/AddTeamRepositoryScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).AddTeamRepositoryScopeByName(ctx, req.(*AddTeamRepositoryScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamRepositoryScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamRepositoryScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamRepositoryScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamRepositoryScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamRepositoryScope(ctx, req.(*RemoveTeamRepositoryScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_RemoveTeamRepositoryScopeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamRepositoryScopeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).RemoveTeamRepositoryScopeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buf.alpha.registry.v1alpha1.TeamService/RemoveTeamRepositoryScopeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).RemoveTeamRepositoryScopeByName(ctx, req.(*RemoveTeamRepositoryScopeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buf.alpha.registry.v1alpha1.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeam",
			Handler:    _TeamService_GetTeam_Handler,
		},
		{
			MethodName: "GetTeamByName",
			Handler:    _TeamService_GetTeamByName_Handler,
		},
		{
			MethodName: "ListOrganizationTeams",
			Handler:    _TeamService_ListOrganizationTeams_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _TeamService_CreateTeam_Handler,
		},
		{
			MethodName: "CreateTeamByName",
			Handler:    _TeamService_CreateTeamByName_Handler,
		},
		{
			MethodName: "UpdateTeamName",
			Handler:    _TeamService_UpdateTeamName_Handler,
		},
		{
			MethodName: "AddUserToTeam",
			Handler:    _TeamService_AddUserToTeam_Handler,
		},
		{
			MethodName: "AddUserToTeamByName",
			Handler:    _TeamService_AddUserToTeamByName_Handler,
		},
		{
			MethodName: "RemoveUserFromTeam",
			Handler:    _TeamService_RemoveUserFromTeam_Handler,
		},
		{
			MethodName: "RemoveUserFromTeamByName",
			Handler:    _TeamService_RemoveUserFromTeamByName_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _TeamService_DeleteTeam_Handler,
		},
		{
			MethodName: "DeleteTeamByName",
			Handler:    _TeamService_DeleteTeamByName_Handler,
		},
		{
			MethodName: "AddTeamOrganizationScope",
			Handler:    _TeamService_AddTeamOrganizationScope_Handler,
		},
		{
			MethodName: "AddTeamOrganizationScopeByName",
			Handler:    _TeamService_AddTeamOrganizationScopeByName_Handler,
		},
		{
			MethodName: "RemoveTeamOrganizationScope",
			Handler:    _TeamService_RemoveTeamOrganizationScope_Handler,
		},
		{
			MethodName: "RemoveTeamOrganizationScopeByName",
			Handler:    _TeamService_RemoveTeamOrganizationScopeByName_Handler,
		},
		{
			MethodName: "AddTeamBaseRepositoryScope",
			Handler:    _TeamService_AddTeamBaseRepositoryScope_Handler,
		},
		{
			MethodName: "AddTeamBaseRepositoryScopeByName",
			Handler:    _TeamService_AddTeamBaseRepositoryScopeByName_Handler,
		},
		{
			MethodName: "RemoveTeamBaseRepositoryScope",
			Handler:    _TeamService_RemoveTeamBaseRepositoryScope_Handler,
		},
		{
			MethodName: "RemoveTeamBaseRepositoryScopeByName",
			Handler:    _TeamService_RemoveTeamBaseRepositoryScopeByName_Handler,
		},
		{
			MethodName: "AddTeamRepositoryScope",
			Handler:    _TeamService_AddTeamRepositoryScope_Handler,
		},
		{
			MethodName: "AddTeamRepositoryScopeByName",
			Handler:    _TeamService_AddTeamRepositoryScopeByName_Handler,
		},
		{
			MethodName: "RemoveTeamRepositoryScope",
			Handler:    _TeamService_RemoveTeamRepositoryScope_Handler,
		},
		{
			MethodName: "RemoveTeamRepositoryScopeByName",
			Handler:    _TeamService_RemoveTeamRepositoryScopeByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buf/alpha/registry/v1alpha1/team.proto",
}
