// Copyright 2020 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bufbuild/buf/module/v1beta1/module.proto

package modulev1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _module_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ModuleFileSet with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ModuleFileSet) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetModuleFiles()); l < 1 || l > 16384 {
		return ModuleFileSetValidationError{
			field:  "ModuleFiles",
			reason: "value must contain between 1 and 16384 items, inclusive",
		}
	}

	for idx, item := range m.GetModuleFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleFileSetValidationError{
					field:  fmt.Sprintf("ModuleFiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ModuleFileSetValidationError is the validation error returned by
// ModuleFileSet.Validate if the designated constraints aren't met.
type ModuleFileSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleFileSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleFileSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleFileSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleFileSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleFileSetValidationError) ErrorName() string { return "ModuleFileSetValidationError" }

// Error satisfies the builtin error interface
func (e ModuleFileSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleFileSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleFileSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleFileSetValidationError{}

// Validate checks the field values on ModuleFile with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ModuleFile) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 2048 {
		return ModuleFileValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
	}

	if len(m.GetContent()) > 1048576 {
		return ModuleFileValidationError{
			field:  "Content",
			reason: "value length must be at most 1048576 bytes",
		}
	}

	return nil
}

// ModuleFileValidationError is the validation error returned by
// ModuleFile.Validate if the designated constraints aren't met.
type ModuleFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleFileValidationError) ErrorName() string { return "ModuleFileValidationError" }

// Error satisfies the builtin error interface
func (e ModuleFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleFileValidationError{}
