run:
  skip-dirs-use-default: false
linters-settings:
  errcheck:
    check-type-assertions: true
linters:
  enable:
    - govet
    - asciicheck
    - bodyclose
    - deadcode
    - depguard
    - dogsled
    - errcheck
    - exportloopref
    - gochecknoinits
    - gofmt
    - goheader
    - goimports
    - gomodguard
    - goprintffuncname
    - gosimple
    - gosec
    - govet
    - ineffassign
    - misspell
    - nakedret
    - nolintlint
    - rowserrcheck
    - scopelint
    - staticcheck
    - structcheck
    - stylecheck
    - typecheck
    - unconvert
    - unused
    - varcheck
    - whitespace
  disable-all: true
issues:
  exclude-rules:
    - linters:
        - stylecheck
      text: "ST1005:"
    - linters:
        - errcheck
      # headers.go has casts with values from contexts that should fail if there
      # is no error, but it would be very unidiomatic to return an error from
      # the functions that do these casts, and we completely control the
      # context values within this file
      path: internal/pkg/rpc/headers.go
    - linters:
        - gosec
      # G101 checks for hardcoded credentials, and the variables named "*Password*
      # trip this off.
      path: internal/buf/bufcli/bufcli.go
      text: "G101:"
    - linters:
        - gosec
      # G204 checks that exec.Command is not called with non-constants.
      # We call exec.Command for protoc and plugin proxying, and control the arguments completely.
      path: internal/pkg/app/appproto/appprotoexec/binary_handler.go
      text: "G204:"
    - linters:
        - gosec
      # G204 checks that exec.Command is not called with non-constants.
      # We call exec.Command for protoc and plugin proxying, and control the arguments completely.
      path: internal/pkg/app/appproto/appprotoexec/protoc_proxy_handler.go
      text: "G204:"
      # we actually want to use this init in testing
    - linters:
        - gochecknoinits
      path: internal/buf/bufcore/bufmodule/bufmoduletesting/bufmoduletesting.go
